<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASCOM.DriverAccess</name>
    </assembly>
    <members>
        <member name="T:ASCOM.DriverAccess.AscomDriver">
            <summary>
            Base class for ASCOM driver access toolkit device classes. This class contains the methods common to all devices
            so that they can be maintained in just one place.
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.AscomDriver.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.AscomDriver.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ASCOM.DriverAccess.AscomDriver"/> class.
            </summary>
            <param name="deviceProgId">The prog id. of the device being created.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.AscomDriver.Dispose">
            <summary>
            This method is a "clean-up" method that is primarily of use to drivers that are written in languages such as C# and VB.NET where resource clean-up is initially managed by the language's 
            runtime garbage collection mechanic. Driver authors should take care to ensure that a client or runtime calling Dispose() does not adversely affect other connected clients.
            Applications should not call this method.
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.AscomDriver.Dispose(System.Boolean)">
            <summary>
            Disposes of managed and unmanaged resources
            </summary>
            <param name="disposing">True to dispose of managed resources, false to dispose of unmanaged resources</param>
        </member>
        <member name="P:ASCOM.DriverAccess.AscomDriver.MemberFactory">
            <summary>
            Returns the member factory created for this device for use by the device class
            </summary>
            <value>The member factory object.</value>
        </member>
        <member name="P:ASCOM.DriverAccess.AscomDriver.DriverInterfaceVersion">
            <summary>
            Return the driver interface version number
            </summary>
            <returns>The driver's interface version</returns>
            <remarks>
            This method reads the interface version on the first call and caches it, returning the cached value on subsequent calls.
            It also handles interface version 1 drivers that don't have InterfaceVersion properties
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.AscomDriver.Connected">
            <summary>
            Set True to connect to the device hardware. Set False to disconnect from the device hardware.
            You can also read the property to check whether it is connected. This reports the current hardware state.
            </summary>
            <value><c>true</c> if connected to the hardware; otherwise, <c>false</c>.</value>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Must be implemented</b></p>Do not use a NotConnectedException here. That exception is for use in other methods that require a connection in order to succeed.
            <para>The Connected property sets and reports the state of connection to the device hardware.
            For a hub this means that Connected will be true when the first driver connects and will only be set to false
            when all drivers have disconnected.  A second driver may find that Connected is already true and
            setting Connected to false does not report Connected as false.  This is not an error because the physical state is that the
            hardware connection is still true.</para>
            <para>Multiple calls setting Connected to true or false will not cause an error.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.AscomDriver.Description">
            <summary>
            Returns a description of the device, such as manufacturer and model number. Any ASCII characters may be used. 
            </summary>
            <value>The description.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Must be implemented, must not throw a PropertyNotImplementedException.</b></p> 
            <para>The description length must be a maximum of 64 characters so that it can be used in FITS image headers, which are limited to 80 characters including the header name.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.AscomDriver.DriverInfo">
            <summary>
            Descriptive and version information about this ASCOM driver.
            </summary>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Must be implemented</b></p> This string may contain line endings and may be hundreds to thousands of characters long.
            It is intended to display detailed information on the ASCOM driver, including version and copyright data.
            See the <see cref="P:ASCOM.DriverAccess.AscomDriver.Description" /> property for information on the device itself.
            To get the driver version in a parse-able string, use the <see cref="P:ASCOM.DriverAccess.AscomDriver.DriverVersion" /> property.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.AscomDriver.DriverVersion">
            <summary>
            A string containing only the major and minor version of the driver.
            </summary>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Must be implemented</b></p> This must be in the form "n.n".
            It should not to be confused with the <see cref="P:ASCOM.DriverAccess.AscomDriver.InterfaceVersion" /> property, which is the version of this specification supported by the driver.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.AscomDriver.InterfaceVersion">
            <summary>
            The interface version number that this device supports.
            </summary>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks><p style="color:red"><b>Must be implemented</b></p> Clients can detect legacy V1 drivers by trying to read this property.
            If the driver raises an error, it is a V1 driver. V1 did not specify this property. A driver may also return a value of 1. 
            In other words, a raised error or a return value of 1 indicates that the driver is a V1 driver.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.AscomDriver.Name">
            <summary>
            The short name of the driver, for display purposes
            </summary>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Must be implemented</b></p>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.AscomDriver.SetupDialog">
            <summary>
            Launches a configuration dialogue box for the driver.  The call will not return
            until the user clicks OK or cancel manually.
            </summary>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks><p style="color:red"><b>Must be implemented</b></p> </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.AscomDriver.Action(System.String,System.String)">
            <summary>Invokes the specified device-specific custom action.</summary>
            <param name="ActionName">A well known name agreed by interested parties that represents the action to be carried out.</param>
            <param name="ActionParameters">List of required parameters or an <see cref="F:System.String.Empty">Empty String</see> if none are required.</param>
            <returns>A string response. The meaning of returned strings is set by the driver author.
            <para>Suppose filter wheels start to appear with automatic wheel changers; new actions could be <c>QueryWheels</c> and <c>SelectWheel</c>. The former returning a formatted list
            of wheel names and the second taking a wheel name and making the change, returning appropriate values to indicate success or failure.</para>
            </returns>
            <exception cref="T:ASCOM.MethodNotImplementedException">Thrown if no actions are supported.</exception>
            <exception cref="T:ASCOM.ActionNotImplementedException">It is intended that the <see cref="P:ASCOM.DriverAccess.AscomDriver.SupportedActions"/> method will inform clients of driver capabilities, but the driver must still throw 
            an <see cref="T:ASCOM.ActionNotImplementedException"/> exception  if it is asked to perform an action that it does not support.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Must be implemented.</b></p>
            <para>Action names are case insensitive, so SelectWheel, selectwheel and SELECTWHEEL all refer to the same action.</para>
            <para>The names of all supported actions must be returned in the <see cref="P:ASCOM.DriverAccess.AscomDriver.SupportedActions" /> property.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.AscomDriver.SupportedActions">
            <summary>Returns the list of custom action names supported by this driver.</summary>
            <value>An ArrayList of strings (SafeArray collection) containing the names of supported actions.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Must be implemented</b></p>
            <para>This method must return an empty <see cref="T:System.Collections.ArrayList" /> if no actions are supported. Do not throw a <see cref="T:ASCOM.PropertyNotImplementedException" />.</para>
            <para>SupportedActions is a "discovery" mechanism that enables clients to know which Actions a device supports without having to exercise the Actions themselves. This mechanism is necessary because there could be
            people / equipment safety issues if actions are called unexpectedly or out of a defined process sequence.
            It follows from this that SupportedActions must return names that match the spelling of Action names exactly, without additional descriptive text. However, returned names may use any casing
            because the <see cref="M:ASCOM.DriverAccess.AscomDriver.Action(System.String,System.String)" /> ActionName parameter is case insensitive.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.AscomDriver.CommandBlind(System.String,System.Boolean)">
            <summary>
            Transmits an arbitrary string to the device and does not wait for a response.
            Optionally, protocol framing characters may be added to the string before transmission.
            </summary>
            <param name="Command">The literal command string to be transmitted.</param>
            <param name="Raw">
            if set to <c>true</c> the string is transmitted 'as-is'.
            If set to <c>false</c> then protocol framing characters may be added prior to transmission.
            </param>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks><p style="color:red"><b>May throw a NotImplementedException.</b></p>
            <para>The CommandXXX methods are a historic mechanic that provides clients with direct and unimpeded access to change device hardware configuration. While highly enabling for clients, this mechanic is inherently risky
            because clients can fundamentally change hardware operation without the driver being aware that a change is taking / has taken place.</para>
            <para>The newer Action / SupportedActions mechanic provides discrete, named, functions that can deliver any functionality required.They do need driver authors to make provision for them within the 
            driver, but this approach is much lower risk than using the CommandXXX methods because it enables the driver to resolve conflicts between standard device interface commands and extended commands 
            provided as Actions.The driver is always aware of what is happening and can adapt more effectively to client needs.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.AscomDriver.CommandBool(System.String,System.Boolean)">
            <summary>
            Transmits an arbitrary string to the device and waits for a boolean response.
            Optionally, protocol framing characters may be added to the string before transmission.
            </summary>
            <param name="Command">The literal command string to be transmitted.</param>
            <param name="Raw">
            if set to <c>true</c> the string is transmitted 'as-is'.
            If set to <c>false</c> then protocol framing characters may be added prior to transmission.
            </param>
            <returns>
            Returns the interpreted boolean response received from the device.
            </returns>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks><p style="color:red"><b>May throw a NotImplementedException.</b></p>
            <para>The CommandXXX methods are a historic mechanic that provides clients with direct and unimpeded access to change device hardware configuration. While highly enabling for clients, this mechanic is inherently risky
            because clients can fundamentally change hardware operation without the driver being aware that a change is taking / has taken place.</para>
            <para>The newer Action / SupportedActions mechanic provides discrete, named, functions that can deliver any functionality required.They do need driver authors to make provision for them within the 
            driver, but this approach is much lower risk than using the CommandXXX methods because it enables the driver to resolve conflicts between standard device interface commands and extended commands 
            provided as Actions.The driver is always aware of what is happening and can adapt more effectively to client needs.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.AscomDriver.CommandString(System.String,System.Boolean)">
            <summary>
            Transmits an arbitrary string to the device and waits for a string response.
            Optionally, protocol framing characters may be added to the string before transmission.
            </summary>
            <param name="Command">The literal command string to be transmitted.</param>
            <param name="Raw">
            if set to <c>true</c> the string is transmitted 'as-is'.
            If set to <c>false</c> then protocol framing characters may be added prior to transmission.
            </param>
            <returns>
            Returns the string response received from the device.
            </returns>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks><p style="color:red"><b>May throw a NotImplementedException.</b></p>
            <para>The CommandXXX methods are a historic mechanic that provides clients with direct and unimpeded access to change device hardware configuration. While highly enabling for clients, this mechanic is inherently risky
            because clients can fundamentally change hardware operation without the driver being aware that a change is taking / has taken place.</para>
            <para>The newer Action / SupportedActions mechanic provides discrete, named, functions that can deliver any functionality required.They do need driver authors to make provision for them within the 
            driver, but this approach is much lower risk than using the CommandXXX methods because it enables the driver to resolve conflicts between standard device interface commands and extended commands 
            provided as Actions.The driver is always aware of what is happening and can adapt more effectively to client needs.</para>
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess.Camera">
            <summary>
            Implements a camera class to access any registered ASCOM Camera
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.Camera.#ctor(System.String)">
            <summary>
            Creates an instance of the camera class.
            </summary>
            <param name="cameraId">The ProgID for the camera</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Camera.Choose(System.String)">
            <summary>
            The Choose() method returns the DriverID of the selected driver.
            Choose() allows you to optionally pass the DriverID of a "current" driver,
            and the corresponding camera type is pre-selected in the Chooser///s list.
            In this case, the OK button starts out enabled (lit-up); the assumption is that the pre-selected driver has already been configured.
            </summary>
            <param name="cameraId">Optional DriverID of the previously selected camera that is to be the pre-selected camera in the list.</param>
            <returns>
            The DriverID of the user selected camera. Null if the dialogue is cancelled.
            </returns>
        </member>
        <member name="M:ASCOM.DriverAccess.Camera.AbortExposure">
            <summary>
            Aborts the current exposure, if any, and returns the camera to Idle state.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If CanAbortExposure is false.</exception>
            <exception cref="T:ASCOM.InvalidOperationException">Thrown if abort is not currently possible (e.g. during download).</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <b>NOTES:</b>
            <list type="bullet">
            <item><description>Must throw exception if camera is not idle and abort is unsuccessful (or not possible, e.g. during download).</description></item>
            <item><description>Must throw exception if hardware or communications error occurs.</description></item>
            <item><description>Must NOT throw an exception if the camera is already idle.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.BinX">
            <summary>
            Sets the binning factor for the X axis, also returns the current value.  
            </summary>
            <value>The X binning value</value>
            <exception cref="T:ASCOM.InvalidValueException">Must throw an exception for illegal binning values</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Should default to 1 when the camera connection is established.  Note:  driver does not check
            for compatible subframe values when this value is set; rather they are checked upon <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see>.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.BinY">
            <summary>
            Sets the binning factor for the Y axis, also returns the current value. 
            </summary>
            <value>The Y binning value.</value>
            <exception cref="T:ASCOM.InvalidValueException">Must throw an exception for illegal binning values</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Should default to 1 when the camera connection is established.  Note:  driver does not check
            for compatible subframe values when this value is set; rather they are checked upon <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see>.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CCDTemperature">
            <summary>
            Returns the current CCD temperature in degrees Celsius.
            </summary>
            <value>The CCD temperature.</value>
            <exception cref="T:ASCOM.InvalidOperationException">Must throw exception if data unavailable.</exception>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw exception if it is not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CameraState">
            <summary>
            Returns the current camera operational state
            </summary>
            <value>The state of the camera.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Returns one of the following status information:
            <list type="bullet">
            <item><description>0 = CameraIdle     : At idle state, available to start exposure</description></item>
            <item><description>1 = CameraWaiting  : Exposure started but waiting (for shutter, trigger, filter wheel, etc.)</description></item>
            <item><description>2 = CameraExposing : Exposure currently in progress</description></item>
            <item><description>3 = CameraReading  : CCD array is being read out (digitized)</description></item>
            <item><description>4 = CameraDownload : Downloading data to PC</description></item>
            <item><description>5 = CameraError    : Camera error condition serious enough to prevent further operations (connection fail, etc.).</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CameraXSize">
            <summary>
            Returns the width of the CCD camera chip in unbinned pixels.
            </summary>
            <value>The size of the camera X.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CameraYSize">
            <summary>
            Returns the height of the CCD camera chip in unbinned pixels.
            </summary>
            <value>The size of the camera Y.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CanAbortExposure">
            <summary>
            Returns True if the camera can abort exposures; False if not.
            </summary>
            <value>
            	<c>true</c> if this instance can abort exposure; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CanAsymmetricBin">
            <summary>
            Returns a flag showing whether this camera supports asymmetric binning
            </summary>
            <value>
            	<c>true</c> if this instance can asymmetric bin; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If True, the camera can have different binning on the X and Y axes, as
            determined by <see cref="P:ASCOM.DriverAccess.Camera.BinX" /> and <see cref="P:ASCOM.DriverAccess.Camera.BinY" />. If False, the binning must be equal on the X and Y axes.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CanGetCoolerPower">
            <summary>
            If True, the camera's cooler power setting can be read.
            </summary>
            <value>
            	<c>true</c> if this instance can get cooler power; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CanPulseGuide">
            <summary>
            Returns a flag indicating whether this camera supports pulse guiding
            </summary>
            <value>
            	<c>true</c> if this instance can pulse guide; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Returns True if the camera can send auto guider pulses to the telescope mount; False if not.  
            Note: this does not provide any indication of whether the auto guider cable is actually connected.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CanSetCCDTemperature">
            <summary>
            Returns a flag indicating whether this camera supports setting the CCD temperature
            </summary>
            <value>
            	<c>true</c> if this instance can set CCD temperature; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If True, the camera's cooler setpoint can be adjusted. If False, the camera
            either uses open-loop cooling or does not have the ability to adjust temperature
            from software, and setting the <see cref="P:ASCOM.DriverAccess.Camera.SetCCDTemperature" /> property has no effect.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CanStopExposure">
            <summary>
            Returns a flag indicating whether this camera can stop an exposure that is in progress
            </summary>
            <value>
            	<c>true</c> if the camera can stop the exposure; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Some cameras support <see cref="M:ASCOM.DriverAccess.Camera.StopExposure" />, which allows the exposure to be terminated
            before the exposure timer completes, but will still read out the image.  Returns
            True if  <see cref="M:ASCOM.DriverAccess.Camera.StopExposure" /> is available, False if not.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CoolerOn">
            <summary>
            Turns on and off the camera cooler, and returns the current on/off state.
            </summary>
            <value><c>true</c> if the cooler is on; otherwise, <c>false</c>.</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">not supported</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <b>Warning:</b> turning the cooler off when the cooler is operating at high delta-T
            (typically &gt;20C below ambient) may result in thermal shock.  Repeated thermal
            shock may lead to damage to the sensor or cooler stack.  Please consult the
            documentation supplied with the camera for further information.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CoolerPower">
            <summary>
            Returns the present cooler power level, in percent.
            </summary>
            <value>The cooler power.</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">not supported</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Returns zero if <see cref="P:ASCOM.DriverAccess.Camera.CoolerOn" /> is False.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.ElectronsPerADU">
            <summary>
            Returns the gain of the camera in photoelectrons per A/D unit.
            </summary>
            <value>The electrons per ADU.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Some cameras have multiple gain modes; these should be selected via the  <see cref="M:ASCOM.DriverAccess.AscomDriver.SetupDialog" /> and thus are
            static during a session.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.FullWellCapacity">
            <summary>
            Reports the full well capacity of the camera in electrons, at the current camera settings (binning, SetupDialog settings, etc.)
            </summary>
            <value>The full well capacity.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.HasShutter">
            <summary>
            Returns a flag indicating whether this camera has a mechanical shutter
            </summary>
            <value>
            	<c>true</c> if this instance has shutter; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If True, the camera has a mechanical shutter. If False, the camera does not have
            a shutter.  If there is no shutter, the  <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see> command will ignore the
            Light parameter.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.HeatSinkTemperature">
            <summary>
            Returns the current heat sink temperature (called "ambient temperature" by some manufacturers) in degrees Celsius. 
            </summary>
            <value>The heat sink temperature.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Only valid if  <see cref="P:ASCOM.DriverAccess.Camera.CanSetCCDTemperature" /> is True.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.ImageArray">
            <summary>
            Returns a safearray of int of size <see cref="P:ASCOM.DriverAccess.Camera.NumX" /> * <see cref="P:ASCOM.DriverAccess.Camera.NumY" /> containing the pixel values from the last exposure. 
            </summary>
            <value>The image array.</value>
            <exception cref="T:ASCOM.InvalidOperationException">If no image data is available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            The application must inspect the Safearray parameters to determine the dimensions. 
            <para>Note: if <see cref="P:ASCOM.DriverAccess.Camera.NumX" /> or <see cref="P:ASCOM.DriverAccess.Camera.NumY" /> is changed after a call to <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see> it will 
            have no effect on the size of this array. This is the preferred method for programs (not scripts) to download 
            images since it requires much less memory.</para>
            <para>For colour or multispectral cameras, will produce an array of  <see cref="P:ASCOM.DriverAccess.Camera.NumX" /> * <see cref="P:ASCOM.DriverAccess.Camera.NumY" /> *
            NumPlanes.  If the application cannot handle multispectral images, it should use just the first plane.</para>
            <para><b>Clarification December 2021.</b></para>
            <para>
            The two dimensional array that supports monochrome and Bayer matrix colour sensors is specified with width as its first dimension and height as its second, rightmost, dimension.
            From an <b>infrastructure</b> perspective, the .NET CLR and C like languages store arrays in memory using row major order, which means that the rightmost array index changes most rapidly. For an array Array[X, Y]  it is the Y index that changes most rapidly, 
            leading to a memory layout that looks like this:
            </para>
            <para>
            Array[0, 0], Array[0, 1] ... Array[0, Y - 1], Array[1, 0], Array[1, 1] ... Array[1, Y - 1] ... Array[X - 1, 0], Array[X - 1, 1] ... Array[X - 1, Y - 1]
            </para>
            <para>
            The <b>ImageArray property</b> is specified to return Array[NumX, NumY] where X represents width (horizontal lines) and Y represents height (vertical columns). 
            For the ImageArray array, the rightmost dimension is defined as the image height, hence, when stored in memory, the height index will change most rapidly.This means that, from an <b>application</b> perspective, 
            values are held in memory in column major order despite being stored in row major order from an <b>infrastructure</b> perspective.
            </para>
            <para>We consider the <b>application</b> view to have primacy and thus consider the returned array to be column major in structure, regardless of the form in which it is stored in memory.</para>
            <para>Furthermore, for the avoidence of doubt, the pixel at coordinate 0,0 is the top left image pixel.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.ImageArrayVariant">
            <summary>
            Returns a safearray of Variant of size <see cref="P:ASCOM.DriverAccess.Camera.NumX" /> * <see cref="P:ASCOM.DriverAccess.Camera.NumY" /> containing the pixel values from the last exposure. 
            </summary>
            <value>The image array variant.</value>
            <exception cref="T:ASCOM.InvalidOperationException">If no image data is available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            The application must inspect the Safearray parameters to
            determine the dimensions. Note: if <see cref="P:ASCOM.DriverAccess.Camera.NumX" /> or <see cref="P:ASCOM.DriverAccess.Camera.NumY" /> is changed after a call to
            <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see> it will have no effect on the size of this array. This property
            should only be used from scripts due to the extremely high memory utilization on
            large image arrays (26 bytes per pixel). Pixels values should be in Short, int,
            or Double format.
            <para>For colour or multispectral cameras, will produce an array of <see cref="P:ASCOM.DriverAccess.Camera.NumX" /> * <see cref="P:ASCOM.DriverAccess.Camera.NumY" /> *
            NumPlanes.  If the application cannot handle multispectral images, it should use
            just the first plane.</para>
            <para><b>Clarification December 2021.</b></para>
            <para>
            The two dimensional array that supports monochrome and Bayer matrix colour sensors is specified with width as its first dimension and height as its second, rightmost, dimension.
            From an <b>infrastructure</b> perspective, the .NET CLR and C like languages store arrays in memory using row major order, which means that the rightmost array index changes most rapidly. For an array Array[X, Y]  it is the Y index that changes most rapidly, 
            leading to a memory layout that looks like this:
            </para>
            <para>
            Array[0, 0], Array[0, 1] ... Array[0, Y - 1], Array[1, 0], Array[1, 1] ... Array[1, Y - 1] ... Array[X - 1, 0], Array[X - 1, 1] ... Array[X - 1, Y - 1]
            </para>
            <para>
            The <b>ImageArrayVariant property</b> is specified to return Array[NumX, NumY] where X represents width (horizontal lines) and Y represents height (vertical columns). 
            For the ImageArrayVariant array, the rightmost dimension is defined as the image height, hence, when stored in memory, the height index will change most rapidly.This means that, from an <b>application</b> perspective, 
            values are held in memory in column major order despite being stored in row major order from an <b>infrastructure</b> perspective.
            </para>
            <para>We consider the <b>application</b> view to have primacy and thus consider the returned array to be column major in structure, regardless of the form in which it is stored in memory.</para>
            <para>Furthermore, for the avoidence of doubt, the pixel at coordinate 0,0 is the top left image pixel.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.ImageReady">
            <summary>
            Returns a flag indicating whether the image is ready to be downloaded from the camera
            </summary>
            <value><c>true</c> if [image ready]; otherwise, <c>false</c>.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If True, there is an image from the camera available. If False, no image
            is available and attempts to use the <see cref="P:ASCOM.DriverAccess.Camera.ImageArray" /> method will produce an exception
            </remarks>.
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.IsPulseGuiding">
            <summary>
            Returns a flag indicating whether the camera is currently in a <see cref="M:ASCOM.DriverAccess.Camera.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> operation.
            </summary>
            <value>
            	<c>true</c> if this instance is pulse guiding; otherwise, <c>false</c>.
            </value> 
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If True, pulse guiding is in progress. Required if the <see cref="M:ASCOM.DriverAccess.Camera.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> method
            (which is non-blocking) is implemented. See the <see cref="M:ASCOM.DriverAccess.Camera.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> method.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.LastExposureDuration">
            <summary>
            Reports the actual exposure duration in seconds (i.e. shutter open time).  
            </summary>
            <value>The last duration of the exposure.</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if not supported</exception>
            <exception cref="T:ASCOM.InvalidOperationException">If called before any exposure has been taken</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            This may differ from the exposure time requested due to shutter latency, camera timing precision, etc.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.LastExposureStartTime">
            <summary>
            Reports the actual exposure start in the FITS-standard CCYY-MM-DDThh:mm:ss[.sss...] format.
            The time must be UTC.
            </summary>
            <value>The last exposure start time in UTC.</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if not supported</exception>
            <exception cref="T:ASCOM.InvalidOperationException">If called before any exposure has been taken</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.MaxADU">
            <summary>
            Reports the maximum ADU value the camera can produce.
            </summary>
            <value>The maximum ADU.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.MaxBinX">
            <summary>
            Returns the maximum allowed binning for the X camera axis
            </summary>
            <value>The max bin X.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If <see cref="P:ASCOM.DriverAccess.Camera.CanAsymmetricBin" /> = False, returns the maximum allowed binning factor. If
            <see cref="P:ASCOM.DriverAccess.Camera.CanAsymmetricBin" /> = True, returns the maximum allowed binning factor for the X axis.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.MaxBinY">
            <summary>
            Returns the maximum allowed binning for the Y camera axis
            </summary>
            <value>The max bin Y.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If <see cref="P:ASCOM.DriverAccess.Camera.CanAsymmetricBin" /> = False, equals <see cref="P:ASCOM.DriverAccess.Camera.MaxBinX" />. If <see cref="P:ASCOM.DriverAccess.Camera.CanAsymmetricBin" /> = True,
            returns the maximum allowed binning factor for the Y axis.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.NumX">
            <summary>
            Sets the subframe width. Also returns the current value.  
            </summary>
            <value>The num X.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If binning is active, value is in binned pixels.  No error check is performed when the value is set. 
            Should default to <see cref="P:ASCOM.DriverAccess.Camera.CameraXSize" />.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.NumY">
            <summary>
            Sets the subframe height. Also returns the current value.
            </summary>
            <value>The num Y.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If binning is active,
            value is in binned pixels.  No error check is performed when the value is set.
            Should default to <see cref="P:ASCOM.DriverAccess.Camera.CameraYSize" />.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.PixelSizeX">
            <summary>
            Returns the width of the CCD chip pixels in microns.
            </summary>
            <value>The pixel size X.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.PixelSizeY">
            <summary>
            Returns the height of the CCD chip pixels in microns.
            </summary>
            <value>The pixel size Y.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="M:ASCOM.DriverAccess.Camera.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">
            <summary>
            Activates the Camera's mount control system to instruct the mount to move in a particular direction for a given period of time
            </summary>
            <param name="Direction">The direction of movement.</param>
            <param name="Duration">The duration of movement in milli-seconds.</param>
            <exception cref="T:ASCOM.MethodNotImplementedException">PulseGuide command is unsupported</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            This method returns only after the move has completed.
            <para>
            The (symbolic) values for GuideDirections are:
            <list type="bullet">
            <item><description>guideNorth = 0 : North (+ declination/elevation)</description></item>
            <item><description>guideSouth = 1 : South (- declination/elevation)</description></item>
            <item><description>guideEast  = 2 : East (+ right ascension/azimuth)</description></item>
            <item><description>guideWest  = 3 : West (+ right ascension/azimuth)</description></item>
            </list>
            </para>
            <para>Note: directions are nominal and may depend on exact mount wiring.  
            <see cref="F:ASCOM.DeviceInterface.GuideDirections.guideNorth" /> must be opposite <see cref="F:ASCOM.DeviceInterface.GuideDirections.guideSouth" />, and 
            <see cref="F:ASCOM.DeviceInterface.GuideDirections.guideEast" /> must be opposite <see cref="F:ASCOM.DeviceInterface.GuideDirections.guideWest" />.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.SetCCDTemperature">
            <summary>
            Sets the camera cooler setpoint in degrees Celsius, and returns the current setpoint.
            </summary>
            <value>The set CCD temperature.</value>
            <exception cref="T:ASCOM.InvalidValueException">Must throw an InvalidValueException if an attempt is made to set a value is outside the camera's valid temperature setpoint range.</exception>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw exception if <see cref="P:ASCOM.DriverAccess.Camera.CanSetCCDTemperature" /> is False.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>The driver should throw an <see cref="T:ASCOM.InvalidValueException" /> if an attempt is made to set <see cref="P:ASCOM.DriverAccess.Camera.SetCCDTemperature" /> 
            outside the valid range for the camera. As an assistance to driver authors, to protect equipment and prevent harm to individuals, 
            Conform will report an issue if it is possible to set <see cref="P:ASCOM.DriverAccess.Camera.SetCCDTemperature" /> below -280C or above +100C.</para>
            <b>Note:</b>  Camera hardware and/or driver should perform cooler ramping, to prevent
            thermal shock and potential damage to the CCD array or cooler stack.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">
            <summary>
            Starts an exposure. Use <see cref="P:ASCOM.DriverAccess.Camera.ImageReady" /> to check when the exposure is complete.
            </summary>
            <param name="Duration">Duration of exposure in seconds, can be zero if <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">Light</see> is false</param>
            <param name="Light">True for light frame, False for dark frame (ignored if no shutter)</param>
            <exception cref="T:ASCOM.InvalidValueException"><see cref="P:ASCOM.DriverAccess.Camera.NumX" />, <see cref="P:ASCOM.DriverAccess.Camera.NumY" />, <see cref="P:ASCOM.DriverAccess.Camera.BinX" />, <see cref="P:ASCOM.DriverAccess.Camera.BinY" />, <see cref="P:ASCOM.DriverAccess.Camera.StartX" />, <see cref="P:ASCOM.DriverAccess.Camera.StartY" />, or <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">Duration</see> parameters are invalid.</exception>
            <exception cref="T:ASCOM.InvalidOperationException"><see cref="P:ASCOM.DriverAccess.Camera.CanAsymmetricBin" /> is False and <see cref="P:ASCOM.DriverAccess.Camera.BinX" /> != <see cref="P:ASCOM.DriverAccess.Camera.BinY" /></exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>A dark frame or bias exposure may be shorter than the V2 <see cref="P:ASCOM.DriverAccess.Camera.ExposureMin" /> value and for a bias frame can be zero.
            Check the value of <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">Light</see> and allow exposures down to 0 seconds 
            if <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">Light</see> is False.  If the hardware will not
            support an exposure duration of zero then, for dark and bias frames, set it to the minimum that is possible.</para>
            <para>Some applications will set an exposure time of zero for bias frames so it's important that the driver allows this.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.StartX">
            <summary>
            Sets the subframe start position for the X axis (0 based) and returns the current value.
            </summary>
            <value>The start X.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>If binning is active, value is in binned pixels.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.StartY">
            <summary>
            Sets the subframe start position for the Y axis (0 based). Also returns the current value.  
            </summary>
            <value>The start Y.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If binning is active, value is in binned pixels.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Camera.StopExposure">
            <summary>
            Stops the current exposure, if any.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if CanStopExposure is False</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If an exposure is in progress, the readout process is initiated.  Ignored if readout is already in process.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.BayerOffsetX">
            <summary>
            Bayer X offset index, Interface Version 2 and later
            </summary>
            <returns>The Bayer colour matrix X offset, as defined in <see cref="P:ASCOM.DriverAccess.Camera.SensorType" />.</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Monochrome cameras must throw this exception, colour cameras must not.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Returns the X offset of the Bayer matrix, as defined in <see cref="P:ASCOM.DriverAccess.Camera.SensorType" />. Value returned must be in the range 0 to M-1, 
            where M is the width of the Bayer matrix. The offset is relative to the 0,0 pixel in the sensor array, and does not change to 
            reflect subframe settings.
            <para>This is only available for the Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.BayerOffsetY">
            <summary>
            Returns the Y offset of the Bayer matrix, as defined in <see cref="P:ASCOM.DriverAccess.Camera.SensorType" />, Interface Version 2 or later
            </summary>
            <returns>The Bayer colour matrix Y offset.</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Monochrome cameras must throw this exception, colour cameras must not.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>The offset is relative to the 0,0 pixel in the sensor array, and does not change to reflect subframe settings. 
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is established with 
            the camera hardware, to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This is only available for the Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.CanFastReadout">
            <summary>
            Camera has a fast readout mode, Interface Version 2 or later
            </summary>
            <returns><c>true</c> when the camera supports a fast readout mode</returns>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            It is recommended that this function be called only after a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is established with the camera hardware, to 
            ensure that the driver is aware of the capabilities of the specific camera model.
            <para>This is only available for the Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.ExposureMax">
            <summary>
            Returns the maximum exposure time supported by <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see>, Interface Version 2 or later
            </summary>
            <returns>The maximum exposure time, in seconds, that the camera supports</returns>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            It is recommended that this function be called only after 
            a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is established with the camera hardware, to ensure that the driver is aware of the capabilities of the 
            specific camera model.
            <para>This is only available for the Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.ExposureMin">
            <summary>
            Minimum exposure time, Interface Version 2 or later
            </summary>
            <returns>The minimum exposure time, in seconds, that the camera supports through <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see></returns>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            This must be a non-zero number representing the shortest possible exposure time supported by the camera model.
            <para>Please note that for bias frame acquisition an even shorter exposure may be possible; please see <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see> 
            for more information.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is established with the camera hardware, to ensure 
            that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This is only available for the Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.ExposureResolution">
            <summary>
            Exposure resolution, Interface Version 2 or later
            </summary>
            <returns>The smallest increment in exposure time supported by <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see>.</returns>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            This can be used, for example, to specify the resolution of a user interface "spin control" used to dial in the exposure time.
            <para>Please note that the Duration provided to <see cref="M:ASCOM.DriverAccess.Camera.StartExposure(System.Double,System.Boolean)">StartExposure</see> does not have to be an exact multiple of this number; 
            the driver should choose the closest available value. Also in some cases the resolution may not be constant over the full range 
            of exposure times; in this case the smallest increment would be appropriate. </para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is established with the camera hardware, to ensure 
            that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This is only available for the Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.FastReadout">
            <summary>
            Fast readout mode, Interface Version 2 or later
            </summary>
            <value>True sets fast readout mode, false sets normal mode</value>
            <returns>True when the current readout mode is fast and false when the readout mode is normal.</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if <see cref="P:ASCOM.DriverAccess.Camera.CanFastReadout" /> returns False.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Must thrown an exception if no <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is established to the camera. Must throw 
            an exception if <see cref="P:ASCOM.DriverAccess.Camera.CanFastReadout" /> returns False.
            <para>Many cameras have a "fast mode" intended for use in focusing. When set to True, the camera will operate in Fast mode; when 
            set False, the camera will operate normally. This property should default to False.</para>
            <para>Please note that this function may in some cases interact with <see cref="P:ASCOM.DriverAccess.Camera.ReadoutModes" />; for example, there may be modes where 
            the Fast/Normal switch is meaningless. In this case, it may be preferable to use the <see cref="P:ASCOM.DriverAccess.Camera.ReadoutModes" /> function to control 
            fast/normal switching.</para>
            <para>If this feature is not available, then <see cref="P:ASCOM.DriverAccess.Camera.CanFastReadout" /> must return False.</para>
            <para>This is only available for the Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.Gain">
            <summary>
            The camera's gain (GAIN VALUE MODE) OR the index of the selected camera gain description in the <see cref="P:ASCOM.DriverAccess.Camera.Gains" /> array (GAINS INDEX MODE)
            </summary>
            <returns><para><b> GAIN VALUE MODE:</b> The current gain value.</para>
            <p style="color:red"><b>OR</b></p>
            <b>GAINS INDEX MODE:</b> Index into the Gains array for the current camera gain
            </returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When neither <b>GAINS INDEX</b> mode nor <b>GAIN VALUE</b> mode are supported.</exception>
            <exception cref="T:ASCOM.InvalidValueException">When the supplied value is not valid.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>This is an optional property and can throw a PropertyNotImplementedException if Gain is not supported by the camera.</b></p>
            The <see cref="P:ASCOM.DriverAccess.Camera.Gain" /> property is used to adjust the gain setting of the camera and has <b>two modes of operation</b>:
            <ul>
            <li><b>GAIN VALUE MODE</b> - The <see cref="P:ASCOM.DriverAccess.Camera.Gain" /> property is a direct numeric representation of the camera's gain.
            <ul>
            <li>In this mode the <see cref="P:ASCOM.DriverAccess.Camera.GainMin" /> and <see cref="P:ASCOM.DriverAccess.Camera.GainMax" /> properties must return integers specifying the valid range for <see cref="P:ASCOM.DriverAccess.Camera.Gain" /></li>
            <li>The <see cref="P:ASCOM.DriverAccess.Camera.Gains"/> property must return a <see cref="T:ASCOM.PropertyNotImplementedException"/>.</li>
            </ul>
            </li>
            <li><b>GAINS INDEX MODE</b> - The <see cref="P:ASCOM.DriverAccess.Camera.Gain" /> property is the selected gain's index within the <see cref="P:ASCOM.DriverAccess.Camera.Gains"/> array of textual gain descriptions.
            <ul>
            <li>In this  mode the <see cref="P:ASCOM.DriverAccess.Camera.Gains" /> method returns a 0-based array of strings, which describe available gain settings e.g. "ISO 200", "ISO 1600" </li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.GainMin" /> and <see cref="P:ASCOM.DriverAccess.Camera.GainMax" /> must throw <see cref="T:ASCOM.PropertyNotImplementedException"/>s.</li>
            <li>Please note that the <see cref="P:ASCOM.DriverAccess.Camera.Gains"/> array is zero based.</li>
            </ul>
            </li>
            </ul>
            <para>A driver can support none, one or both gain modes depending on the camera's capabilities. However, only one mode can be active at any one moment because both modes share
            the <see cref="P:ASCOM.DriverAccess.Camera.Gain"/> property to return the gain value. Client applications can determine which mode is operational by reading the <see cref="P:ASCOM.DriverAccess.Camera.GainMin"/>, <see cref="P:ASCOM.DriverAccess.Camera.GainMax"/> and 
            <see cref="P:ASCOM.DriverAccess.Camera.Gain"/> properties. If a property can be read then its associated mode is active, if it throws a <see cref="T:ASCOM.PropertyNotImplementedException"/> then the mode is not active.</para>
            <para>If a driver supports both modes the astronomer must be able to select the required mode through the driver Setup dialogue.</para>
            <para>During driver initialisation the driver must set <see cref="P:ASCOM.DriverAccess.Camera.Gain" /> to a valid value.</para>
            <para>Please note that <see cref="P:ASCOM.DriverAccess.Camera.ReadoutMode" /> may in some cases affect the gain of the camera; if so, the driver must be ensure that the two properties do not conflict if both are used.</para>
            <para>This is only available in Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.GainMax">
            <summary>
            Maximum <see cref="P:ASCOM.DriverAccess.Camera.Gain" /> value of that this camera supports
            </summary>
            <returns>The maximum gain value that this camera supports</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When the <see cref="P:ASCOM.DriverAccess.Camera.Gain"/> property is not implemented or is operating in <b>GAINS INDEX</b> mode.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>This is an optional property and can throw a PropertyNotImplementedException.</b></p>
            When <see cref="P:ASCOM.DriverAccess.Camera.Gain"/> is operating in <b><see cref="P:ASCOM.DriverAccess.Camera.Gain">GAIN VALUE</see></b> mode:
            <ul>
            <li><see cref="P:ASCOM.DriverAccess.Camera.GainMax" /> must return the camera's highest valid <see cref="P:ASCOM.DriverAccess.Camera.Gain" /> setting.</li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.GainMax" /> must be equal to or greater than <see cref="P:ASCOM.DriverAccess.Camera.GainMin" />.</li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.Gains"/> must throw a <see cref="T:ASCOM.PropertyNotImplementedException"/></li>
            </ul>
            <para>Please note that <see cref="P:ASCOM.DriverAccess.Camera.GainMin"/> and <see cref="P:ASCOM.DriverAccess.Camera.GainMax"/> act together and that either both must be implemented or both must throw <see cref="T:ASCOM.PropertyNotImplementedException"/>s.</para>
            <para>It is recommended that this function be called only after a connection is established with the camera hardware to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This property is only available in Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.GainMin">
            <summary>
            Minimum <see cref="P:ASCOM.DriverAccess.Camera.Gain" /> value of that this camera supports
            </summary>
            <returns>The minimum gain value that this camera supports</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When the <see cref="P:ASCOM.DriverAccess.Camera.Gain"/> property is not implemented or is operating in <b>GAINS INDEX</b> mode.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>This is an optional property and can throw a PropertyNotImplementedException.</b></p>
            When <see cref="P:ASCOM.DriverAccess.Camera.Gain"/> is operating in <b><see cref="P:ASCOM.DriverAccess.Camera.Gain">GAIN VALUE</see></b> mode:
            <ul>
            <li><see cref="P:ASCOM.DriverAccess.Camera.GainMin" /> must return the camera's lowest valid <see cref="P:ASCOM.DriverAccess.Camera.Gain" /> setting.</li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.GainMin" /> must be less than or equal to <see cref="P:ASCOM.DriverAccess.Camera.GainMax" />.</li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.Gains"/> must throw a <see cref="T:ASCOM.PropertyNotImplementedException"/></li>
            </ul>
            <para>Please note that <see cref="P:ASCOM.DriverAccess.Camera.GainMin"/> and <see cref="P:ASCOM.DriverAccess.Camera.GainMax"/> act together and that either both must be implemented or both must throw <see cref="T:ASCOM.PropertyNotImplementedException"/>s.</para>
            <para>It is recommended that this function be called only after a connection is established with the camera hardware to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This property is only available in Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.Gains">
            <summary>
            List of Gain names supported by the camera
            </summary>
            <returns>The list of supported gain names as an ArrayList of strings</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When the <see cref="P:ASCOM.DriverAccess.Camera.Gain"/> property is not implemented or is operating in <b>GAIN VALUE</b> mode.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>This is an optional property and can throw a PropertyNotImplementedException.</b></p>
            When <see cref="P:ASCOM.DriverAccess.Camera.Gain"/> is operating in <b><see cref="P:ASCOM.DriverAccess.Camera.Gain">GAINS INDEX</see></b> mode:
            <ul>
            <li>The <see cref="P:ASCOM.DriverAccess.Camera.Gains" /> property must return a zero-based ArrayList of available gain setting names.</li>
            <li>The <see cref="P:ASCOM.DriverAccess.Camera.GainMin"/> and <see cref="P:ASCOM.DriverAccess.Camera.GainMax"/> properties must throw <see cref="T:ASCOM.PropertyNotImplementedException"/>s.</li>
            </ul>
            <para>The returned gain names could, for example, be a list of ISO settings for a DSLR camera or a list of gain names for a CMOS camera.
            Typically the application software will display the returned gain names in a drop list, from which the astronomer can select the required value.
            The application can then configure the required gain by setting the camera's <see cref="P:ASCOM.DriverAccess.Camera.Gain"/> property to the array index of the selected description.</para>
            <para>It is recommended that this function be called only after a connection is established with the camera hardware to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This is only available in Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.PercentCompleted">
            <summary>
            Percent completed, Interface Version 2 or later
            </summary>
            <returns>A value between 0 and 100% indicating the completeness of this operation</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if PercentCompleted is not supported</exception>
            <exception cref="T:ASCOM.InvalidOperationException">Thrown when it is inappropriate to call <see cref="P:ASCOM.DriverAccess.Camera.PercentCompleted" /></exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            If valid, returns an integer between 0 and 100, where 0 indicates 0% progress (function just started) and 
            100 indicates 100% progress (i.e. completion).
            <para>At the discretion of the driver author, <see cref="P:ASCOM.DriverAccess.Camera.PercentCompleted" /> may optionally be valid 
            when <see cref="P:ASCOM.DriverAccess.Camera.CameraState" /> is in any or all of the following 
            states: <see cref="F:ASCOM.DeviceInterface.CameraStates.cameraExposing" />, 
            <see cref="F:ASCOM.DeviceInterface.CameraStates.cameraWaiting" />, <see cref="F:ASCOM.DeviceInterface.CameraStates.cameraReading" /> 
            or <see cref="F:ASCOM.DeviceInterface.CameraStates.cameraDownload" />. In all other states an exception shall be thrown.</para>
            <para>Typically the application user interface will show a progress bar based on the <see cref="P:ASCOM.DriverAccess.Camera.PercentCompleted" /> value.</para>
            <para>Please note that client applications are not required to use this value, and in some cases may display status 
            information based on other information, such as time elapsed.</para>
            <para>This is only available for the Camera Interface Version 2</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.ReadoutMode">
            <summary>
            Readout mode, Interface Version 2 or later
            </summary>
            <value></value>
            <returns>Short integer index into the <see cref="P:ASCOM.DriverAccess.Camera.ReadoutModes">ReadoutModes</see> array of string readout mode names indicating 
            the camera's current readout mode.</returns>
            <exception cref="T:ASCOM.InvalidValueException">Must throw an exception if set to an illegal or unavailable mode.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <see cref="P:ASCOM.DriverAccess.Camera.ReadoutMode" /> is an index into the array <see cref="P:ASCOM.DriverAccess.Camera.ReadoutModes" />, and selects the desired readout mode for the camera.  
            Defaults to 0 if not set.  Throws an exception if the selected mode is not available.
            <para>It is strongly recommended, but not required, that driver authors make the 0-index mode suitable for standard imaging operations, 
            since it is the default.</para>
            <para>Please see <see cref="P:ASCOM.DriverAccess.Camera.ReadoutModes" /> for additional information.</para>
            <para>This is only available for the Camera Interface Version 2</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.ReadoutModes">
            <summary>
            List of available readout modes, Interface Version 2 or later
            </summary>
            <returns>An ArrayList of readout mode names</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if CanFastReadout is <see langword="false"/>.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            This property provides an array of strings, each of which describes an available readout mode of the camera.  
            At least two strings must be present in the list. The user interface of a control application will typically present to the 
            user a drop-list of modes.  The choice of available modes made available is entirely at the discretion of the driver author. 
            Please note that if the camera has many different modes of operation, then the most commonly adjusted settings should be in 
            <see cref="P:ASCOM.DriverAccess.Camera.ReadoutModes" />; additional settings may be provided using <see cref="M:ASCOM.DriverAccess.AscomDriver.SetupDialog" />.
            <para>To select a mode, the application will set <see cref="P:ASCOM.DriverAccess.Camera.ReadoutMode" /> to the index of the desired mode.  The index is zero-based.</para>
            <para>This property should only be read while a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> to the camera is actually established.  Drivers often support 
            multiple cameras with different capabilities, which are not known until the <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is made.  If the available readout modes 
            are not known because no <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> has been established, this property shall throw an exception.</para>
            <para>Please note that the default <see cref="P:ASCOM.DriverAccess.Camera.ReadoutMode" /> setting is 0. It is strongly recommended, but not required, that 
            driver authors use the 0-index mode for standard imaging operations, since it is the default.</para>
            <para>This feature may be used in parallel with <see cref="P:ASCOM.DriverAccess.Camera.FastReadout" />; however, care should be taken to ensure that the two 
            features work together consistently. If there are modes that are inconsistent having a separate fast/normal switch, then it 
            may be better to simply list Fast as one of the <see cref="P:ASCOM.DriverAccess.Camera.ReadoutModes" />.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is established with 
            the camera hardware, to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This is only available for the Camera Interface Version 2</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.SensorName">
            <summary>
            Sensor name, Interface Version 2 and later
            </summary>
            <returns>The name of sensor used within the camera</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if not supported.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>Must return an empty string if the sensor name is not known.</para>
            <para>Returns the name (data sheet part number) of the sensor, e.g. ICX285AL.  The format is to be exactly as shown on 
            manufacturer data sheet, subject to the following rules. All letters shall be upper case.  Spaces shall not be included.</para>
            <para>Any extra suffixes that define region codes, package types, temperature range, coatings, grading, colour/monochrome, 
            etc. shall not be included. For colour sensors, if a suffix differentiates different Bayer matrix encodings, it shall be 
            included.</para>
            <para>Examples:</para>
            <list type="bullet">
            <item><description>ICX285AL-F shall be reported as ICX285</description></item>
            <item><description>KAF-8300-AXC-CD-AA shall be reported as KAF-8300</description></item>
            </list>
            <para><b>Note:</b></para>
            <para>The most common usage of this property is to select approximate colour balance parameters to be applied to 
            the Bayer matrix of one-shot colour sensors.  Application authors should assume that an appropriate IR cut-off filter is 
            in place for colour sensors.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is established with 
            the camera hardware, to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This is only available for the Camera Interface Version 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.SensorType">
             <summary>
             Type of colour information returned by the camera sensor, Interface Version 2 or later
             </summary>
             <value></value>
             <returns>The <see cref="T:ASCOM.DeviceInterface.SensorType" /> enum value of the camera sensor</returns>
             <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if CanFastReadout is <see langword="false"/>.</exception>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
             <remarks>
             <para>This is only available for the Camera Interface Version 2</para>
             <para><see cref="P:ASCOM.DriverAccess.Camera.SensorType" /> returns a value indicating whether the sensor is monochrome, or what Bayer matrix it encodes.  
             The following values are defined:</para>
             <para>
             <table style="width:76.24%;" cellspacing="0" width="76.24%">
             <col style="width: 11.701%;"></col>
             <col style="width: 20.708%;"></col>
             <col style="width: 67.591%;"></col>
             <tr>
             <td colspan="1" rowspan="1" style="width: 11.701%; padding-right: 10px; padding-left: 10px; 
             border-left-color: #000000; border-left-style: Solid; 
             border-top-color: #000000; border-top-style: Solid; 
             border-right-color: #000000; border-right-style: Solid;
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
             background-color: #00ffff;" width="11.701%">
             <b>Value</b></td>
             <td colspan="1" rowspan="1" style="width: 20.708%; padding-right: 10px; padding-left: 10px; 
             border-top-color: #000000; border-top-style: Solid; 
             border-right-style: Solid; border-right-color: #000000; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
             background-color: #00ffff;" width="20.708%">
             <b>Enumeration</b></td>
             <td colspan="1" rowspan="1" style="width: 67.591%; padding-right: 10px; padding-left: 10px; 
             border-top-color: #000000; border-top-style: Solid; 
             border-right-style: Solid; border-right-color: #000000; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; 
             background-color: #00ffff;" width="67.591%">
             <b>Meaning</b></td>
             </tr>
             <tr>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-left-color: #000000; border-left-style: Solid; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             0</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             Monochrome</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             Camera produces monochrome array with no Bayer encoding</td>
             </tr>
             <tr>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-left-color: #000000; border-left-style: Solid; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             1</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             Colour</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             Camera produces color image directly, requiring not Bayer decoding</td>
             </tr>
             <tr>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-left-color: #000000; border-left-style: Solid; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             2</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             RGGB</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             Camera produces RGGB encoded Bayer array images</td>
             </tr>
             <tr>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-left-color: #000000; border-left-style: Solid; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             3</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             CMYG</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             Camera produces CMYG encoded Bayer array images</td>
             </tr>
             <tr>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-left-color: #000000; border-left-style: Solid; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             4</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             CMYG2</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             Camera produces CMYG2 encoded Bayer array images</td>
             </tr>
             <tr>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-left-color: #000000; border-left-style: Solid; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             5</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             LRGB</td>
             <td style="padding-right: 10px; padding-left: 10px; 
             border-right-color: #000000; border-right-style: Solid; 
             border-bottom-color: #000000; border-bottom-style: Solid; 
             border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
             Camera produces Kodak TRUESENSE Bayer LRGB array images</td>
             </tr>
             </table>
             </para>
             <para>Please note that additional values may be defined in future updates of the standard, as new Bayer matrices may be created 
             by sensor manufacturers in the future.  If this occurs, then a new enumeration value shall be defined. The pre-existing enumeration 
             values shall not change.
             <para><see cref="P:ASCOM.DriverAccess.Camera.SensorType" /> can possibly change between exposures, for example if <see cref="P:ASCOM.DriverAccess.Camera.ReadoutMode">Camera.ReadoutMode</see> is changed, and should always be checked after each exposure.</para>
             <para>In the following definitions, R = red, G = green, B = blue, C = cyan, M = magenta, Y = yellow.  The Bayer matrix is 
             defined with X increasing from left to right, and Y increasing from top to bottom. The pattern repeats every N x M pixels for the 
             entire pixel array, where N is the height of the Bayer matrix, and M is the width.</para>
             <para>RGGB indicates the following matrix:</para>
             </para>
             <para>
             <table style="width:41.254%;" cellspacing="0" width="41.254%">
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #ffffff" width="10%">
             </td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 1</b></td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff" width="10%">
             <b>Y = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             R</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             G</td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             background-color: #00ffff;" width="10%">
             <b>Y = 1</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             G</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             B</td>
             </tr>
             </table>
             </para>
             
             <para>CMYG indicates the following matrix:</para>
             <para>
             <table style="width:41.254%;" cellspacing="0" width="41.254%">
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #ffffff" width="10%">
             </td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 1</b></td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff" width="10%">
             <b>Y = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             Y</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             C</td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             background-color: #00ffff;" width="10%">
             <b>Y = 1</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             G</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             M</td>
             </tr>
             
             </table>
             </para>
             <para>CMYG2 indicates the following matrix:</para>
             <para>
             <table style="width:41.254%;" cellspacing="0" width="41.254%">
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #ffffff" width="10%">
             </td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 1</b></td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff" width="10%">
             <b>Y = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             C</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             Y</td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>Y = 1</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             M</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             G</td>
             </tr>
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff" width="10%">
             <b>Y = 2</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             C</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             Y</td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             background-color: #00ffff;" width="10%">
             <b>Y = 3</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             G</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             M</td>
             </tr>
             </table>
             </para>
             
             <para>LRGB indicates the following matrix (Kodak TRUESENSE):</para>
             <para>
             <table style="width:68.757%;" cellspacing="0" width="68.757%">
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #ffffff" width="10%">
             </td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 1</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 2</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 3</b></td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff" width="10%">
             <b>Y = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             L</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             R</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             L</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             G</td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>Y = 1</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             R</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             L</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             G</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             L</td>
             </tr>
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff" width="10%">
             <b>Y = 2</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             L</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             G</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             L</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             B</td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             background-color: #00ffff;" width="10%">
             <b>Y = 3</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             G</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             L</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             B</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             L</td>
             </tr>
             </table>
             </para>
             
             <para>The alignment of the array may be modified by <see cref="P:ASCOM.DriverAccess.Camera.BayerOffsetX" /> and <see cref="P:ASCOM.DriverAccess.Camera.BayerOffsetY" />. 
             The offset is measured from the 0,0 position in the sensor array to the upper left corner of the Bayer matrix table. 
             Please note that the Bayer offset values are not affected by subframe settings.</para>
             <para>For example, if a CMYG2 sensor has a Bayer matrix offset as shown below, <see cref="P:ASCOM.DriverAccess.Camera.BayerOffsetX" /> is 0 and <see cref="P:ASCOM.DriverAccess.Camera.BayerOffsetY" /> is 1:</para>
            <para>
             <table style="width:41.254%;" cellspacing="0" width="41.254%">
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             <col style="width: 10%;"></col>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #ffffff" width="10%">
             </td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>X = 1</b></td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff" width="10%">
             <b>Y = 0</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             G</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             M</td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff;" width="10%">
             <b>Y = 1</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             C</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             Y</td>
             </tr>
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             background-color: #00ffff" width="10%">
             <b>Y = 2</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             " width="10%">
             M</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             " width="10%">
             G</td>
             </tr>
             
             <tr valign="top" align="center">
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             background-color: #00ffff;" width="10%">
             <b>Y = 3</b></td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             C</td>
             <td colspan="1" rowspan="1" style="width:10%; 
             border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; 
             border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; 
             border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; 
             border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;
             " width="10%">
             Y</td>
             </tr>
             </table>
             </para>
             <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected">connection</see> is established with the camera hardware, to ensure that 
             the driver is aware of the capabilities of the specific camera model.</para>
             </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.Offset">
            <summary>
            The camera's offset (OFFSET VALUE MODE) OR the index of the selected camera offset description in the <see cref="P:ASCOM.DriverAccess.Camera.Offsets" /> array (OFFSETS INDEX MODE)
            </summary>
            <returns><para><b> OFFSET VALUE MODE:</b> The current offset value.</para>
            <p style="color:red"><b>OR</b></p>
            <b>OFFSETS INDEX MODE:</b> Index into the Offsets array for the current camera offset
            </returns>
            <exception cref="T:ASCOM.InvalidValueException">When the supplied value is not valid.</exception>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When neither <b>OFFSETS INDEX</b> mode nor <b>OFFSET VALUE</b> mode are supported.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>This is an optional property and can throw a PropertyNotImplementedException if Offset is not supported by the camera.</b></p>
            The <see cref="P:ASCOM.DriverAccess.Camera.Offset" /> property is used to adjust the offset setting of the camera and has <b>two modes of operation</b>:
            <ul>
            <li><b>OFFSET VALUE MODE</b> - The <see cref="P:ASCOM.DriverAccess.Camera.Offset" /> property is a direct numeric representation of the camera's offset.
            <ul>
            <li>In this mode the <see cref="P:ASCOM.DriverAccess.Camera.OffsetMin" /> and <see cref="P:ASCOM.DriverAccess.Camera.OffsetMax" /> properties must return integers specifying the valid range for <see cref="P:ASCOM.DriverAccess.Camera.Offset" /></li>
            <li>The <see cref="P:ASCOM.DriverAccess.Camera.Offsets"/> property must return a <see cref="T:ASCOM.PropertyNotImplementedException"/>.</li>
            </ul>
            </li>
            <li><b>OFFSETS INDEX MODE</b> - The <see cref="P:ASCOM.DriverAccess.Camera.Offset" /> property is the selected offset's index within the <see cref="P:ASCOM.DriverAccess.Camera.Offsets"/> array of textual offset descriptions.
            <ul>
            <li>In this  mode the <see cref="P:ASCOM.DriverAccess.Camera.Offsets" /> method returns a 0-based array of strings, which describe available offset settings e.g. "ISO 200", "ISO 1600" </li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.OffsetMin" /> and <see cref="P:ASCOM.DriverAccess.Camera.OffsetMax" /> must throw <see cref="T:ASCOM.PropertyNotImplementedException"/>s.</li>
            <li>Please note that the <see cref="P:ASCOM.DriverAccess.Camera.Offsets"/> array is zero based.</li>
            </ul>
            </li>
            </ul>
            <para>A driver can support none, one or both offset modes depending on the camera's capabilities. However, only one mode can be active at any one moment because both modes share
            the <see cref="P:ASCOM.DriverAccess.Camera.Offset"/> property to return the offset value. Client applications can determine which mode is operational by reading the <see cref="P:ASCOM.DriverAccess.Camera.OffsetMin"/>, <see cref="P:ASCOM.DriverAccess.Camera.OffsetMax"/> and 
            <see cref="P:ASCOM.DriverAccess.Camera.Offset"/> properties. If a property can be read then its associated mode is active, if it throws a <see cref="T:ASCOM.PropertyNotImplementedException"/> then the mode is not active.</para>
            <para>If a driver supports both modes the astronomer must be able to select the required mode through the driver Setup dialogue.</para>
            <para>During driver initialisation the driver must set <see cref="P:ASCOM.DriverAccess.Camera.Offset" /> to a valid value.</para>
            <para>Please note that <see cref="P:ASCOM.DriverAccess.Camera.ReadoutMode" /> may in some cases affect the offset of the camera; if so, the driver must be ensure that the two properties do not conflict if both are used.</para>
            <para>This is only available in Camera Interface Version 3 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.OffsetMax">
            <summary>
            Maximum <see cref="P:ASCOM.DriverAccess.Camera.Offset" /> value of that this camera supports
            </summary>
            <returns>The maximum offset value that this camera supports</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When the <see cref="P:ASCOM.DriverAccess.Camera.Offset"/> property is not implemented or is operating in <b>OFFSETS INDEX</b> mode.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>This is an optional property and can throw a PropertyNotImplementedException.</b></p>
            When <see cref="P:ASCOM.DriverAccess.Camera.Offset"/> is operating in <b><see cref="P:ASCOM.DriverAccess.Camera.Offset">OFFSET VALUE</see></b> mode:
            <ul>
            <li><see cref="P:ASCOM.DriverAccess.Camera.OffsetMax" /> must return the camera's highest valid <see cref="P:ASCOM.DriverAccess.Camera.Offset" /> setting.</li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.OffsetMax" /> must be equal to or greater than <see cref="P:ASCOM.DriverAccess.Camera.OffsetMin" />.</li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.Offsets"/> must throw a <see cref="T:ASCOM.PropertyNotImplementedException"/></li>
            </ul>
            <para>Please note that <see cref="P:ASCOM.DriverAccess.Camera.OffsetMin"/> and <see cref="P:ASCOM.DriverAccess.Camera.OffsetMax"/> act together and that either both must be implemented or both must throw <see cref="T:ASCOM.PropertyNotImplementedException"/>s.</para>
            <para>It is recommended that this function be called only after a connection is established with the camera hardware to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This property is only available in Camera Interface Version 3 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.OffsetMin">
            <summary>
            Minimum <see cref="P:ASCOM.DriverAccess.Camera.Offset" /> value of that this camera supports
            </summary>
            <returns>The minimum offset value that this camera supports</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When the <see cref="P:ASCOM.DriverAccess.Camera.Offset"/> property is not implemented or is operating in <b>OFFSETS INDEX</b> mode.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>This is an optional property and can throw a PropertyNotImplementedException.</b></p>
            When <see cref="P:ASCOM.DriverAccess.Camera.Offset"/> is operating in <b><see cref="P:ASCOM.DriverAccess.Camera.Offset">OFFSET VALUE</see></b> mode:
            <ul>
            <li><see cref="P:ASCOM.DriverAccess.Camera.OffsetMin" /> must return the camera's lowest valid <see cref="P:ASCOM.DriverAccess.Camera.Offset" /> setting.</li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.OffsetMin" /> must be less than or equal to <see cref="P:ASCOM.DriverAccess.Camera.OffsetMax" />.</li>
            <li><see cref="P:ASCOM.DriverAccess.Camera.Offsets"/> must throw a <see cref="T:ASCOM.PropertyNotImplementedException"/></li>
            </ul>
            <para>Please note that <see cref="P:ASCOM.DriverAccess.Camera.OffsetMin"/> and <see cref="P:ASCOM.DriverAccess.Camera.OffsetMax"/> act together and that either both must be implemented or both must throw <see cref="T:ASCOM.PropertyNotImplementedException"/>s.</para>
            <para>It is recommended that this function be called only after a connection is established with the camera hardware to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This property is only available in Camera Interface Version 3 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.Offsets">
            <summary>
            List of Offset names supported by the camera
            </summary>
            <returns>The list of supported offset names as an ArrayList of strings</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When the <see cref="P:ASCOM.DriverAccess.Camera.Offset"/> property is not implemented or is operating in <b>OFFSET VALUE</b> mode.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>This is an optional property and can throw a PropertyNotImplementedException.</b></p>
            When <see cref="P:ASCOM.DriverAccess.Camera.Offset"/> is operating in <b><see cref="P:ASCOM.DriverAccess.Camera.Offset">OFFSETS INDEX</see></b> mode:
            <ul>
            <li>The <see cref="P:ASCOM.DriverAccess.Camera.Offsets" /> property must return a zero-based ArrayList of available offset setting names.</li>
            <li>The <see cref="P:ASCOM.DriverAccess.Camera.OffsetMin"/> and <see cref="P:ASCOM.DriverAccess.Camera.OffsetMax"/> properties must throw <see cref="T:ASCOM.PropertyNotImplementedException"/>s.</li>
            </ul>
            <para>The returned offset names are at the manufacturer / driver author's discretion and could for example be: "Low gain", "Medium gain" and "High gain"to match the offset to different camera use scenarios.
            Typically the application software will display the returned offset names in a drop list, from which the astronomer can select the required value.
            The application can then configure the required offset by setting the camera's <see cref="P:ASCOM.DriverAccess.Camera.Offset"/> property to the array index of the selected description.</para>
            <para>It is recommended that this function be called only after a connection is established with the camera hardware to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            <para>This is only available in Camera Interface Version 3 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Camera.SubExposureDuration">
            <summary>
            Camera's sub-exposure interval
            </summary>
            <exception cref="T:ASCOM.InvalidValueException">When the supplied value is not valid.</exception>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When the camera does not support sub exposure configuration.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>This is an optional property and can throw a PropertyNotImplementedException.</b></p>
            <para>This is only available in Camera Interface Version 3 and later.</para>
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess.CoverCalibrator">
            <summary>
            Provides universal access to CoverCalibrator drivers
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.CoverCalibrator.#ctor(System.String)">
            <summary>
            Creates a CoverCalibrator object with the given ProgID
            </summary>
            <param name="coverCalibratorId">ProgID of the CoverCalibrator device to be accessed.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.CoverCalibrator.Choose(System.String)">
            <summary>
            Brings up the ASCOM Chooser Dialogue to choose a CoverCalibrator
            </summary>
            <param name="coverCalibratorId">CoverCalibrator ProgID for default or null for None</param>
            <returns>ProgID for chosen CoverCalibrator or null for none</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.CoverCalibrator.CoverState">
            <summary>
            Returns the state of the device cover, if present, otherwise returns "NotPresent"
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            /// <remarks>
            <para>This is a mandatory property that must return a value, it must not throw a <see cref="T:ASCOM.PropertyNotImplementedException"/>.</para>
            <para>The <see cref="F:ASCOM.DeviceInterface.CoverStatus.Unknown"/> state must only be returned if the device is unaware of the cover's state e.g. if the hardware does not report the open / closed state and the cover has just been powered on.
            Clients do not need to take special action if this state is returned, they must carry on as usual, issuing  <see cref="M:ASCOM.DriverAccess.CoverCalibrator.OpenCover"/> or <see cref="M:ASCOM.DriverAccess.CoverCalibrator.CloseCover"/> commands as required.</para>
            <para>If the cover hardware cannot report its state, the device could mimic this by recording the last configured state and returning this. Driver authors or device manufacturers may also wish to offer users
            the capability of powering up in a known state e.g. Open or Closed and driving the hardware to this state when Connected is set <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.CoverCalibrator.OpenCover">
            <summary>
            Initiates cover opening if a cover is present
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">When <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> returns <see cref="F:ASCOM.DeviceInterface.CoverStatus.NotPresent"/>.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>While the cover is opening <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> must return <see cref="F:ASCOM.DeviceInterface.CoverStatus.Moving"/>.</para>
            <para>When the cover is open <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> must return <see cref="F:ASCOM.DeviceInterface.CoverStatus.Open"/>.</para>
            <para>If an error condition arises while moving between states, <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> must be set to <see cref="F:ASCOM.DeviceInterface.CoverStatus.Error"/> rather than <see cref="F:ASCOM.DeviceInterface.CoverStatus.Unknown"/>.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.CoverCalibrator.CloseCover">
            <summary>
            Initiates cover closing if a cover is present
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">When <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> returns <see cref="F:ASCOM.DeviceInterface.CoverStatus.NotPresent"/>.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>While the cover is closing <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> must return <see cref="F:ASCOM.DeviceInterface.CoverStatus.Moving"/>.</para>
            <para>When the cover is closed <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> must return <see cref="F:ASCOM.DeviceInterface.CoverStatus.Closed"/>.</para>
            <para>If an error condition arises while moving between states, <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> must be set to <see cref="F:ASCOM.DeviceInterface.CoverStatus.Error"/> rather than <see cref="F:ASCOM.DeviceInterface.CoverStatus.Unknown"/>.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.CoverCalibrator.HaltCover">
            <summary>
            Stops any cover movement that may be in progress if a cover is present and cover movement can be interrupted.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">When <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> returns <see cref="F:ASCOM.DeviceInterface.CoverStatus.NotPresent"/> or if cover movement cannot be interrupted.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>This must stop any cover movement quickly and set a <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> of <see cref="F:ASCOM.DeviceInterface.CoverStatus.Open"/>, <see cref="F:ASCOM.DeviceInterface.CoverStatus.Closed"/> 
            or <see cref="F:ASCOM.DeviceInterface.CoverStatus.Unknown"/> as appropriate.</para>
            <para>If cover movement cannot be interrupted, a <see cref="T:ASCOM.MethodNotImplementedException"/> must be thrown.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState">
            <summary>
            Returns the state of the calibration device, if present, otherwise returns "NotPresent"
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>This is a mandatory property that must return a value, it must not throw a <see cref="T:ASCOM.PropertyNotImplementedException"/>.</para>
            <para>The <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.Unknown"/> state must only be returned if the device is unaware of the calibrator's state e.g. if the hardware does not report the device's state and 
            the calibrator has just been powered on. Clients do not need to take special action if this state is returned, they must carry on as usual, issuing <see cref="M:ASCOM.DriverAccess.CoverCalibrator.CalibratorOn(System.Int32)"/> and 
            <see cref="M:ASCOM.DriverAccess.CoverCalibrator.CalibratorOff"/> commands as required.</para>
            <para>If the calibrator hardware cannot report its state, the device could mimic this by recording the last configured state and returning this. Driver authors or device manufacturers may also wish to offer users
            the capability of powering up in a known state and driving the hardware to this state when Connected is set <see langword="true"/>.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.CoverCalibrator.Brightness">
            <summary>
            Returns the current calibrator brightness in the range 0 (completely off) to <see cref="P:ASCOM.DriverAccess.CoverCalibrator.MaxBrightness"/> (fully on)
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> returns <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.NotPresent"/>.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>This is a mandatory property for a calibrator device </para>
            <para>The brightness value must be 0 when the <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> is <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.Off"/></para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.CoverCalibrator.MaxBrightness">
            <summary>
            The Brightness value that makes the calibrator deliver its maximum illumination.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">When <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> returns <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.NotPresent"/>.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>This is a mandatory property for a calibrator device and must be within the integer range 1 to 2,147,483,647</para>
            <para>A value of 1 indicates that the calibrator can only be "off" or "on".</para>
            <para>A value of 10 indicates that the calibrator has 10 discreet illumination levels in addition to "off".</para>
            <para>The value for this parameter should be determined by the driver author or device manufacturer based on the capabilities of the hardware used in the calibrator.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.CoverCalibrator.CalibratorOn(System.Int32)">
            <summary>
            Turns the calibrator on at the specified brightness if the device has calibration capability
            </summary>
            <param name="Brightness">Sets the required calibrator illumination brightness in the range 0 (fully off) to <see cref="P:ASCOM.DriverAccess.CoverCalibrator.MaxBrightness"/> (fully on).</param>
            <exception cref="T:ASCOM.InvalidValueException">When the supplied brightness parameter is outside the range 0 to <see cref="P:ASCOM.DriverAccess.CoverCalibrator.MaxBrightness"/>.</exception>
            <exception cref="T:ASCOM.MethodNotImplementedException">When <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> returns <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.NotPresent"/>.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>This is a mandatory method for a calibrator device that must be implemented.</para>
            <para>If the calibrator takes some time to stabilise, the <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> must return <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.NotReady"/>. When the 
            calibrator is ready for use <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> must return <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.Ready"/>.</para>
            <para>For devices with both cover and calibrator capabilities, this method may change the <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/>, if required.</para>
            <para>If an error condition arises while turning on the calibrator, <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> must be set to <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.Error"/> rather than <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.Unknown"/>.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.CoverCalibrator.CalibratorOff">
            <summary>
            Turns the calibrator off if the device has calibration capability
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">When <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> returns <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.NotPresent"/>.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>This is a mandatory method for a calibrator device.</para>
            <para>If the calibrator requires time to safely stabilise after use, <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> must return <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.NotReady"/>. When the 
            calibrator is safely off <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> must return <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.Off"/>.</para>
            <para>For devices with both cover and calibrator capabilities, this method will return the <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CoverState"/> to its status prior to calling <see cref="M:ASCOM.DriverAccess.CoverCalibrator.CalibratorOn(System.Int32)"/>.</para>
            <para>If an error condition arises while turning off the calibrator, <see cref="P:ASCOM.DriverAccess.CoverCalibrator.CalibratorState"/> must be set to <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.Error"/> rather than <see cref="F:ASCOM.DeviceInterface.CalibratorStatus.Unknown"/>.</para>
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess.Dome">
            <summary>
            Provides universal access to ASCOM Dome drivers
            </summary>
            <remarks>
            <para>
            This interface can be used to control most types of observatory structure, including domes (with or without a controllable shutter), clamshells and roll off roofs.
            </para>
            <para><b>Dome Coordinates</b></para>
            <para>
            The azimuth and shutter altitude coordinates within this interface refer to positioning of the dome itself and are not sky coordinates from the perspective of the observing device. 
            Mount geometry and pier location often mean that the observing device is not located at the centre point of a hemispherical dome and this results in the dome needing to be positioned at different coordinates
            than those of the mount in order to expose the required part of the sky to the observing device.
            </para>
            <para>
            Calculating the required dome position is not the responsibility of the dome driver, this must be done by the client application or by an intermediary hub such as the Device Hub. The coordinates sent 
            to the dome driver must be those required to position the dome slit in the correct position after allowing for the geometry of the mount.
            </para>
            <para><b>Dome Slaving</b></para>
            <para>
            A dome is said to be slaved when its azimuth and shutter altitude are controlled by a "behind the scenes" controller that knows the required telescope observing coordinates and that can calculate the 
            required dome position after allowing for mount geometry, observing device orientation etc. When slaved and in operational use most of the dome interface methods are of little relevance 
            apart from the shutter control methods.
            </para>
            <para><b>How to use the Dome interface to implement a Roll-off Roof or Clamshell</b></para>
            <para>
            A roll off roof or clamshell is implemented using the shutter control as the roof. The properties and methods should be implemented as follows:
            </para>
            <list type="bullet">
            <item>
            <see cref="M:ASCOM.DriverAccess.Dome.OpenShutter" /> and <see cref="M:ASCOM.DriverAccess.Dome.CloseShutter" /> open and close the roof
            </item>
            <item>
            <see cref="P:ASCOM.DriverAccess.Dome.CanFindHome" />, <see cref="P:ASCOM.DriverAccess.Dome.CanPark" />, <see cref="P:ASCOM.DriverAccess.Dome.CanSetAltitude" />,
            <see cref="P:ASCOM.DriverAccess.Dome.CanSetAzimuth" />, <see cref="P:ASCOM.DriverAccess.Dome.CanSetPark" />, <see cref="P:ASCOM.DriverAccess.Dome.CanSlave" /> and
            <see cref="P:ASCOM.DriverAccess.Dome.CanSyncAzimuth" /> all return <see langword="false" />.
            </item>
            <item><see cref="P:ASCOM.DriverAccess.Dome.CanSetShutter" /> returns <see langword="true" />.</item>
            <item><see cref="P:ASCOM.DriverAccess.Dome.ShutterStatus" /> should be implemented.</item>
            <item>
            <see cref="M:ASCOM.DriverAccess.Dome.AbortSlew" /> should stop the roof or shutter.
            </item>
            <item>
            <see cref="M:ASCOM.DriverAccess.Dome.FindHome" />, <see cref="M:ASCOM.DriverAccess.Dome.Park" />, <see cref="M:ASCOM.DriverAccess.Dome.SetPark" />,
            <see cref="M:ASCOM.DriverAccess.Dome.SlewToAltitude(System.Double)" />, <see cref="M:ASCOM.DriverAccess.Dome.SlewToAzimuth(System.Double)" /> and
            <see cref="M:ASCOM.DriverAccess.Dome.SyncToAzimuth(System.Double)" /> all throw <see cref="T:ASCOM.MethodNotImplementedException" />
            </item>
            <item>
            <see cref="P:ASCOM.DriverAccess.Dome.Altitude" /> and <see cref="P:ASCOM.DriverAccess.Dome.Azimuth" /> throw  <see cref="T:ASCOM.PropertyNotImplementedException" />
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.#ctor(System.String)">
            <summary>
            Constructor for Dome class. Creates a Dome based on the ProgID in the DomeID string.
            </summary>
            <param name="domeId">The progID of the dome to be instantiated</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.Choose(System.String)">
            <summary>
            Shows the ASCOM Chooser to select a Dome.
            </summary>
            <param name="domeId">Prog ID of the default dome to select. Null if no default is to be set.</param>
            <returns>The Prog ID of the Dome chosen, or Null if no dome is chose, or the dialog is canceled.</returns>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.AbortSlew">
            <summary>Immediately stops any and all movement.</summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red">
            <b>Must be implemented, must not throw a MethodNotImplementedException.</b>
            </p>
            Calling this method will immediately disable hardware slewing (<see cref="P:ASCOM.DriverAccess.Dome.Slaved" /> will
            become <see langword="false" />). Raises an error if a communications failure occurs, or if the
            command is known to have failed.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.Altitude">
            <summary>
            The altitude (degrees, horizon zero and increasing positive to 90 zenith) of the part of the sky that the observer wishes to observe.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>
            The specified altitude is the position on the sky that the observer wishes to observe. It is up to the driver to determine how best to locate the dome aperture in order to expose that part of the sky to the telescope.
            This means that the mechanical position to which the Dome moves may not correspond exactly to requested observing altitude because the driver must coordinate
            multiple shutters, clamshell segments or roof mechanisms to provide the required aperture on the sky.
            </para>
            <para>
            Raises an error only if no altitude control. If actual dome altitude can not be read, then reports back the altitude of the last slew position.
            </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.AtHome">
            <summary>
            <para><see langword="true" /> when the dome is in the home position. Raises an error if not supported.</para>
            <para>
            This is normally used following a <see cref="M:ASCOM.DriverAccess.Dome.FindHome" /> operation. The value is reset
            with any azimuth slew operation that moves the dome away from the home position.
            </para>
            <para>
            <see cref="P:ASCOM.DriverAccess.Dome.AtHome" /> may optionally also become true during normal slew operations, if the
            dome passes through the home position and the dome controller hardware is capable of
            detecting that; or at the end of a slew operation if the dome comes to rest at the home
            position.
            </para>
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>
            The home position is normally defined by a hardware sensor positioned around the dome circumference and represents a fixed, known azimuth reference.
            </para>
            <para>
            Applications should not rely on the reported azimuth position being identical each time <see cref="P:ASCOM.DriverAccess.Dome.AtHome" /> is set <see langword="true" />.
            For some devices, the home position may encompass a small range of azimuth values, rather than a discrete value, since dome inertia, the resolution of the home position sensor
            and/or the azimuth encoder may be insufficient to return the exact same azimuth value on each occasion. On the other hand some dome controllers always force the azimuth
            reading to a fixed value whenever the home position sensor is active.
            </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.AtPark">
            <summary><see langword="true" /> if the dome is in the programmed park position.</summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>
            Set only following a <see cref="M:ASCOM.DriverAccess.Dome.Park" /> operation and reset with any slew operation. Raises an error if not supported.
            </para>
            <para>
            Applications should not rely on the reported azimuth position being identical each time <see cref="P:ASCOM.DriverAccess.Dome.AtPark" /> is set <see langword="true" />.
            For some devices, the park position may encompass a small range of azimuth values, rather than a discrete value, since dome inertia, the resolution of the park position sensor
            and/or the azimuth encoder may be insufficient to return the exact same azimuth value on each occasion. On the other hand some dome controllers always force the azimuth
            reading to a fixed value whenever the park position sensor is active.
            </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.Azimuth">
            <summary>
            The dome azimuth (degrees, North zero and increasing clockwise, i.e., 90 East, 180 South, 270 West). North is true north and not magnetic north.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>
            The specified azimuth is the position on the sky that the observer wishes to observe. It is up to the driver to determine how best to locate the dome in order to expose that part of the sky to the telescope.
            This means that the mechanical position to which the Dome moves may not correspond exactly to requested observing azimuth because the driver must coordinate
            multiple shutters, clamshell segments or roof mechanisms to provide the required aperture on the sky.
            </para>
            <para>
            Raises an error only if no azimuth control. If actual dome azimuth can not be read, then reports back the azimuth of the last slew position.
            </para>
            <para>
            The supplied azimuth value is the final azimuth for the dome, not the telescope azimuth. ASCOM Dome drivers do not perform slaving calculations i.e. they do not take account of mount geometry and simply 
            move where they are instructed. Any such slaving calculations must be done by the application.
            </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.CanFindHome">
            <summary><see langword="true" /> if driver can perform a search for home position.</summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red">
            <b>Must be implemented, must not throw a PropertyNotImplementedException.</b>
            </p>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.CanPark">
            <summary><see langword="true" /> if the driver is capable of parking the dome.</summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red">
            <b>Must be implemented, must not throw a PropertyNotImplementedException.</b>
            </p>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.CanSetAltitude">
            <summary><see langword="true" /> if driver is capable of setting dome altitude.</summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red">
            <b>Must be implemented, must not throw a PropertyNotImplementedException.</b>
            </p>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.CanSetAzimuth">
            <summary>
            <see langword="true" /> if driver is capable of rotating the dome (or controlling the roof
            mechanism) in order to observe at a given azimuth.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red">
            <b>Must be implemented, must not throw a PropertyNotImplementedException.</b>
            </p>
            <para>
            This property typically returns <see langword="true" /> for rotating structures and <see langword="false" /> for non-rotating structures.
            </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.CanSetPark">
            <summary><see langword="true" /> if the driver can set the dome park position.</summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red">
            <b>Must be implemented, must not throw a PropertyNotImplementedException.</b>
            </p>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.CanSetShutter">
            <summary>
            <see langword="true" /> if the driver is capable of opening and closing the shutter or roof
            mechanism.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red">
            <b>Must be implemented, must not throw a PropertyNotImplementedException.</b>
            </p>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.CanSlave">
            <summary><see langword="true" /> if the dome hardware supports slaving to a telescope.</summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red">
            <b>Must be implemented, must not throw a PropertyNotImplementedException.</b>
            </p>
            <para>
            See the notes for the <see cref="P:ASCOM.DriverAccess.Dome.Slaved" /> property. This should only be <see langword="true" /> if the dome hardware has its own built-in slaving mechanism. 
            It is not permitted for a dome driver to query a telescope driver directly.
            </para>
            </remarks>
            <seealso cref="P:ASCOM.DriverAccess.Dome.Slaved" />
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.CanSyncAzimuth">
            <summary>
            <see langword="true" /> if the driver is capable of synchronizing the dome azimuth position
            using the <see cref="M:ASCOM.DriverAccess.Dome.SyncToAzimuth(System.Double)" /> method.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red">
            <b>Must be implemented, must not throw a PropertyNotImplementedException.</b>
            </p>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.CloseShutter">
            <summary>Close the shutter or otherwise shield the telescope from the sky.</summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.FindHome">
            <summary>Start operation to search for the dome home position.</summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.SlavedException">If slaving is enabled.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            The method should not block and the homing operation should complete asynchronously. After the
            home position is established, <see cref="P:ASCOM.DriverAccess.Dome.Azimuth" /> is synchronized to the appropriate value
            and the <see cref="P:ASCOM.DriverAccess.Dome.AtHome" /> property becomes <see langword="true" />.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.OpenShutter">
            <summary>Open shutter or otherwise expose telescope to the sky.</summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>Raises an error if not supported or if a communications failure occurs.</remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.Park">
            <summary>Rotate dome in azimuth to park position.</summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            After assuming the programmed park position, sets the <see cref="P:ASCOM.DriverAccess.Dome.AtPark" /> flag. Raises an error if <see cref="P:ASCOM.DriverAccess.Dome.Slaved" /> is <see langword="true" />, if not supported 
            or if a communications failure occurred.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.SetPark">
            <summary>Set the current azimuth position of dome to the park position.</summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.ShutterStatus">
            <summary>Gets the status of the dome shutter or roof structure.</summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Raises an error only if no shutter control. If actual shutter status can not be read, then
            reports back the last shutter state.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.Slaved">
            <summary><see langword="true"/> if the dome is slaved to the telescope in its hardware, else <see langword="false"/>.</summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If Slaved can not be set.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red;margin-bottom:0">
            <b>Slaved Read must be implemented and must not throw a PropertyNotImplementedException. </b>
            </p>
            <p style="color:red;margin-top:0">
            <b>Slaved Write can throw a PropertyNotImplementedException.</b>
            </p>
            Set this property to <see langword="true"/> to enable dome-telescope hardware slaving, if supported (see
            <see cref="P:ASCOM.DriverAccess.Dome.CanSlave" />). Raises an exception on any attempt to set this property if hardware
            slaving is not supported). Always returns <see langword="false"/> if hardware slaving is not supported.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Dome.Slewing">
            <summary>
            <see langword="true" /> if any part of the dome is currently moving, <see langword="false" />
            if all dome components are stationary.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red;margin-bottom:0">
            <b>Slewing must be implemented and must not throw a PropertyNotImplementedException. </b>
            </p>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.SlewToAltitude(System.Double)">
            <summary>Ensure that the requested viewing altitude is available for observing.</summary>
            <param name="Altitude">
            The desired viewing altitude (degrees, horizon zero and increasing positive to 90 degrees at the zenith)
            </param>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.InvalidValueException">If the supplied altitude is out of range.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            The requested altitude should be interpreted by the driver as the position on the sky that the observer wishes to observe. The driver has detailed knowledge of the physical structure and
            must coordinate shutters, roofs or clamshell segments to open an aperture on the sky that satisfies the observer's request.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.SlewToAzimuth(System.Double)">
            <summary>
            Ensure that the requested viewing azimuth is available for observing.
            The method should not block and the slew operation should complete asynchronously.
            </summary>
            <param name="Azimuth">
            Desired viewing azimuth (degrees, North zero and increasing clockwise. i.e., 90 East,
            180 South, 270 West)
            </param>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.InvalidValueException">If the requested azimuth is greater than or equal to 360 or less than 0.</exception>
            <exception cref="T:ASCOM.SlavedException">Thrown if <see cref="P:ASCOM.DriverAccess.Dome.Slaved" /> is <see langword="true" /></exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            The requested azimuth should be interpreted by the driver as the position on the sky that the observer wishes to observe. The driver has detailed knowledge of the physical structure and
            must coordinate shutters, roofs or clamshell segments to open an aperture on the sky that satisfies the observer's request.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Dome.SyncToAzimuth(System.Double)">
            <summary>Synchronize the current position of the dome to the given azimuth.</summary>
            <param name="Azimuth">Target azimuth (degrees, North zero and increasing clockwise. i.e., 90 East, 180 South, 270 West)</param>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.InvalidValueException">If the supplied azimuth is outside the range 0..360 degrees.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">Must raise an error if the operation cannot be completed.</exception>
        </member>
        <member name="T:ASCOM.DriverAccess.FilterWheel">
            <summary>
            Provides universal access to FilterWheel drivers
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.FilterWheel.#ctor(System.String)">
            <summary>
            Creates a FilterWheel object with the given Prog ID
            </summary>
            <param name="filterWheelId">ProgID of the filterwheel device to be accessed.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.FilterWheel.Choose(System.String)">
            <summary>
            Brings up the ASCOM Chooser Dialogue to choose a FilterWheel
            </summary>
            <param name="filterWheelId">FilterWheel Prog ID for default or null for None</param>
            <returns>Prog ID for chosen FilterWheel or null for none</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.FilterWheel.FocusOffsets">
             <summary>
             Focus offset of each filter in the wheel
            </summary>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
             <remarks>
             For each valid slot number (from 0 to N-1), reports the focus offset for
             the given filter position.  These values are focuser and filter
             dependent, and  would usually be set up by the user via the SetupDialog.
             The number of slots N can be determined from the length of the array.
             If focuser offsets are not available, then it should report back 0 for all
             array values.
             </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.FilterWheel.Names">
             <summary>
             Name of each filter in the wheel
            </summary>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
             <remarks>
             For each valid slot number (from 0 to N-1), reports the name given to the
             filter position.  These names would usually be set up by the user via the
             SetupDialog.  The number of slots N can be determined from the length of
             the array.  If filter names are not available, then it should report back
             "Filter 1", "Filter 2", etc.
             </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.FilterWheel.Position">
            <summary>
            Sets or returns the current filter wheel position
            </summary>
            <exception cref="T:ASCOM.InvalidValueException">Must throw an InvalidValueException if an invalid position is set</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Write a position number between 0 and N-1, where N is the number of filter slots (see
            <see cref="P:ASCOM.DriverAccess.FilterWheel.Names"/>). Starts filter wheel rotation immediately when written. Reading
            the property gives current slot number (if wheel stationary) or -1 if wheel is
            moving. 
            <para>Returning a position of -1 is <b>mandatory</b> while the filter wheel is in motion; valid slot numbers must not be reported back while
            the filter wheel is rotating past filter positions.</para>
            <para><b>Note</b></para>
            <para>Some filter wheels are built into the camera (one driver, two
            interfaces).  Some cameras may not actually rotate the wheel until the
            exposure is triggered.  In this case, the written value is available
            immediately as the read value, and -1 is never produced.</para>
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess.Focuser">
            <summary>
            Provides universal access to Focuser drivers
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.Focuser.#ctor(System.String)">
            <summary>
            Creates a focuser object with the given Prog ID
            </summary>
            <param name="focuserId">ProgID of the focuser device to be accessed.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Focuser.Choose(System.String)">
            <summary>
            Brings up the ASCOM Chooser Dialogue to choose a Focuser
            </summary>
            <param name="focuserId">Focuser Prog ID for default or null for None</param>
            <returns>Prog ID for chosen focuser or null for none</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.Absolute">
            <summary>
            True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="M:ASCOM.DriverAccess.Focuser.Halt">
            <summary>
            Immediately stop any focuser motion due to a previous <see cref="M:ASCOM.DriverAccess.Focuser.Move(System.Int32)" /> method call.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">Focuser does not support this method.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Some focusers may not support this function, in which case an exception will be raised. 
            <para><b>Recommendation:</b> Host software should call this method upon initialization and,
            if it fails, disable the Halt button in the user interface.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.IsMoving">
            <summary>
            True if the focuser is currently moving to a new position. False if the focuser is stationary.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.Link">
            <summary>
            State of the connection to the focuser.
            </summary>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>Set True to start the connection to the focuser; set False to terminate the connection. 
            The current connection status can also be read back through this property. 
            An exception will be raised if the link fails to change state for any reason. </para>
            <para><b>Note</b></para>
            <para>The FocuserV1 interface was the only interface to name its <i>"Connection"</i> property "Link" all others named 
            their <i>"Connection"</i> property as "Connected". All interfaces including Focuser now have a <see cref="P:ASCOM.DriverAccess.AscomDriver.Connected" /> method and this is 
            the recommended method to use to <i>"Connect"</i> to Focusers exposing the V2 and later interfaces.</para>
            <para>Applications using DriverAccess can always use Connected because DriverAccess implements Connected using the Link property for V1 drivers but
            applications that call the driver directly should check the InterfaceVersion property and call Link for V1 drivers.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.MaxIncrement">
            <summary>
            Maximum increment size allowed by the focuser; 
            i.e. the maximum number of steps allowed in one move operation.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            For most focusers this is the same as the <see cref="P:ASCOM.DriverAccess.Focuser.MaxStep" /> property. This is normally used to limit the Increment 
            display in the host software.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.MaxStep">
            <summary>
            Maximum step position permitted.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            The focuser can step between 0 and <see cref="P:ASCOM.DriverAccess.Focuser.MaxStep" />. If an attempt is made to move the focuser beyond these limits,
            it will automatically stop at the limit.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Focuser.Move(System.Int32)">
             <summary>
              Moves the focuser by the specified amount or to the specified position depending on the value of the <see cref="P:ASCOM.DriverAccess.Focuser.Absolute" /> property.
             </summary>
             <param name="Position">Step distance or absolute position, depending on the value of the <see cref="P:ASCOM.DriverAccess.Focuser.Absolute" /> property.</param>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
             <remarks>
             If the <see cref="P:ASCOM.DriverAccess.Focuser.Absolute" /> property is True, then this is an absolute positioning focuser. 
             The <see cref="M:ASCOM.DriverAccess.Focuser.Move(System.Int32)">Move</see> command tells the focuser to move to an exact step position, and the Position parameter 
             of the <see cref="M:ASCOM.DriverAccess.Focuser.Move(System.Int32)">Move</see> method is an integer between 0 and <see cref="P:ASCOM.DriverAccess.Focuser.MaxStep" />.
             <para>If the <see cref="P:ASCOM.DriverAccess.Focuser.Absolute" /> property is False, then this is a relative positioning focuser. The <see cref="M:ASCOM.DriverAccess.Focuser.Move(System.Int32)">Move</see> command tells 
             the focuser to move in a relative direction, and the Position parameter of the <see cref="M:ASCOM.DriverAccess.Focuser.Move(System.Int32)">Move</see> method (in this case, step distance) 
             is an integer between minus <see cref="P:ASCOM.DriverAccess.Focuser.MaxIncrement" /> and plus <see cref="P:ASCOM.DriverAccess.Focuser.MaxIncrement" />.</para>
             <para><b>BEHAVIOURAL CHANGE - Platform 6.4</b></para>
             <para>Prior to Platform 6.4, the interface specification mandated that drivers must throw an <see cref="T:ASCOM.InvalidOperationException"/> if a move was attempted when <see cref="P:ASCOM.DriverAccess.Focuser.TempComp"/> was True, even if the focuser 
             was able to execute the move safely without disrupting temperature compensation.</para>
             <para>Following discussion on ASCOM-Talk in January 2018, the Focuser interface specification has been revised to IFocuserV3, removing the requirement to throw the InvalidOperationException exception. IFocuserV3 compliant drivers 
             are expected to execute Move requests when temperature compensation is active and to hide any specific actions required by the hardware from the client. For example this could be achieved by disabling temperature compensation, moving the focuser and re-enabling 
             temperature compensation or simply by moving the focuser with compensation enabled if the hardware supports this.</para>
             <para>Conform will continue to pass IFocuserV2 drivers that throw InvalidOperationException exceptions. However, Conform will now fail IFocuserV3 drivers that throw InvalidOperationException exceptions, in line with this revised specification.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.Position">
            <summary>
            Current focuser position, in steps.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Raises a PropertyNotImplemented if the focuser does not intrinsically know what the position is.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Valid only for absolute positioning focusers (see the <see cref="P:ASCOM.DriverAccess.Focuser.Absolute" /> property).
            An exception will be raised for relative positioning focusers.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.StepSize">
            <summary>
            Step size (microns) for the focuser.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Raises a PropertyNotImplemented if the focuser does not intrinsically know what the step size is.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Must throw an exception if the focuser does not intrinsically know what the step size is.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.TempComp">
             <summary>
             The state of temperature compensation mode (if available), else always False.
             </summary>
             <exception cref="T:ASCOM.PropertyNotImplementedException">If <see cref="P:ASCOM.DriverAccess.Focuser.TempCompAvailable" /> is False and an attempt is made to set <see cref="P:ASCOM.DriverAccess.Focuser.TempComp" /> to true.</exception>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
             <remarks>
            <para>If the <see cref="P:ASCOM.DriverAccess.Focuser.TempCompAvailable" /> property is True, then setting <see cref="P:ASCOM.DriverAccess.Focuser.TempComp" /> to True puts the focuser into temperature tracking mode; setting it to False will turn off temperature tracking.
             An exception will be raised if <see cref="P:ASCOM.DriverAccess.Focuser.TempCompAvailable" /> is False and an attempt is made to set <see cref="P:ASCOM.DriverAccess.Focuser.TempComp" /> to true.</para>
             <para><b>BEHAVIOURAL CHANGE - Platform 6.4</b></para>
             <para>Prior to Platform 6.4, the interface specification mandated that drivers must throw an <see cref="T:ASCOM.InvalidOperationException"/> if a move was attempted when <see cref="P:ASCOM.DriverAccess.Focuser.TempComp"/> was True, even if the focuser 
             was able to execute the move safely without disrupting temperature compensation.</para>
             <para>Following discussion on ASCOM-Talk in January 2018, the Focuser interface specification has been revised to IFocuserV3, removing the requirement to throw the InvalidOperationException exception. IFocuserV3 compliant drivers 
             are expected to execute Move requests when temperature compensation is active and to hide any specific actions required by the hardware from the client. For example this could be achieved by disabling temperature compensation, moving the focuser and re-enabling 
             temperature compensation or simply by moving the focuser with compensation enabled if the hardware supports this.</para>
             <para>Conform will continue to pass IFocuserV2 drivers that throw InvalidOperationException exceptions. However, Conform will now fail IFocuserV3 drivers that throw InvalidOperationException exceptions, in line with this revised specification.</para>
             </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.TempCompAvailable">
            <summary>
            True if focuser has temperature compensation available.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Will be True only if the focuser's temperature compensation can be turned on and off via the <see cref="P:ASCOM.DriverAccess.Focuser.TempComp" /> property. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Focuser.Temperature">
            <summary>
            Current ambient temperature in degrees Celsius as measured by the focuser.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not available for this device.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>Raises an exception if ambient temperature is not available. Commonly available on focusers with a built-in temperature compensation mode.</para>
            <para><b>Clarification - October 2019</b></para>
            <para>Historically no units were specified for this property. Henceforth, if applications need to process the supplied temperature, they should proceed on the basis that the 
            units are degrees Celsius for consistency with <see cref="P:ASCOM.DeviceInterface.IObservingConditions.Temperature"/>. Conversion to other temperature units can be achieved through the <see cref="M:ASCOM.Utilities.Util.ConvertUnits(System.Double,ASCOM.Utilities.Units,ASCOM.Utilities.Units)"/> utility method.</para>
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess.MemberFactory">
            <summary>
            A factory class to access any registered driver members
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.MemberFactory.#ctor(System.String,ASCOM.Utilities.TraceLogger)">
            <summary>
            Constructor, creates an instance of the of the ASCOM driver using the given TraceLogger
            
            </summary> 
            <param name="progId">The program ID of the driver</param>
            <param name="ascomDriverTraceLogger">The supplied TraceLogger instance in which to log activity</param>
        </member>
        <member name="P:ASCOM.DriverAccess.MemberFactory.GetLateBoundObject">
            <summary>
            Returns the instance of the driver
            </summary> 
            <returns>object</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.MemberFactory.IsComObject">
            <summary>
            Returns true is the driver is COM based
            </summary> 
            <returns>object</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.MemberFactory.GetObjType">
            <summary>
            Returns the driver type
            </summary> 
            <returns>type</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.MemberFactory.GetInterfaces">
            <summary>
            Returns a list of supported interfaces
            </summary> 
            <returns>type</returns>
        </member>
        <member name="M:ASCOM.DriverAccess.MemberFactory.Dispose">
            <summary>
            Dispose the late-bound interface, if needed. Will release it via COM
            if it is a COM object, else if native .NET will just dereference it
            for GC.
            </summary>
            <returns>nothing</returns>
        </member>
        <member name="M:ASCOM.DriverAccess.MemberFactory.CallMember(System.Int32,System.String,System.Type[],System.Object[])">
            <summary>
            Calls a method on an object dynamically. 
            
            parameterTypes must match the parameters and in the same order.
            </summary> 
            <param name="memberCode">1-GetProperty, 2-SetProperty, 3-Method</param>
            <param name="memberName">The member name to call as a string</param>
            <param name="parameterTypes">Array of parameter types in order</param> 
            <param name="parms">Array of parameters in order</param>
            <exception cref="T:ASCOM.PropertyNotImplementedException"></exception>
            <exception cref="T:ASCOM.MethodNotImplementedException"></exception>
            <returns>object</returns>
        </member>
        <member name="M:ASCOM.DriverAccess.MemberFactory.CheckDotNetExceptions(System.String,System.Exception)">
            <summary>
            Checks for ASCOM exceptions returned as inner exceptions of TargetInvocationException. When new ASCOM exceptions are created 
            they must be added to this method. They will then be used in all three cases of Property Get, Property Set and Method call. 
            </summary>
            <param name="memberName">The name of the invoked member</param>
            <param name="e">The thrown TargetInvocationException including the inner exception</param>
        </member>
        <member name="T:ASCOM.DriverAccess.ObservingConditions">
            <summary>
            Provides universal access to ObservingConditions drivers.
            Defines the IObservingConditions Interface. This interface provides a limited set of values that are useful
            for astronomical purposes for things such as determining if it is safe to open or operate the observing system,
            for recording astronomical data or determining refraction corrections.
            </summary>
            <remarks>It is NOT intended as a general purpose environmental sensor system.
            The <see cref="M:ASCOM.DeviceInterface.IObservingConditions.Action(System.String,System.String)">Action</see> method and 
            <see cref="P:ASCOM.DeviceInterface.IObservingConditions.SupportedActions">SupportedActions</see> property 
            can be used to add driver-specific sensors.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.ObservingConditions.#ctor(System.String)">
            <summary>
            Creates an ObservingConditions object with the given Prog ID
            </summary>
            <param name="observingConditionsId">ProgID of the device to be accessed.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.ObservingConditions.Choose(System.String)">
            <summary>
            Brings up the ASCOM Chooser Dialogue to choose an ObservingConditions driver.
            </summary>
            <param name="observingConditionsId">ObservingConditions Prog ID for default or null for None</param>
            <returns>Prog ID for chosen ObservingConditions or null for none</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.AveragePeriod">
            <summary>
            Gets and sets the time period over which observations will be averaged
            </summary>
            <value>Time period (hours) over which to average sensor readings</value>
            <exception cref="T:ASCOM.InvalidValueException">If the value set is not available for this driver. All drivers must accept 0.0 to specify that
            an instantaneous value is available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Mandatory property, must be implemented, can NOT throw a PropertyNotImplementedException</b></p>
            <para>This property should return the time period (hours) over which sensor readings will be averaged. If your driver is delivering instantaneous sensor readings this property should return a value of 0.0.</para>
            <para>Please resist the temptation to throw exceptions when clients query sensor properties when insufficient time has passed to get a true average reading. 
            A best estimate of the average sensor value should be returned in these situations. </para> 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.CloudCover">
            <summary>
            Amount of sky obscured by cloud
            </summary>
            <value>percentage of the sky covered by cloud</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            This property should return a value between 0.0 and 100.0 where 0.0 = clear sky and 100.0 = 100% cloud coverage
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.DewPoint">
            <summary>
            Atmospheric dew point at the observatory
            </summary>
            <value>Atmospheric dew point reported in °C.</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException when the <see cref="P:ASCOM.DriverAccess.ObservingConditions.Humidity"/> property also throws a PropertyNotImplementedException.</b></p>
            <p style="color:red"><b>Mandatory property, must NOT throw a PropertyNotImplementedException when the <see cref="P:ASCOM.DriverAccess.ObservingConditions.Humidity"/> property is implemented.</b></p>
            <para>The units of this property are degrees Celsius. Driver and application authors can use the <see cref="M:ASCOM.Utilities.Util.ConvertUnits(System.Double,ASCOM.Utilities.Units,ASCOM.Utilities.Units)"/> method
            to convert these units to and from degrees Fahrenheit.</para>
            <para>The ASCOM specification requires that DewPoint and Humidity are either both implemented or both throw PropertyNotImplementedExceptions. It is not allowed for 
            one to be implemented and the other to throw a PropertyNotImplementedException. The Utilities component contains methods (<see cref="M:ASCOM.Utilities.Util.DewPoint2Humidity(System.Double,System.Double)"/> and 
            <see cref="M:ASCOM.Utilities.Util.Humidity2DewPoint(System.Double,System.Double)"/>) to convert DewPoint to Humidity and vice versa given the ambient temperature.</para>
            <para>This property should return a value between 0.0 and 100.0 where 0.0 = 0% relative humidity and 100.0 = 100% relative humidity.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.Humidity">
            <summary>
            Atmospheric humidity at the observatory
            </summary>
            <value>Atmospheric humidity (%)</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException when the <see cref="P:ASCOM.DriverAccess.ObservingConditions.DewPoint"/> property also throws a PropertyNotImplementedException.</b></p>
            <p style="color:red"><b>Mandatory property, must NOT throw a PropertyNotImplementedException when the <see cref="P:ASCOM.DriverAccess.ObservingConditions.DewPoint"/> property is implemented.</b></p>
            <para>The ASCOM specification requires that DewPoint and Humidity are either both implemented or both throw PropertyNotImplementedExceptions. It is not allowed for 
            one to be implemented and the other to throw a PropertyNotImplementedException. The Utilities component contains methods (<see cref="M:ASCOM.Utilities.Util.DewPoint2Humidity(System.Double,System.Double)"/> and 
            <see cref="M:ASCOM.Utilities.Util.Humidity2DewPoint(System.Double,System.Double)"/>) to convert DewPoint to Humidity and vice versa given the ambient temperature.</para>
            </remarks>   
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.Pressure">
            <summary>
            Atmospheric pressure at the observatory
            </summary>
            <value>Atmospheric pressure at the observatory (hPa)</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            <para>The units of this property are hectoPascals. Client and driver authors can use the method <see cref="M:ASCOM.Utilities.Util.ConvertUnits(System.Double,ASCOM.Utilities.Units,ASCOM.Utilities.Units)"/>
            to convert these units to and from milliBar, mm of mercury and inches of mercury.</para>
            <para>This must be the pressure at the observatory altitude and not the adjusted pressure at sea level.
            Please check whether your pressure sensor delivers local observatory pressure or sea level pressure and, if it returns sea level pressure, 
            adjust this to actual pressure at the observatory's altitude before returning a value to the client.
            The <see cref="M:ASCOM.Utilities.Util.ConvertPressure(System.Double,System.Double,System.Double)"/> method can be used to effect this adjustment.
            </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.RainRate">
            <summary>
            Rain rate at the observatory
            </summary>
            <value>Rain rate (mm / hour)</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            <para>The units of this property are millimetres per hour. Client and driver authors can use the method <see cref="M:ASCOM.Utilities.Util.ConvertUnits(System.Double,ASCOM.Utilities.Units,ASCOM.Utilities.Units)"/>
            to convert these units to and from inches per hour.</para>
            <para>This property can be interpreted as 0.0 = Dry any positive non-zero value = wet.</para>
            <para>Rainfall intensity is classified according to the rate of precipitation:</para>
            <list type="bullet">
            <item><description>Light rain — when the precipitation rate is &lt; 2.5 mm (0.098 in) per hour</description></item>
            <item><description>Moderate rain — when the precipitation rate is between 2.5 mm (0.098 in) - 7.6 mm (0.30 in) or 10 mm (0.39 in) per hour</description></item>
            <item><description>Heavy rain — when the precipitation rate is &gt; 7.6 mm (0.30 in) per hour, or between 10 mm (0.39 in) and 50 mm (2.0 in) per hour</description></item>
            <item><description>Violent rain — when the precipitation rate is &gt; 50 mm (2.0 in) per hour</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.SkyBrightness">
            <summary>
            Sky brightness at the observatory
            </summary>
            <value>Sky brightness (Lux)</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            This property returns the sky brightness measured in Lux.
            <para>Luminance Examples in Lux</para>
            <list type="table">
            <listheader>
            <term>Illuminance</term><term>Surfaces illuminated by:</term>
            </listheader>
            <item><description>0.0001 lux</description><description>Moonless, overcast night sky (starlight)</description></item>
            <item><description>0.002 lux</description><description>Moonless clear night sky with air glow</description></item>
            <item><description>0.27–1.0 lux</description><description>Full moon on a clear night</description></item>
            <item><description>3.4 lux</description><description>Dark limit of civil twilight under a clear sky</description></item>
            <item><description>50 lux</description><description>Family living room lights (Australia, 1998)</description></item>
            <item><description>80 lux</description><description>Office building hallway/toilet lighting</description></item>
            <item><description>100 lux</description><description>Very dark overcast day</description></item>
            <item><description>320–500 lux</description><description>Office lighting</description></item>
            <item><description>400 lux</description><description>Sunrise or sunset on a clear day.</description></item>
            <item><description>1000 lux</description><description>Overcast day; typical TV studio lighting</description></item>
            <item><description>10000–25000 lux</description><description>Full daylight (not direct sun)</description></item>
            <item><description>32000–100000 lux</description><description>Direct sunlight</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.SkyQuality">
            <summary>
            Sky quality at the observatory
            </summary>
            <value>Sky quality measured in magnitudes per square arc second</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.StarFWHM">
            <summary>
            Seeing at the observatory measured as the average star full width half maximum (FWHM in arc secs) within a star field.
            </summary>
            <value>Seeing reported as star full width half maximum (arc seconds)</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.SkyTemperature">
            <summary>
            Sky temperature at the observatory
            </summary>
            <value>Sky temperature in °C</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            <para>The units of this property are degrees Celsius. Driver and application authors can use the <see cref="M:ASCOM.Utilities.Util.ConvertUnits(System.Double,ASCOM.Utilities.Units,ASCOM.Utilities.Units)"/> method
            to convert these units to and from degrees Fahrenheit.</para>
            <para>This is expected to be returned by an infra-red sensor looking at the sky. The lower the temperature the more the sky is likely to be clear.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.Temperature">
            <summary>
            Temperature at the observatory
            </summary>
            <value>Temperature in °C</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            <para>The units of this property are degrees Celsius. Driver and application authors can use the <see cref="M:ASCOM.Utilities.Util.ConvertUnits(System.Double,ASCOM.Utilities.Units,ASCOM.Utilities.Units)"/> method
            to convert these units to and from degrees Fahrenheit.</para>
            <para>This is expected to be the ambient temperature at the observatory.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.WindDirection">
            <summary>
            Wind direction at the observatory
            </summary>
            <value>Wind direction (degrees, 0..360.0)</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            The returned value must be between 0.0 and 360.0, interpreted according to the meteorological standard, where a special value of 0.0 is returned when the wind speed is 0.0. 
            Wind direction is measured clockwise from north, through east, where East=90.0, South=180.0, West=270.0 and North=360.0.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.WindGust">
            <summary>
            Peak 3 second wind gust at the observatory over the last 2 minutes
            </summary>
            <value>Wind gust (m/s) Peak 3 second wind speed over the last 2 minutes</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            The units of this property are metres per second. Driver and application authors can use the <see cref="M:ASCOM.Utilities.Util.ConvertUnits(System.Double,ASCOM.Utilities.Units,ASCOM.Utilities.Units)"/> method
            to convert these units to and from miles per hour or knots.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.ObservingConditions.WindSpeed">
            <summary>
            Wind speed at the observatory
            </summary>
            <value>Wind speed (m/s)</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If this property is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional property, can throw a PropertyNotImplementedException</b></p>
            The units of this property are metres per second. Driver and application authors can use the <see cref="M:ASCOM.Utilities.Util.ConvertUnits(System.Double,ASCOM.Utilities.Units,ASCOM.Utilities.Units)"/> method
            to convert these units to and from miles per hour or knots.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.ObservingConditions.TimeSinceLastUpdate(System.String)">
             <summary>
             Provides the time since the sensor value was last updated
             </summary>
             <param name="PropertyName">Name of the property whose time since last update is required</param>
             <returns>Time in seconds since the last sensor update for this property</returns>
             <exception cref="T:ASCOM.MethodNotImplementedException">If the sensor is not implemented.</exception>
             <exception cref="T:ASCOM.InvalidValueException">If an invalid property name parameter is supplied.</exception>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
             <remarks>
             <p style="color:red"><b>Must NOT throw a MethodNotImplementedException when the specified sensor is implemented but must throw a MethodNotImplementedException when the specified sensor is not implemented.</b></p>
            <para>PropertyName must be the name of one of the sensor properties specified in the <see cref="T:ASCOM.DeviceInterface.IObservingConditions"/> interface. If the caller supplies some other value, throw an InvalidValueException.</para>
             <para>Return a negative value to indicate that no valid value has ever been received from the hardware.</para>
             <para>If an empty string is supplied as the PropertyName, the driver must return the time since the most recent update of any sensor. A MethodNotImplementedException must not be thrown in this circumstance.</para>
             </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.ObservingConditions.SensorDescription(System.String)">
            <summary>
            Provides a description of the sensor providing the requested property.
            </summary>
            <param name="PropertyName">Name of the sensor whose description is required</param>
            <returns>The description of the specified sensor.</returns>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the sensor is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid property name parameter is supplied.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Must NOT throw a MethodNotImplementedException when the specified sensor is implemented 
            but must throw a MethodNotImplementedException when the specified sensor is not implemented.</b></p>
            <para>PropertyName must be the name of one of the sensor properties specified in the <see cref="T:ASCOM.DeviceInterface.IObservingConditions"/> interface. If the caller supplies some other value, throw an InvalidValueException.</para>
            <para>If the sensor is implemented, this must return a valid string, even if the driver is not connected, so that applications can use this to determine what sensors are available.</para>
            <para>If the sensor is not implemented, this must throw a MethodNotImplementedException.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.ObservingConditions.Refresh">
            <summary>
            Forces the driver to immediately query its attached hardware to refresh sensor values
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If this method is not available.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected.</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <p style="color:red"><b>Optional method, can throw a MethodNotImplementedException</b></p>
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess.Rotator">
            <summary>
            Provides universal access to Rotator drivers
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.Rotator.#ctor(System.String)">
            <summary>
            Creates a rotator object with the given ProgID
            </summary>
            <param name="rotatorId">ProgID of the rotator to be accessed.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Rotator.Choose(System.String)">
            <summary>
            Brings up the ASCOM Chooser Dialogue to choose a Rotator
            </summary>
            <param name="rotatorId">Rotator ProgID for default or null for None</param>
            <returns>ProgID for chosen Rotator or null for none</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.Rotator.CanReverse">
            <summary>
            Indicates whether the Rotator supports the <see cref="P:ASCOM.DriverAccess.Rotator.Reverse" /> method.
            </summary>
            <returns>
            True if the Rotator supports the <see cref="P:ASCOM.DriverAccess.Rotator.Reverse" /> method.
            </returns>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red;margin-bottom:0"><b>Must be implemented and must always return True for the IRotatorV3 interface or later.</b></p>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Rotator.Halt">
            <summary>
            Immediately stop any Rotator motion due to a previous <see cref="M:ASCOM.DriverAccess.Rotator.Move(System.Single)">Move</see> or <see cref="M:ASCOM.DriverAccess.Rotator.MoveAbsolute(System.Single)">MoveAbsolute</see> method call.
            </summary>
            <remarks>This is an optional method. Raises an error if not supported.</remarks>
            <exception cref="T:ASCOM.MethodNotImplementedException">Throw a MethodNotImplementedException if the rotator cannot halt.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
        </member>
        <member name="P:ASCOM.DriverAccess.Rotator.IsMoving">
            <summary>
            Indicates whether the rotator is currently moving
            </summary>
            <returns>True if the Rotator is moving to a new position. False if the Rotator is stationary.</returns>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red;margin-bottom:0"><b>Must be implemented.</b></p>
            <para>During rotation, <see cref="P:ASCOM.DriverAccess.Rotator.IsMoving" /> must be True, otherwise it must be False.</para>
            <para><b>NOTE</b></para>
            <para>IRotatorV3, released in Platform 6.5, requires this method to be implemented, in previous interface versions implementation was optional.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Rotator.Move(System.Single)">
            <summary>
            Causes the rotator to move Position degrees relative to the current <see cref="P:ASCOM.DriverAccess.Rotator.Position" /> value.
            </summary>
            <param name="Position">Relative position to move in degrees from current <see cref="P:ASCOM.DriverAccess.Rotator.Position" />.</param>
            <exception cref="T:ASCOM.InvalidValueException">If Position is invalid.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red;margin-bottom:0"><b>Must be implemented.</b></p>
            <para>Calling <see cref="M:ASCOM.DriverAccess.Rotator.Move(System.Single)">Move</see> causes the <see cref="P:ASCOM.DriverAccess.Rotator.TargetPosition" /> property to change to the sum of the current angular position
            and the value of the <see cref="P:ASCOM.DriverAccess.Rotator.Position" /> parameter (modulo 360 degrees), then starts rotation to <see cref="P:ASCOM.DriverAccess.Rotator.TargetPosition" />.</para>
            <para><b>NOTE</b></para>
            <para>IRotatorV3, released in Platform 6.5, requires this method to be implemented, in previous interface versions implementation was optional.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Rotator.MoveAbsolute(System.Single)">
            <summary>
            Causes the rotator to move the absolute position of <see cref="P:ASCOM.DriverAccess.Rotator.Position" /> degrees.
            </summary>
            <param name="Position">Absolute position in degrees.</param>
            <exception cref="T:ASCOM.InvalidValueException">If Position is invalid.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red;margin-bottom:0"><b>Must be implemented.</b></p>
            <p style="color:red"><b>SPECIFICATION REVISION - IRotatorV3 - Platform 6.5</b></p>
            <para>
            Calling <see cref="M:ASCOM.DriverAccess.Rotator.MoveAbsolute(System.Single)"/> causes the <see cref="P:ASCOM.DriverAccess.Rotator.TargetPosition" /> property to change to the value of the
            <see cref="P:ASCOM.DriverAccess.Rotator.Position" /> parameter, then starts rotation to <see cref="P:ASCOM.DriverAccess.Rotator.TargetPosition" />. 
            </para>
            <para><b>NOTE</b></para>
            <para>IRotatorV3, released in Platform 6.5, requires this method to be implemented, in previous interface versions implementation was optional.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Rotator.Position">
            <summary>
            Current instantaneous Rotator position, allowing for any sync offset, in degrees.
            </summary>
            <exception cref="T:ASCOM.InvalidValueException">If Position is invalid.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red;margin-bottom:0"><b>Must be implemented.</b></p>
            <p style="color:red"><b>SPECIFICATION REVISION - IRotatorV3 - Platform 6.5</b></p>
            <para>
            Position reports the synced position rather than the mechanical position. The synced position is defined 
            as the mechanical position plus an offset. The offset is determined when the <see cref="M:ASCOM.DriverAccess.Rotator.Sync(System.Single)"/> method is called and must be persisted across driver starts and device reboots.
            </para>
            <para>
            The position is expressed as an angle from 0 up to but not including 360 degrees, counter-clockwise against the
            sky. This is the standard definition of Position Angle. However, the rotator does not need to (and in general will not)
            report the true Equatorial Position Angle, as the attached imager may not be precisely aligned with the rotator's indexing.
            It is up to the client to determine any offset between mechanical rotator position angle and the true Equatorial Position
            Angle of the imager, and compensate for any difference.
            </para>
            <para>
            The <see cref="P:ASCOM.DriverAccess.Rotator.Reverse" /> property is provided in order to manage rotators being used on optics with odd or
            even number of reflections. With the Reverse switch in the correct position for the optics, the reported position angle must
            be counter-clockwise against the sky.
            </para>
            <para><b>NOTE</b></para>
            <para>IRotatorV3, released in Platform 6.5, requires this method to be implemented, in previous interface versions implementation was optional.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Rotator.Reverse">
            <summary>
            Sets or Returns the rotator’s Reverse state.
            </summary>
            <value>True if the rotation and angular direction must be reversed for the optics</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red;margin-bottom:0"><b>Must be implemented.</b></p>
            <para>See the definition of <see cref="P:ASCOM.DriverAccess.Rotator.Position" />.</para>
            <para><b>NOTE</b></para>
            <para>IRotatorV3, released in Platform 6.5, requires this method to be implemented, in previous interface versions implementation was optional.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Rotator.StepSize">
            <summary>
            The minimum StepSize, in degrees.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Throw a PropertyNotImplementedException if the rotator does not know its step size.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red"><b>Optional - can throw a not implemented exception</b></p>
            <para>Raises an exception if the rotator does not intrinsically know what the step size is.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Rotator.TargetPosition">
            <summary>
            The destination position angle for Move() and MoveAbsolute().
            </summary>
            <value>The destination position angle for<see cref="M:ASCOM.DriverAccess.Rotator.Move(System.Single)">Move</see> and <see cref="M:ASCOM.DriverAccess.Rotator.MoveAbsolute(System.Single)">MoveAbsolute</see>.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red;margin-bottom:0"><b>Must be implemented.</b></p>
            <para>Upon calling <see cref="M:ASCOM.DriverAccess.Rotator.Move(System.Single)">Move</see> or <see cref="M:ASCOM.DriverAccess.Rotator.MoveAbsolute(System.Single)">MoveAbsolute</see>, this property immediately changes to the position angle to which the rotator is moving. 
            The value is retained until a subsequent call to <see cref="M:ASCOM.DriverAccess.Rotator.Move(System.Single)">Move</see> or <see cref="M:ASCOM.DriverAccess.Rotator.MoveAbsolute(System.Single)">MoveAbsolute</see>.</para>
            <para><b>NOTE</b></para>
            <para>IRotatorV3, released in Platform 6.5, requires this method to be implemented, in previous interface versions implementation was optional.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Rotator.MechanicalPosition">
            <summary>
            This returns the raw mechanical position of the rotator in degrees.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red"><b>Must be implemented.</b></p>
            <p style="color:red"><b>Introduced in IRotatorV3.</b></p>
            Returns the mechanical position of the rotator, which is equivalent to the IRotatorV2 <see cref="P:ASCOM.DriverAccess.Rotator.Position"/> property. Other clients (beyond the one that performed the sync) 
            can calculate the current offset using this and the <see cref="P:ASCOM.DriverAccess.Rotator.Position"/> value.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Rotator.Sync(System.Single)">
            <summary>
            Syncs the rotator to the specified position angle without moving it. 
            </summary>
            <param name="Position">Synchronised rotator position angle.</param>
            <exception cref="T:ASCOM.InvalidValueException">If Position is invalid.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red"><b>Must be implemented.</b></p>
            <p style="color:red"><b>Introduced in IRotatorV3.</b></p>
            Once this method has been called and the sync offset determined, both the <see cref="M:ASCOM.DriverAccess.Rotator.MoveAbsolute(System.Single)"/> method and the <see cref="P:ASCOM.DriverAccess.Rotator.Position"/> property must function in synced coordinates 
            rather than mechanical coordinates. The sync offset must persist across driver starts and device reboots.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Rotator.MoveMechanical(System.Single)">
            <summary>
            Moves the rotator to the specified mechanical angle. 
            </summary>
            <param name="Position">Mechanical rotator position angle.</param>
            <exception cref="T:ASCOM.InvalidValueException">If Position is invalid.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red"><b>Must be implemented.</b></p>
            <p style="color:red"><b>Introduced in IRotatorV3.</b></p>
            <para>Moves the rotator to the requested mechanical angle, independent of any sync offset that may have been set. This method is to address requirements that need a physical rotation
            angle such as taking sky flats.</para>
            <para>Client applications should use the <see cref="M:ASCOM.DriverAccess.Rotator.MoveAbsolute(System.Single)"/> method in preference to this method when imaging.</para>
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess.SafetyMonitor">
            <summary>
            Provides universal access to SafetyMonitor drivers
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.SafetyMonitor.#ctor(System.String)">
            <summary>
            Creates a SafetyMonitor object with the given Prog ID
            </summary>
            <param name="safetyMonitorId">ProgID of the device to be accessed.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.SafetyMonitor.Choose(System.String)">
            <summary>
            Brings up the ASCOM Chooser Dialogue to choose a SafetyMonitor
            </summary>
            <param name="safetyMonitorId">SafetyMonitor Prog ID for default or null for None</param>
            <returns>Prog ID for chosen SafetyMonitor or null for none</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.SafetyMonitor.IsSafe">
            <summary>
            Indicates whether the monitored state is safe for use.
            </summary>
            <value>True if the state is safe, False if it is unsafe.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
        </member>
        <member name="T:ASCOM.DriverAccess.Switch">
            <summary>
            Defines the ISwitchV2 Interface
            </summary>
            <remarks>
            <para>The Switch interface is used to define a number of 'switch devices'. A switch device can be used to control something, such as a power switch
            or may be used to sense the state of something, such as a limit switch.</para>
            <para>This SwitchV2 interface is an extension of the original Switch interface.  The changes allow devices to have more than two states and
            to distinguish between devices that are writeable and those that are read only.</para>
            <para><b>Compatibility between Switch and SwitchV2 interfaces:</b></para>
            <list type="bullet"><item>Switch devices that implemented the original Switch interface and
            client applications that use the original interface will still work together.</item>
            <item>Client applications that implement the original
            Switch interface should still work with drivers that implement the new interface.</item>
            <item>Client applications that use the new features in this interface
            will not work with drivers that do not implement the new interface.</item>
            </list>
            <para>Each device has a CanWrite method, this is true if it can be written to or false if the device can only be read.</para>
            <para>The new MinSwitchValue, MaxSwitchValue and SwitchStep methods are used to define the range and values that a device can handle.
            This also defines the number of different values - states - that a device can have, from two for a traditional on-off switch, through
            those with a small number of states to those which have many states.</para>
            <para>The SetSwitchValue and GetSwitchValue methods are used to set and get the value of a device as a double.</para>
            <para>There is no fundamental difference between devices with different numbers of states.</para>
            <para><b>Naming Conventions</b></para>
            <para>Each device handled by a Switch is known as a device or switch device for general cases,
            a controller device if it can alter the state of the device and a sensor device if it can only be read.</para>
            <para>For convenience devices are referred to as Boolean if the device can only have two states, and multi-state if it can have more than two values.
            <b>These are treated the same in the interface definition</b>.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.#ctor(System.String)">
            <summary>
            Creates a Switch object with the given Prog ID
            </summary>
            <param name="switchId">ProgID of the Switch device to be accessed.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.Choose(System.String)">
            <summary>
            Brings up the ASCOM Chooser Dialogue to choose a Switch
            </summary>
            <param name="switchId">FilterWheel Prog ID for default or null for None</param>
            <returns>Prog ID for chosen Switch or null for none</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.Switch.MaxSwitch">
            <summary>
            Return the number of switch devices managed by this driver
            </summary>
            <returns>The number of devices managed by this driver.</returns>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException" >An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks><p style="color:red"><b>Must be implemented, must not throw an <see cref="T:ASCOM.PropertyNotImplementedException"/></b></p>
            <para>Devices are numbered from 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</para></remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.GetSwitchName(System.Int16)">
            <summary>
            Return the name of switch device n. This method is mandatory.
            </summary>
            <param name="id">The device number to return</param>
            <returns>
            The name of the device
            </returns>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException" >An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.SetSwitchName(System.Int16,System.String)">
            <summary>
            Sets a switch device name to a specified value.  If the device name cannot
            be set by the application this must return the <see cref="T:ASCOM.MethodNotImplementedException"/> .
            </summary>
            <param name="id">The number of the device whose name is to be set</param>
            <param name="name">The name of the device</param>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the device name cannot be set in the application code.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException" >An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.GetSwitchDescription(System.Int16)">
            <summary>
            Gets the description of the specified switch device. This is to allow a fuller description of
            the device to be returned, for example for a tool tip.
            </summary>
            <param name="id">The number of the device whose description is to be returned</param>
            <returns>
              String giving the device description.
            </returns>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException" >An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks><p style="color:red"><b>Must be implemented, must not throw an ASCOM.MethodNotImplementedException</b></p>
            <para>This method was first introduced in Version 2.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.CanWrite(System.Int16)">
            <summary>
            Reports if the specified switch device can be written to, default true.
            This is false if the device cannot be written to, for example a limit switch or a sensor.
            </summary>
            <param name="id">The number of the device whose write state is to be returned</param>
            <returns>
              <c>true</c> if the device can be written to, otherwise <c>false</c>.
            </returns>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException" >An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red"><b>Must be implemented, must not throw an ASCOM.MethodNotImplementedException</b></p>
            <para>This method was first introduced in Version 2.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.GetSwitch(System.Int16)">
            <summary>
            Return the state of switch device id as a boolean.
            </summary>
            <param name="id">The switch number to return</param>
            <returns>
            True or false
            </returns>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.InvalidOperationException">If the state cannot be read. This is not recommended but it is not always possible to read
            the state from some hardware. Once the state has been set the last state set must be returned.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <p style="color:red"><b>Must be implemented, must not throw an ASCOM.MethodNotImplementedException</b></p>
            <para>All devices must implement this. A multi-state device will return true if the device is at the maximum value, false if the value is at the minimum
            and either true or false as specified by the driver developer for intermediate values.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.SetSwitch(System.Int16,System.Boolean)">
            <summary>
            Sets a switch controller device to the specified state
            If the device cannot be set then throws a <see cref="T:ASCOM.MethodNotImplementedException"/>.
            </summary>
            <param name="id">The number of the device to set</param>
            <param name="state">The required device state</param>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the device cannot be written to (<see cref="M:ASCOM.DriverAccess.Switch.CanWrite(System.Int16)"/> is false).</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <para>The <see cref="M:ASCOM.DriverAccess.Switch.GetSwitchValue(System.Int16)"/> will be set to <see cref="M:ASCOM.DriverAccess.Switch.MaxSwitchValue(System.Int16)" /> if state is true and to <see cref="M:ASCOM.DriverAccess.Switch.MinSwitchValue(System.Int16)" /> if the state is False.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.MaxSwitchValue(System.Int16)">
            <summary>
            Returns the maximum value for this switch device, this must be greater than <see cref="M:ASCOM.DriverAccess.Switch.MinSwitchValue(System.Int16)"/>.
            </summary>
            <param name="id">The device whose value must be returned</param>
            <returns>
            The maximum value to which this device can be set or a read only sensor will return.
            </returns>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <para>Two state devices should return 1.0 as their maximum value.</para>
            <para>This method was first introduced in Version 2.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.MinSwitchValue(System.Int16)">
            <summary>
            Returns the minimum value for this switch device, this must be less than <see cref="M:ASCOM.DriverAccess.Switch.MaxSwitchValue(System.Int16)"/>.
            </summary>
            <param name="id">The device whose value must be returned</param>
            <returns>
            The minimum value to which this device can be set or a read only sensor will return.
            </returns>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <para>Two state devices must return 0.0 as their minimum value.</para>
            <para>This method was first introduced in Version 2.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.SwitchStep(System.Int16)">
            <summary>
            Returns the step size that this device supports. This gives the difference between
            successive values of the device.
            </summary>
            <param name="id">The device number whose value should be returned</param>
            <returns>
            The step size for this device.
            </returns>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <para><see cref="M:ASCOM.DriverAccess.Switch.SwitchStep(System.Int16)"/> must be greater than zero, two state devices must return 1.0.</para>
            <para>The number of states is determined from (<see cref="M:ASCOM.DriverAccess.Switch.MaxSwitchValue(System.Int16)"/> - <see cref="M:ASCOM.DriverAccess.Switch.MinSwitchValue(System.Int16)"/> ) / <see cref="M:ASCOM.DriverAccess.Switch.SwitchStep(System.Int16)"/> + 1,
            this must be an integer, value 2 for a boolean device and more than 2 for a multi-state device.</para>
            <para>SwitchStep, MinSwitchValue and MaxSwitchValue can be used to determine the way the device is controlled and/or displayed,
            for example by setting the number of decimal places or number of states for a display.</para>
            <para>This method was first introduced in Version 2.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.GetSwitchValue(System.Int16)">
            <summary>
            Returns the value for switch device id as a double.
            </summary>
            <param name="id">The device number whose value must be returned</param>
            <returns>The value for this switch, this is expected to be between <see cref="M:ASCOM.DriverAccess.Switch.MinSwitchValue(System.Int16)"/> and
            <see cref="M:ASCOM.DriverAccess.Switch.MaxSwitchValue(System.Int16)"/>.</returns>
            <exception cref="T:ASCOM.InvalidOperationException">If the value cannot be read. This is not recommended but it is not always possible to read
            the value from some hardware. Once the value has been set the last value set must be returned.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <para>This method was first introduced in Version 2.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Switch.SetSwitchValue(System.Int16,System.Double)">
            <summary>
            Set the value for this device as a double.
            If the switch cannot be set then throws a <see cref="T:ASCOM.MethodNotImplementedException"/>.
            If the value is not between the <see cref="M:ASCOM.DriverAccess.Switch.MaxSwitchValue(System.Int16)"/> and <see cref="M:ASCOM.DriverAccess.Switch.MinSwitchValue(System.Int16)"/> then throws an
            <see cref="T:ASCOM.InvalidValueException"/>.
            </summary>
            <param name="id">The switch number whose value must be set</param>
            <param name="value">Value to be set, between <see cref="M:ASCOM.DriverAccess.Switch.MinSwitchValue(System.Int16)"/> and <see cref="M:ASCOM.DriverAccess.Switch.MaxSwitchValue(System.Int16)"/></param>
            <exception cref="T:ASCOM.InvalidValueException">If the value is not between the maximum and minimum.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If id is outside the range 0 to <see cref="P:ASCOM.DriverAccess.Switch.MaxSwitch"/> - 1</exception>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented, if <see cref="M:ASCOM.DriverAccess.Switch.CanWrite(System.Int16)"/> is false.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <para>A value that is intermediate between the values specified by <see cref="M:ASCOM.DriverAccess.Switch.SwitchStep(System.Int16)"/> must be set to an achievable value.</para>
            <para>This method was first introduced in Version 2.</para>
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess.Telescope">
            <summary>
            Implements a telescope class to access any registered ASCOM telescope
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.#ctor(System.String)">
            <summary>
            Creates an instance of the telescope class.
            </summary>
            <param name="telescopeId">The ProgID for the telescope</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.Choose(System.String)">
            <summary>
            The Choose() method returns the DriverID of the selected driver.
            Choose() allows you to optionally pass the DriverID of a "current" driver (you probably save this in the registry),
            and the corresponding telescope type is pre-selected in the Chooser's list.
            In this case, the OK button starts out enabled (lit-up); the assumption is that the pre-selected driver has already been configured. 
            </summary>
            <param name="telescopeId">Optional DriverID of the previously selected telescope that is to be the pre-selected telescope in the list. </param>
            <returns>The DriverID of the user selected telescope. Null if the dialogue is cancelled.</returns>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.AbortSlew">
            <summary>
            Stops a slew in progress.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.ParkedException">If the telescope is parked</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Effective only after a call to <see cref="M:ASCOM.DriverAccess.Telescope.SlewToTargetAsync" />, <see cref="M:ASCOM.DriverAccess.Telescope.SlewToCoordinatesAsync(System.Double,System.Double)" />, <see cref="M:ASCOM.DriverAccess.Telescope.SlewToAltAzAsync(System.Double,System.Double)" />, or <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" />.
            Does nothing if no slew/motion is in progress. 
            Tracking is returned to its pre-slew state.
            Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is true. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanCallBack">
            <summary>
            True if the device supports asynchronous operations event notifications.
            </summary>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.AlignmentMode">
            <summary>
            The alignment mode of the mount.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This is only available for telescope InterfaceVersions 2 and later.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.Altitude">
            <summary>
            The Altitude above the local horizon of the telescope's current position (degrees, positive up)
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.ApertureArea">
            <summary>
            The area of the telescope's aperture, taking into account any obstructions (square meters)
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This is only available for telescope InterfaceVersions 2 and later.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.ApertureDiameter">
            <summary>
            The telescope's effective aperture diameter (meters)
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This is only available for telescope InterfaceVersions 2 and later.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.AtHome">
            <summary>
            True if the telescope is stopped in the Home position. Set only following a FindHome() operation, and reset with any slew operation. This property must be False if the telescope does not support homing. 
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.AtPark">
            <summary>
            True if the telescope has been put into the parked state by the see <see cref="M:ASCOM.DriverAccess.Telescope.Park" /> method. Set False by calling the Unpark() method.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <para>AtPark is True when the telescope is in the parked state. This is achieved by calling the <see cref="M:ASCOM.DriverAccess.Telescope.Park" /> method. When AtPark is true, 
            the telescope movement is stopped (or restricted to a small safe range of movement) and all calls that would cause telescope 
            movement (e.g. slewing, changing Tracking state) must not do so, and must raise an error.</para>
            <para>The telescope is taken out of parked state by calling the <see cref="M:ASCOM.DriverAccess.Telescope.Unpark" /> method. If the telescope cannot be parked, 
            then AtPark must always return False.</para>
            <para>This is only available for telescope InterfaceVersions 2 and later</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.AxisRates(ASCOM.DeviceInterface.TelescopeAxes)">
            <summary>
            A collection of rates at which the telescope may be moved about the specified axis by the <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> method.
            </summary>
            <param name="Axis">The axis about which rate information is desired (TelescopeAxes value)</param>
            <returns>Collection of <see cref="M:ASCOM.DriverAccess.Telescope.AxisRates(ASCOM.DeviceInterface.TelescopeAxes)" /> rate objects</returns>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid Axis is specified</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            See the description of <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> for more information. This method must return an empty collection if <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> is not supported. 
            <para>This is only available for telescope InterfaceVersions 2 and later</para>
            <para>
            Please note that the rate objects must contain absolute non-negative values only. Applications determine the direction by applying a
            positive or negative sign to the rates provided. This obviates the need for the driver to present a duplicate set of negative rates 
            as well as the positive rates.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.Azimuth">
            <summary>
            The azimuth at the local horizon of the telescope's current position (degrees, North-referenced, positive East/clockwise).
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanFindHome">
            <summary>
            True if this telescope is capable of programmed finding its home position (<see cref="M:ASCOM.DriverAccess.Telescope.FindHome" /> method).
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            <para>This is only available for telescope InterfaceVersions 2 and later</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.CanMoveAxis(ASCOM.DeviceInterface.TelescopeAxes)">
             <summary>
             Shows whether the telescope can be controlled about the specified axis via the MoveAxis() method.
             </summary>
             <returns>Boolean - True if the telescope can be controlled about the specified axis via the MoveAxis() method. </returns>
             <exception cref="T:ASCOM.InvalidValueException">If an invalid Axis is specified</exception>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
             <remarks>See the description of MoveAxis() for more information. The (symbolic) values for TelescopeAxes are:
            <bl>
            <li>axisPrimary 0 Primary axis (e.g., Right Ascension or Azimuth)</li>
            <li>axisSecondary 1 Secondary axis (e.g., Declination or Altitude)</li>
            <li>axisTertiary 2 Tertiary axis (e.g. imager rotator/de-rotator)</li>
            </bl></remarks>
             <param name="Axis">Primary, Secondary or Tertiary axis</param>
             <returns>Boolean indicating can or can not move the requested axis</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanPark">
            <summary>
            True if this telescope is capable of programmed parking (<see cref="M:ASCOM.DriverAccess.Telescope.Park" />method)
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            <para>This is only available for telescope InterfaceVersions 2 and later</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanPulseGuide">
            <summary>
            True if this telescope is capable of software-pulsed guiding (via the <see cref="M:ASCOM.DriverAccess.Telescope.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)" /> method)
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSetDeclinationRate">
            <summary>
            True if the <see cref="P:ASCOM.DriverAccess.Telescope.DeclinationRate" /> property can be changed to provide offset tracking in the declination axis.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSetGuideRates">
            <summary>
            True if the guide rate properties used for <see cref="M:ASCOM.DriverAccess.Telescope.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)" /> can be adjusted.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSetPark">
            <summary>
            True if this telescope is capable of programmed setting of its park position (<see cref="M:ASCOM.DriverAccess.Telescope.SetPark" /> method)
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSetPierSide">
            <summary>
            True if the <see cref="P:ASCOM.DriverAccess.Telescope.SideOfPier" /> property can be set, meaning that the mount can be forced to flip.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This will always return False for mounts that do not have to be flipped. 
            May raise an error if the telescope is not connected. 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSetRightAscensionRate">
            <summary>
            True if the <see cref="P:ASCOM.DriverAccess.Telescope.RightAscensionRate" /> property can be changed to provide offset tracking in the right ascension axis.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSetTracking">
            <summary>
            True if the <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> property can be changed, turning telescope sidereal tracking on and off.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSlew">
            <summary>
            True if this telescope is capable of programmed slewing (synchronous or asynchronous) to equatorial coordinates
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            If this is true, then only the synchronous equatorial slewing methods are guaranteed to be supported.
            See the <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAsync" /> property for the asynchronous slewing capability flag. 
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSlewAltAz">
            <summary>
            True if this telescope is capable of programmed slewing (synchronous or asynchronous) to local horizontal coordinates
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            If this is true, then only the synchronous local horizontal slewing methods are guaranteed to be supported.
            See the <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAltAzAsync" /> property for the asynchronous slewing capability flag. 
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSlewAltAzAsync">
            <summary>
            True if this telescope is capable of programmed asynchronous slewing to local horizontal coordinates
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This indicates the asynchronous local horizontal slewing methods are supported.
            If this is True, then <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAltAz" /> will also be true. 
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSlewAsync">
            <summary>
            True if this telescope is capable of programmed asynchronous slewing to equatorial coordinates.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This indicates the asynchronous equatorial slewing methods are supported.
            If this is True, then <see cref="P:ASCOM.DriverAccess.Telescope.CanSlew" /> will also be true.
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSync">
            <summary>
            True if this telescope is capable of programmed syncing to equatorial coordinates.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanSyncAltAz">
            <summary>
            True if this telescope is capable of programmed syncing to local horizontal coordinates
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            May raise an error if the telescope is not connected. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.CanUnpark">
            <summary>
            True if this telescope is capable of programmed unparking (<see cref="M:ASCOM.DriverAccess.Telescope.Unpark" /> method).
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            If this is true, then <see cref="P:ASCOM.DriverAccess.Telescope.CanPark" /> will also be true. May raise an error if the telescope is not connected.
            May raise an error if the telescope is not connected. 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.Declination">
            <summary>
            The declination (degrees) of the telescope's current equatorial coordinates, in the coordinate system given by the <see cref="P:ASCOM.DriverAccess.Telescope.EquatorialSystem" /> property.
            Reading the property will raise an error if the value is unavailable. 
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.DeclinationRate">
             <summary>
             The declination tracking rate (arcseconds per SI second, default = 0.0)
             </summary>
             <exception cref="T:ASCOM.PropertyNotImplementedException">If DeclinationRate Write is not implemented</exception>
             <exception cref="T:ASCOM.InvalidValueException">If an invalid DeclinationRate is specified</exception>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
             <remarks>
             This property, together with <see cref="P:ASCOM.DriverAccess.Telescope.RightAscensionRate" />, provides support for "offset tracking".
             Offset tracking is used primarily for tracking objects that move relatively slowly against the equatorial coordinate system.
             It also may be used by a software guiding system that controls rates instead of using the <see cref="M:ASCOM.DriverAccess.Telescope.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> method. 
             <para>
             <b>NOTES:</b>
             <list type="bullet">
             <list></list>
             <item><description>The property value represents an offset from zero motion.</description></item>
             <item><description>If <see cref="P:ASCOM.DriverAccess.Telescope.CanSetDeclinationRate" /> is False, this property will always return 0.</description></item>
             <item><description>To discover whether this feature is supported, test the <see cref="P:ASCOM.DriverAccess.Telescope.CanSetDeclinationRate" /> property.</description></item>
             <item><description>The supported range of this property is telescope specific, however, if this feature is supported,
             it can be expected that the range is sufficient to allow correction of guiding errors caused by moderate misalignment 
             and periodic error.</description></item>
             <item><description>If this property is non-zero when an equatorial slew is initiated, the telescope should continue to update the slew 
             destination coordinates at the given offset rate.</description></item>
             <item><description>This will allow precise slews to a fast-moving target with a slow-slewing telescope.</description></item>
             <item><description>When the slew completes, the <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" /> and <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" /> properties should reflect the final (adjusted) destination.</description></item>
             <item><description>The units of this property are arcseconds per SI (atomic) second. Please note that for historic reasons the units of the <see cref="P:ASCOM.DriverAccess.Telescope.RightAscensionRate" /> property are seconds of RA per sidereal second.</description></item>
             </list>
             </para>
             <para>
            This is not a required feature of this specification, however it is desirable. 
             </para>
             </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.DestinationSideOfPier(System.Double,System.Double)">
            <summary>
            Predict side of pier for German equatorial mounts
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid RightAscension or Declination is specified.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This is only available for telescope InterfaceVersions 2 and later.
            </remarks>
            <param name="RightAscension">The destination right ascension (hours).</param>
            <param name="Declination">The destination declination (degrees, positive North).</param>
            <returns>The side of the pier on which the telescope would be on if a slew to the given equatorial coordinates is performed at the current instant of time.</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.DoesRefraction">
            <summary>
            True if the telescope or driver applies atmospheric refraction to coordinates.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Either read or write or both properties can throw PropertyNotImplementedException if not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            If this property is True, the coordinates sent to, and retrieved from, the telescope are unrefracted. 
            <para>This is only available for telescope InterfaceVersions 2 and later</para>
            <para>
            <b>NOTES:</b>
            <list type="bullet">
            <item><description>If the driver does not know whether the attached telescope does its own refraction, and if the driver does not itself calculate 
            refraction, this property (if implemented) must raise an error when read.</description></item>
            <item><description>Writing to this property is optional. Often, a telescope (or its driver) calculates refraction using standard atmospheric parameters.</description></item>
            <item><description>If the client wishes to calculate a more accurate refraction, then this property could be set to False and these 
            client-refracted coordinates used.</description></item>
            <item><description>If disabling the telescope or driver's refraction is not supported, the driver must raise an error when an attempt to set 
            this property to False is made.</description></item> 
            <item><description>Setting this property to True for a telescope or driver that does refraction, or to False for a telescope or driver that 
            does not do refraction, shall not raise an error. It shall have no effect.</description></item> 
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.EquatorialSystem">
            <summary>
            Equatorial coordinate system used by this telescope.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Most amateur telescopes use topocentric coordinates.
            This coordinate system is simply the apparent position in the sky
            (possibly uncorrected for atmospheric refraction) for "here and now",
            thus these are the coordinates that one would use with digital setting
            circles and most amateur scopes. More sophisticated telescopes use one of
            the standard reference systems established by professional astronomers.
            The most common is the Julian Epoch 2000 (J2000). 
            These instruments apply corrections for precession,
            nutation, aberration, etc. to adjust the coordinates from the standard system
            to the pointing direction for the time and location of "here and now". 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.FindHome">
            <summary>
            Locates the telescope's "home" position (synchronous)
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanFindHome" /> is False</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Returns only after the home position has been found.
            At this point the <see cref="P:ASCOM.DriverAccess.Telescope.AtHome" /> property will be True.
            Raises an error if there is a problem. 
            Raises an error if AtPark is true. 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.FocalLength">
            <summary>
            The telescope's focal length, meters
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This property may be used by clients to calculate telescope field of view and plate scale when combined with detector pixel size and geometry. 
            <para>This is only available for telescope InterfaceVersions 2 and later</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.GuideRateDeclination">
            <summary>
            The current Declination movement rate offset for telescope guiding (degrees/sec)
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid guide rate is set.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This is the rate for both hardware/relay guiding and the PulseGuide() method. 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            <para>
            <b>NOTES:</b>
            <list type="bullet">
            <item><description>To discover whether this feature is supported, test the <see cref="P:ASCOM.DriverAccess.Telescope.CanSetGuideRates" /> property.</description></item> 
            <item><description>The supported range of this property is telescope specific, however,
            if this feature is supported, it can be expected that the range is sufficient to
            allow correction of guiding errors caused by moderate misalignment and periodic error.</description></item> 
            <item><description>If a telescope does not support separate guiding rates in Right Ascension and Declination,
            then it is permissible for <see cref="P:ASCOM.DriverAccess.Telescope.GuideRateRightAscension" /> and GuideRateDeclination to be tied together.
            In this case, changing one of the two properties will cause a change in the other.</description></item> 
            <item><description>Mounts must start up with a known or default declination guide rate,
            and this property must return that known/default guide rate until changed.</description></item> 
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.GuideRateRightAscension">
             <summary>
             The current Right Ascension movement rate offset for telescope guiding (degrees/sec)
             </summary>
             <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented</exception>
             <exception cref="T:ASCOM.InvalidValueException">If an invalid guide rate is set.</exception>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
             <remarks>
             This is the rate for both hardware/relay guiding and the PulseGuide() method. 
             <para>This is only available for telescope InterfaceVersions 2 and later.</para>
             <para>
             <b>NOTES:</b>
             <list type="bullet">
             <item><description>To discover whether this feature is supported, test the <see cref="P:ASCOM.DriverAccess.Telescope.CanSetGuideRates" /> property.</description></item>  
             <item><description>The supported range of this property is telescope specific, however, if this feature is supported, 
             it can be expected that the range is sufficient to allow correction of guiding errors caused by moderate
             misalignment and periodic error.</description></item>  
             <item><description>If a telescope does not support separate guiding rates in Right Ascension and Declination,
             then it is permissible for GuideRateRightAscension and <see cref="P:ASCOM.DriverAccess.Telescope.GuideRateDeclination" /> to be tied together. 
             In this case, changing one of the two properties will cause a change in the other.</description></item>  
            <item><description> Mounts must start up with a known or default right ascension guide rate,
             and this property must return that known/default guide rate until changed.</description></item>  
             </list>
             </para>
             </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.IsPulseGuiding">
            <summary>
            True if a <see cref="M:ASCOM.DriverAccess.Telescope.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)" /> command is in progress, False otherwise
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If <see cref="P:ASCOM.DriverAccess.Telescope.CanPulseGuide" /> is False</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Raises an error if the value of the <see cref="P:ASCOM.DriverAccess.Telescope.CanPulseGuide" /> property is false
            (the driver does not support the <see cref="M:ASCOM.DriverAccess.Telescope.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)" /> method). 
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)">
            <summary>
            Move the telescope in one axis at the given rate.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid axis or rate is given.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This method supports control of the mount about its mechanical axes.
            The telescope will start moving at the specified rate about the specified axis and continue indefinitely.
            This method can be called for each axis separately, and have them all operate concurrently at separate rates of motion. 
            Set the rate for an axis to zero to restore the motion about that axis to the rate set by the <see cref="P:ASCOM.DriverAccess.Telescope.Tracking"/> property.
            Tracking motion (if enabled, see note below) is suspended during this mode of operation. 
            <para>
            Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is true. 
            This must be implemented for the if the <see cref="M:ASCOM.DriverAccess.Telescope.CanMoveAxis(ASCOM.DeviceInterface.TelescopeAxes)" /> property returns True for the given axis.</para>
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            <para>
            <b>NOTES:</b>
            <list type="bullet">
            <item><description>The movement rate must be within the value(s) obtained from a <see cref="T:ASCOM.DeviceInterface.IRate" /> object in the 
            the <see cref="M:ASCOM.DriverAccess.Telescope.AxisRates(ASCOM.DeviceInterface.TelescopeAxes)" /> collection. This is a signed value with negative rates moving in the opposite direction to positive rates.</description></item>
            <item><description>The values specified in <see cref="M:ASCOM.DriverAccess.Telescope.AxisRates(ASCOM.DeviceInterface.TelescopeAxes)" /> are absolute, unsigned values and apply to both directions, 
            determined by the sign used in this command.</description></item>
            <item><description>An out of range exception is raised the rate is out of range.</description></item>
            <item><description>The value of <see cref="P:ASCOM.DriverAccess.Telescope.Slewing" /> must be True if the telescope is moving 
            about any of its axes as a result of this method being called. 
            This can be used to simulate a hand-box by initiating motion with the
            MouseDown event and stopping the motion with the MouseUp event.</description></item>
            <item><description>When the motion is stopped by setting the rate to zero the scope will be set to the previous 
            <see cref="P:ASCOM.DriverAccess.Telescope.TrackingRate" /> or to no movement, depending on the state of the <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> property.</description></item>
            <item><description>It may be possible to implement satellite tracking by using the <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> method to move the 
            scope in the required manner to track a satellite.</description></item>
            </list>
            </para>
            </remarks>
            <param name="Axis">The physical axis about which movement is desired</param>
            <param name="Rate">The rate of motion (deg/sec) about the specified axis</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.Park">
            <summary>
            Move the telescope to its park position, stop all motion (or restrict to a small safe range), and set <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> to True.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanPark" /> is False</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Raises an error if there is a problem communicating with the telescope or if parking fails. 
            Parking should put the telescope into a state where its pointing accuracy 
            will not be lost if it is power-cycled (without moving it).
            Some telescopes must be power-cycled before unparking.
            Others may be unparked by simply calling the <see cref="M:ASCOM.DriverAccess.Telescope.Unpark" /> method.
            Calling this with <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> = True does nothing (harmless) 
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">
            <summary>
            Moves the scope in the given direction for the given interval or time at
            the rate given by the corresponding guide rate property
            </summary>
            <param name="Direction">The direction in which the guide-rate motion is to be made</param>
            <param name="Duration">The duration of the guide-rate motion (milliseconds)</param>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanPulseGuide" /> is False</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid direction or duration is given.</exception>
            <exception cref="T:ASCOM.InvalidOperationException">If the pulse guide cannot be effected e.g. if the telescope is slewing or is not tracking.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This method returns immediately if the hardware is capable of back-to-back moves e.g. dual-axis moves. For hardware not having dual-axis capability, the method returns only after the move has completed.
            <para>
            <b>NOTES:</b>
            <list type="bullet">
            <item><description>Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is true.</description></item>
            <item><description>The <see cref="P:ASCOM.DriverAccess.Telescope.IsPulseGuiding" /> property must be True during pulse-guiding.</description></item>
            <item><description>The PulseGuide method may throw an <see cref="T:ASCOM.InvalidValueException" /> if called when an incompatible command is already underway e.g. a slew is in progress.</description></item>
            <item><description>The rate of motion for movements about the right ascension axis is specified by the <see cref="P:ASCOM.DriverAccess.Telescope.GuideRateRightAscension" /> property. The rate of motion
            for movements about the declination axis is specified by the <see cref="P:ASCOM.DriverAccess.Telescope.GuideRateDeclination" /> property. These two rates may be tied together into a single rate, depending
            on the driver's implementation and the capabilities of the telescope.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.RightAscension">
            <summary>
            The right ascension (hours) of the telescope's current equatorial coordinates,
            in the coordinate system given by the EquatorialSystem property
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Reading the property will raise an error if the value is unavailable. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.RightAscensionRate">
            <summary>
            The right ascension tracking rate offset from sidereal (seconds per sidereal second, default = 0.0)
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If RightAscensionRate Write is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid rate is set.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This property, together with <see cref="P:ASCOM.DriverAccess.Telescope.DeclinationRate" />, provides support for "offset tracking".
            Offset tracking is used primarily for tracking objects that move relatively slowly
            against the equatorial coordinate system. It also may be used by a software guiding
            system that controls rates instead of using the <see cref="M:ASCOM.DriverAccess.Telescope.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see> method.
            <para>
            <b>NOTES:</b>
            The property value represents an offset from the currently selected <see cref="P:ASCOM.DriverAccess.Telescope.TrackingRate" />. 
            <list type="bullet">
            <item><description>If this property is zero, tracking will be at the selected <see cref="P:ASCOM.DriverAccess.Telescope.TrackingRate" />.</description></item>
            <item><description>If <see cref="P:ASCOM.DriverAccess.Telescope.CanSetRightAscensionRate" /> is False, this property must always return 0.</description></item> 
            To discover whether this feature is supported, test the <see cref="P:ASCOM.DriverAccess.Telescope.CanSetRightAscensionRate" />property. 
            <item><description>The units of this property are seconds of right ascension per sidereal second. Please note that for historic reasons the units of the <see cref="P:ASCOM.DriverAccess.Telescope.DeclinationRate" /> property are arcseconds per SI second.</description></item> 
            <item><description>To convert a given rate in (the more common) units of sidereal seconds
            per UTC (clock) second, multiply the value by 0.9972695677 
            (the number of UTC seconds in a sidereal second) then set the property.
            Please note that these units were chosen for the Telescope V1 standard,
            and in retrospect, this was an unfortunate choice.
            However, to maintain backwards compatibility, the units cannot be changed.
            A simple multiplication is all that's needed, as noted. 
            The supported range of this property is telescope specific, however,
            if this feature is supported, it can be expected that the range
            is sufficient to allow correction of guiding errors
            caused by moderate misalignment and periodic error. </description></item>
            <item><description>If this property is non-zero when an equatorial slew is initiated,
            the telescope should continue to update the slew destination coordinates 
            at the given offset rate. This will allow precise slews to a fast-moving 
            target with a slow-slewing telescope. When the slew completes, 
            the <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" /> and <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" /> properties should
            reflect the final (adjusted) destination. This is not a required
            feature of this specification, however it is desirable. </description></item>
            <item><description>Use the <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> property to enable and disable sidereal tracking (if supported). </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SetPark">
            <summary>
            Sets the telescope Park position to the current telescope position.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanPark" /> is False</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.SideOfPier">
            <summary>
            Indicates the pointing state of the mount.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid side of pier is set.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            <para>For historical reasons, this property's name does not reflect its true meaning. The name will not be changed (so as to preserve 
            compatibility), but the meaning has since become clear. All conventional mounts have two pointing states for a given equatorial (sky) position. 
            Mechanical limitations often make it impossible for the mount to position the optics at given HA/Dec in one of the two pointing 
            states, but there are places where the same point can be reached sensibly in both pointing states (e.g. near the pole and 
            close to the meridian). In order to understand these pointing states, consider the following (thanks to Patrick Wallace for this info):</para>
            <para>All conventional telescope mounts have two axes nominally at right angles. For an equatorial, the longitude axis is mechanical 
            hour angle and the latitude axis is mechanical declination. Sky coordinates and mechanical coordinates are two completely separate arenas. 
            This becomes rather more obvious if your mount is an alt-az, but it's still true for an equatorial. Both mount axes can in principle 
            move over a range of 360 deg. This is distinct from sky HA/Dec, where Dec is limited to a 180 deg range (+90 to -90).  Apart from 
            practical limitations, any point in the sky can be seen in two mechanical orientations. To get from one to the other the HA axis 
            is moved 180 deg and the Dec axis is moved through the pole a distance twice the sky co declination (90 - sky declination).</para>
            <para>Mechanical zero HA/Dec will be one of the two ways of pointing at the intersection of the celestial equator and the local meridian. 
            In order to support Dome slaving, where it is important to know which side of the pier the mount is actually on, ASCOM has adopted the 
            convention that the Normal pointing state will be the state where a German Equatorial mount is on the East side of the pier, looking West, with the 
            counterweights below the optical assembly and that <see cref="F:ASCOM.DeviceInterface.PierSide.pierEast"></see> will represent this pointing state.</para>
            <para>Move your scope to this position and consider the two mechanical encoders zeroed. The two pointing states are, then:
            <list type="table">
            <item><term><b>Normal (<see cref="F:ASCOM.DeviceInterface.PierSide.pierEast"></see>)</b></term><description>Where the mechanical Dec is in the range -90 deg to +90 deg</description></item>
            <item><term><b>Beyond the pole (<see cref="F:ASCOM.DeviceInterface.PierSide.pierWest"></see>)</b></term><description>Where the mechanical Dec is in the range -180 deg to -90 deg or +90 deg to +180 deg.</description></item>
            </list>
            </para>
            <para>"Side of pier" is a "consequence" of the former definition, not something fundamental. 
            Apart from mechanical interference, the telescope can move from one side of the pier to the other without the mechanical Dec 
            having changed: you could track Polaris forever with the telescope moving from west of pier to east of pier or vice versa every 12h. 
            Thus, "side of pier" is, in general, not a useful term (except perhaps in a loose, descriptive, explanatory sense). 
            All this applies to a fork mount just as much as to a GEM, and it would be wrong to make the "beyond pole" state illegal for the 
            former. Your mount may not be able to get there if your camera hits the fork, but it's possible on some mounts. Whether this is useful 
            depends on whether you're in Hawaii or Finland.</para>
            <para>To first order, the relationship between sky and mechanical HA/Dec is as follows:</para>
            <para><b>Normal state:</b>
            <list type="bullet">
            <item><description>HA_sky  = HA_mech</description></item>
            <item><description>Dec_sky = Dec_mech</description></item>
            </list>
            </para>
            <para><b>Beyond the pole</b>
            <list type="bullet">
            <item><description>HA_sky  = HA_mech + 12h, expressed in range ± 12h</description></item>
            <item><description>Dec_sky = 180d - Dec_mech, expressed in range ± 90d</description></item>
            </list>
            </para>
            <para>Astronomy software often needs to know which pointing state the mount is in. Examples include setting guiding polarities 
            and calculating dome opening azimuth/altitude. The meaning of the SideOfPier property, then is:
            <list type="table">
            <item><term><b>pierEast</b></term><description>Normal pointing state</description></item>
            <item><term><b>pierWest</b></term><description>Beyond the pole pointing state</description></item>
            </list>
            </para>
            <para>If the mount hardware reports neither the true pointing state (or equivalent) nor the mechanical declination axis position 
            (which varies from -180 to +180), a driver cannot calculate the pointing state, and *must not* implement SideOfPier.
            If the mount hardware reports only the mechanical declination axis position (-180 to +180) then a driver can calculate SideOfPier as follows:
            <list type="bullet">
            <item><description>pierEast = abs(mechanical declination) &lt;= 90 deg</description></item>
            <item><description>pierWest = abs(mechanical declination) &gt; 90 deg</description></item>
            </list>
            </para>
            <para>It is allowed (though not required) that this property may be written to force the mount to flip. Doing so, however, may change 
            the right ascension of the telescope. During flipping, Telescope.Slewing must return True.</para>
            <para>This property is only available in telescope InterfaceVersions 2 and later.</para>
            <para><b>Pointing State and Side of Pier - Help for Driver Developers</b></para>
            <para>A further document, "Pointing State and Side of Pier", is installed in the Developer Documentation folder by the ASCOM Developer 
            Components installer. This further explains the pointing state concept and includes diagrams illustrating how it relates 
            to physical side of pier for German equatorial telescopes. It also includes details of the tests performed by Conform to determine whether 
            the driver correctly reports the pointing state as defined above.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.SiderealTime">
            <summary>
            The local apparent sidereal time from the telescope's internal clock (hours, sidereal)
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            It is required for a driver to calculate this from the system clock if the telescope 
            has no accessible source of sidereal time. Local Apparent Sidereal Time is the sidereal 
            time used for pointing telescopes, and thus must be calculated from the Greenwich Mean
            Sidereal time, longitude, nutation in longitude and true ecliptic obliquity. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.SiteElevation">
            <summary>
            The elevation above mean sea level (meters) of the site at which the telescope is located
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid elevation is set.</exception>
            <exception cref="T:ASCOM.InvalidOperationException">If the application must set the elevation before reading it, but has not.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Setting this property will raise an error if the given value is outside the range -300 through +10000 metres.
            Reading the property will raise an error if the value has never been set or is otherwise unavailable. 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.SiteLatitude">
            <summary>
            The geodetic(map) latitude (degrees, positive North, WGS84) of the site at which the telescope is located.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid latitude is set.</exception>
            <exception cref="T:ASCOM.InvalidOperationException">If the application must set the latitude before reading it, but has not.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Setting this property will raise an error if the given value is outside the range -90 to +90 degrees.
            Reading the property will raise an error if the value has never been set or is otherwise unavailable. 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.SiteLongitude">
            <summary>
            The longitude (degrees, positive East, WGS84) of the site at which the telescope is located.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid longitude is set.</exception>
            <exception cref="T:ASCOM.InvalidOperationException">If the application must set the longitude before reading it, but has not.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Setting this property will raise an error if the given value is outside the range -180 to +180 degrees.
            Reading the property will raise an error if the value has never been set or is otherwise unavailable.
            Note that West is negative! 
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.SlewSettleTime">
            <summary>
            Specifies a post-slew settling time (sec.).
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid settle time is set.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Adds additional time to slew operations. Slewing methods will not return, 
            and the <see cref="P:ASCOM.DriverAccess.Telescope.Slewing" /> property will not become False, until the slew completes and the SlewSettleTime has elapsed.
            This feature (if supported) may be used with mounts that require extra settling time after a slew. 
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SlewToAltAz(System.Double,System.Double)">
            <summary>
            Move the telescope to the given local horizontal coordinates, return when slew is complete
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAltAz" /> is False</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid azimuth or elevation is given.</exception>
            <exception cref="T:ASCOM.ParkedException">If the telescope is parked</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This Method must be implemented if <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAltAz" /> returns True.
            Raises an error if the slew fails. 
            The slew may fail if the target coordinates are beyond limits imposed within the driver component.
            Such limits include mechanical constraints imposed by the mount or attached instruments,
            building or dome enclosure restrictions, etc.
            <para>
            The <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" /> and <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" /> properties are not changed by this method. 
            Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is True, or if <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> is True. 
            This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
            <param name="Azimuth">Target azimuth (degrees, North-referenced, positive East/clockwise).</param>
            <param name="Altitude">Target altitude (degrees, positive up)</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SlewToAltAzAsync(System.Double,System.Double)">
            <summary>
            This Method must be implemented if <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAltAzAsync" /> returns True.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAltAzAsync" /> is False</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid azimuth or elevation is given.</exception>
            <exception cref="T:ASCOM.ParkedException">If the telescope is parked</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This method should only be implemented if the properties <see cref="P:ASCOM.DriverAccess.Telescope.Altitude" />, <see cref="P:ASCOM.DriverAccess.Telescope.Azimuth" />,
            <see cref="P:ASCOM.DriverAccess.Telescope.RightAscension" />, <see cref="P:ASCOM.DriverAccess.Telescope.Declination" /> and <see cref="P:ASCOM.DriverAccess.Telescope.Slewing" /> can be read while the scope is slewing.
            Raises an error if starting the slew fails. Returns immediately after starting the slew.
            The client may monitor the progress of the slew by reading the <see cref="P:ASCOM.DriverAccess.Telescope.Azimuth" />, <see cref="P:ASCOM.DriverAccess.Telescope.Altitude" />,
            and <see cref="P:ASCOM.DriverAccess.Telescope.Slewing" /> properties during the slew. When the slew completes, Slewing becomes False. 
            The slew may fail if the target coordinates are beyond limits imposed within the driver component.
            Such limits include mechanical constraints imposed by the mount or attached instruments,
            building or dome enclosure restrictions, etc. 
            The <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" /> and <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" /> properties are not changed by this method. 
            <para>
            Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is True, or if <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> is True.</para>
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
            <param name="Azimuth">Azimuth to which to move</param>
            <param name="Altitude">Altitude to which to move to</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SlewToCoordinates(System.Double,System.Double)">
            <summary>
            Move the telescope to the given equatorial coordinates, return when slew is complete
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanSlew" /> is False</exception>
            <exception cref="T:ASCOM.ParkedException">If the telescope is parked</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid RightAscension or Declination is specified</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This Method must be implemented if <see cref="P:ASCOM.DriverAccess.Telescope.CanSlew" /> returns True. Raises an error if the slew fails. 
            The slew may fail if the target coordinates are beyond limits imposed within the driver component.
            Such limits include mechanical constraints imposed by the mount or attached instruments,
            building or dome enclosure restrictions, etc. The target coordinates are copied to
            <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" /> and <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" /> whether or not the slew succeeds. 
            <para>Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is True, or if <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> is False.</para>
            </remarks>
            <param name="RightAscension">The destination right ascension (hours). Copied to <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" />.</param>
            <param name="Declination">The destination declination (degrees, positive North). Copied to <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" />.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SlewToCoordinatesAsync(System.Double,System.Double)">
            <summary>
            Move the telescope to the given equatorial coordinates, return immediately after starting the slew.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAsync" /> is False</exception>
            <exception cref="T:ASCOM.ParkedException">If the telescope is parked</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid RightAscension or Declination is specified</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This method must be implemented if <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAsync" /> returns True. Raises an error if starting the slew failed. 
            Returns immediately after starting the slew. The client may monitor the progress of the slew by reading
            the <see cref="P:ASCOM.DriverAccess.Telescope.RightAscension" />, <see cref="P:ASCOM.DriverAccess.Telescope.Declination" />, and <see cref="P:ASCOM.DriverAccess.Telescope.Slewing" /> properties during the slew. When the slew completes,
            <see cref="P:ASCOM.DriverAccess.Telescope.Slewing" /> becomes False. The slew may fail to start if the target coordinates are beyond limits
            imposed within the driver component. Such limits include mechanical constraints imposed
            by the mount or attached instruments, building or dome enclosure restrictions, etc. 
            <para>The target coordinates are copied to <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" /> and <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" />
            whether or not the slew succeeds. 
            Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is True, or if <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> is False.</para>
            </remarks>
            <param name="RightAscension">The destination right ascension (hours). Copied to <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" />.</param>
            <param name="Declination">The destination declination (degrees, positive North). Copied to <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" />.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SlewToTarget">
            <summary>
            Move the telescope to the <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" /> and <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" /> coordinates, return when slew complete.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanSlew" /> is False</exception>
            <exception cref="T:ASCOM.ParkedException">If the telescope is parked</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This Method must be implemented if <see cref="P:ASCOM.DriverAccess.Telescope.CanSlew" /> returns True. Raises an error if the slew fails. 
            The slew may fail if the target coordinates are beyond limits imposed within the driver component.
            Such limits include mechanical constraints imposed by the mount or attached
            instruments, building or dome enclosure restrictions, etc. 
            Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is True, or if <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> is False. 
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SlewToTargetAsync">
            <summary>
            Move the telescope to the <see cref="P:ASCOM.DriverAccess.Telescope.TargetRightAscension" /> and <see cref="P:ASCOM.DriverAccess.Telescope.TargetDeclination" />  coordinates,
            returns immediately after starting the slew.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAsync" /> is False</exception>
            <exception cref="T:ASCOM.ParkedException">If the telescope is parked</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This Method must be implemented if  <see cref="P:ASCOM.DriverAccess.Telescope.CanSlewAsync" /> returns True.
            Raises an error if starting the slew failed. 
            Returns immediately after starting the slew. The client may
            monitor the progress of the slew by reading the RightAscension, Declination,
            and Slewing properties during the slew. When the slew completes,  <see cref="P:ASCOM.DriverAccess.Telescope.Slewing" /> becomes False. 
            The slew may fail to start if the target coordinates are beyond limits imposed within 
            the driver component. Such limits include mechanical constraints imposed by the mount
            or attached instruments, building or dome enclosure restrictions, etc. 
            Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is True, or if <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> is False. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.Slewing">
            <summary>
            True if telescope is currently moving in response to one of the
            Slew methods or the <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> method, False at all other times.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Reading the property will raise an error if the value is unavailable.
            If the telescope is not capable of asynchronous slewing,
            this property will always be False. 
            The definition of "slewing" excludes motion caused by sidereal tracking,
            <see cref="M:ASCOM.DriverAccess.Telescope.PulseGuide(ASCOM.DeviceInterface.GuideDirections,System.Int32)">PulseGuide</see>, <see cref="P:ASCOM.DriverAccess.Telescope.RightAscensionRate" />, and <see cref="P:ASCOM.DriverAccess.Telescope.DeclinationRate" />.
            It reflects only motion caused by one of the Slew commands, 
            flipping caused by changing the <see cref="P:ASCOM.DriverAccess.Telescope.SideOfPier" /> property, or <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" />. 
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SyncToAltAz(System.Double,System.Double)">
            <summary>
            Matches the scope's local horizontal coordinates to the given local horizontal coordinates.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanSyncAltAz" /> is False</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid azimuth or altitude is given.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This must be implemented if the <see cref="P:ASCOM.DriverAccess.Telescope.CanSyncAltAz" /> property is True. Raises an error if matching fails. 
            <para>Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> is True, or if <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> is True.</para>
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
            <param name="Azimuth">Target azimuth (degrees, North-referenced, positive East/clockwise)</param>
            <param name="Altitude">Target altitude (degrees, positive up)</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SyncToCoordinates(System.Double,System.Double)">
            <summary>
            Matches the scope's equatorial coordinates to the given equatorial coordinates.
            </summary>
            <param name="RightAscension">The corrected right ascension (hours). Copied to the TargetRightAscension property.</param>
            <param name="Declination">The corrected declination (degrees, positive North). Copied to the TargetDeclination property.</param>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanSync" /> is False</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid right ascension or declination is given.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This must be implemented if the <see cref="P:ASCOM.DriverAccess.Telescope.CanSync" /> property is True. Raises an error if matching fails. 
            Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> AtPark is True, or if <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> is False. 
            The way that Sync is implemented is mount dependent and it should only be relied on to improve pointing for positions close to
            the position at which the sync is done.
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.SyncToTarget">
            <summary>
            Matches the scope's equatorial coordinates to the given equatorial coordinates.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanSync" /> is False</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            This must be implemented if the <see cref="P:ASCOM.DriverAccess.Telescope.CanSync" /> property is True. Raises an error if matching fails. 
            Raises an error if <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> AtPark is True, or if <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> is False. 
            The way that Sync is implemented is mount dependent and it should only be relied on to improve pointing for positions close to
            the position at which the sync is done.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.TargetDeclination">
            <summary>
            The declination (degrees, positive North) for the target of an equatorial slew or sync operation
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid declination is set.</exception>
            <exception cref="T:ASCOM.InvalidOperationException">If the property is read before being set for the first time.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Setting this property will raise an error if the given value is outside the range -90 to +90 degrees.
            Reading the property will raise an error if the value has never been set or is otherwise unavailable. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.TargetRightAscension">
            <summary>
            The right ascension (hours) for the target of an equatorial slew or sync operation
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If the property is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid right ascension is set.</exception>
            <exception cref="T:ASCOM.InvalidOperationException">If the property is read before being set for the first time.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Setting this property will raise an error if the given value is outside the range 0 to 24 hours.
            Reading the property will raise an error if the value has never been set or is otherwise unavailable. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.Tracking">
            <summary>
            The state of the telescope's sidereal tracking drive.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If Tracking Write is not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Changing the value of this property will turn the sidereal drive on and off.
            However, some telescopes may not support changing the value of this property
            and thus may not support turning tracking on and off.
            See the <see cref="P:ASCOM.DriverAccess.Telescope.CanSetTracking" /> property. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.TrackingRate">
            <summary>
            The current tracking rate of the telescope's sidereal drive
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If TrackingRate Write is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid drive rate is set.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            Supported rates (one of the <see cref="T:ASCOM.DeviceInterface.DriveRates" />  values) are contained within the <see cref="P:ASCOM.DriverAccess.Telescope.TrackingRates" /> collection.
            Values assigned to TrackingRate must be one of these supported rates. 
            If an unsupported value is assigned to this property, it will raise an error. 
            The currently selected tracking rate be further adjusted via the <see cref="P:ASCOM.DriverAccess.Telescope.RightAscensionRate" /> 
            and <see cref="P:ASCOM.DriverAccess.Telescope.DeclinationRate" /> properties. These rate offsets are applied to the currently 
            selected tracking rate. Mounts must start up with a known or default tracking rate,
            and this property must return that known/default tracking rate until changed.
            <para>If the mount's current tracking rate cannot be determined (for example, 
            it is a write-only property of the mount's protocol), 
            it is permitted for the driver to force and report a default rate on connect.
            In this case, the preferred default is Sidereal rate.</para>
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.TrackingRates">
            <summary>
            Returns a collection of supported <see cref="T:ASCOM.DeviceInterface.DriveRates" /> values that describe the permissible
            values of the <see cref="P:ASCOM.DriverAccess.Telescope.TrackingRate" /> property for this telescope type.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            At a minimum, this must contain an item for <see cref="F:ASCOM.DeviceInterface.DriveRates.driveSidereal" />.
            <para>This is only available for telescope InterfaceVersions 2 and later.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Telescope.UTCDate">
            <summary>
            The UTC date/time of the telescope's internal clock
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">If UTCDate Write is not implemented.</exception>
            <exception cref="T:ASCOM.InvalidValueException">If an invalid <see cref="T:System.DateTime" /> is set.</exception>
            <exception cref="T:ASCOM.InvalidOperationException">When UTCDate is read and the mount cannot provide this property itself and a value has not yet be established by writing to the property.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            The driver must calculate this from the system clock if the telescope has no accessible
            source of UTC time. In this case, the property must not be writeable 
            (this would change the system clock!) and will instead raise an error.
            However, it is permitted to change the telescope's internal UTC clock 
            if it is being used for this property. This allows clients to adjust 
            the telescope's UTC clock as needed for accuracy. Reading the property
            will raise an error if the value has never been set or is otherwise unavailable. 
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Telescope.Unpark">
            <summary>
            Takes telescope out of the Parked state.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">If the method is not implemented and <see cref="P:ASCOM.DriverAccess.Telescope.CanUnpark" /> is False</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception>
            <remarks>
            The state of <see cref="P:ASCOM.DriverAccess.Telescope.Tracking" /> after unparking is undetermined. 
            Valid only after <see cref="M:ASCOM.DriverAccess.Telescope.Park" />.
            Applications must check and change Tracking as needed after unparking. 
            Raises an error if unparking fails. Calling this with <see cref="P:ASCOM.DriverAccess.Telescope.AtPark" /> = False does nothing (harmless) 
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess._Rate">
            <summary>
            Describes a range of rates supported by the MoveAxis() method (degrees/per second)
            These are contained within the AxisRates collection. They serve to describe one or more supported ranges of rates of motion about a mechanical axis. 
            It is possible that the Rate.Maximum and Rate.Minimum properties will be equal. In this case, the Rate object expresses a single discrete rate. 
            Both the Rate.Maximum and Rate.Minimum properties are always expressed in units of degrees per second. 
            </summary>
        </member>
        <member name="P:ASCOM.DriverAccess._Rate.Maximum">
            <summary>
            The maximum rate (degrees per second)
            This must always be a positive number. It indicates the maximum rate in either direction about the axis. 
            </summary>
        </member>
        <member name="P:ASCOM.DriverAccess._Rate.Minimum">
            <summary>
            The minimum rate (degrees per second)
            This must always be a positive number. It indicates the maximum rate in either direction about the axis. 
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess._Rate.Dispose">
            <summary>
            Dispose the late-bound interface, if needed. Will release it via COM
            if it is a COM object, else if native .NET will just dereference it
            for GC.
            </summary>
        </member>
        <member name="T:ASCOM.DriverAccess.TrackingRates">
            <summary>
             Late bound TrackingRates implementation
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.TrackingRates.#ctor(System.Type,System.Object,ASCOM.Utilities.TraceLogger)">
            <summary>
            TrackingRates constructor
            </summary>
            <param name="objTypeScope">The type of the supplied object</param>
            <param name="objScopeLateBound">The object representing the telescope device</param>
            <param name="TraceLog">A pointer to a trace logger in which to record trace information</param>
        </member>
        <member name="P:ASCOM.DriverAccess.TrackingRates.Item(System.Int32)">
            <summary>
            Return a drive rate given its index
            </summary>
            <param name="index">Index position of the item</param>
            <returns>Integer DriveRate enum value</returns>
        </member>
        <member name="M:ASCOM.DriverAccess.TrackingRates.GetEnumerator">
            <summary>
            Returns an enumerator for the driverates object
            </summary>
            <returns>IEnumerator object</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.TrackingRates.Count">
            <summary>
            Returns the number of driverates supported by the telescope 
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.TrackingRates.Dispose">
            <summary>
            Disposes of this object
            </summary>
        </member>
        <member name="T:ASCOM.DriverAccess.AxisRates">
            <summary>
            A collection of rates at which the telescope may be moved about the specified axis by the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> method.
            This is only used if the telescope interface version is 2 or 3
            </summary>
            <remarks><para>See the description of the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> method for more information.</para>
            <para>This method must return an empty collection if <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> is not supported.</para>
            <para>The values used in <see cref="T:ASCOM.DeviceInterface.IRate" /> members must be non-negative; forward and backward motion is achieved by the application
            applying an appropriate sign to the returned <see cref="T:ASCOM.DeviceInterface.IRate" /> values in the <see cref="M:ASCOM.DeviceInterface.ITelescopeV3.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> command.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.AxisRates.#ctor">
            <summary>
            Creates an empty AxisRates object
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.AxisRates.Add(System.Double,System.Double)">
            <summary>
            Adds a new rate to the collection
            </summary>
            <param name="Minimum">The minimum value of this rate range</param>
            <param name="Maximum">The maximum value of this rate range</param>
        </member>
        <member name="P:ASCOM.DriverAccess.AxisRates.Current">
            <summary>
            Returns the current value of the collection
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.AxisRates.MoveNext">
            <summary>
            Moves the pointer to the next element
            </summary>
            <returns>True if the Current will return a valid value</returns>
        </member>
        <member name="M:ASCOM.DriverAccess.AxisRates.Reset">
            <summary>
            Resets the enumerator to its initial position before the first element
            </summary>
        </member>
        <member name="P:ASCOM.DriverAccess.AxisRates.Count">
            <summary>
            Returns the number of rate objects in the collection
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.AxisRates.Dispose">
            <summary>
            Disposes of any external resources acquired by the object
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.AxisRates.GetEnumerator">
            <summary>
            Returns an enumerator to provide access to the collection members
            </summary>
            <returns>IEnumerator object</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.AxisRates.Item(System.Int32)">
            <summary>
            Return information about the rates at which the telescope may be moved about the specified axis by the <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> method.
            </summary>
            <param name="index">The axis about which rate information is desired</param>
            <value>Collection of Rate objects describing the supported rates of motion that can be supplied to the <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> method for the specified axis.</value>
            <returns>Collection of Rate objects </returns>
            <remarks><para>The (symbolic) values for Index (<see cref="T:ASCOM.DeviceInterface.TelescopeAxes" />) are:</para>
            <bl>
            <li><see cref="F:ASCOM.DeviceInterface.TelescopeAxes.axisPrimary"/> 0 Primary axis (e.g., Hour Angle or Azimuth)</li>
            <li><see cref="F:ASCOM.DeviceInterface.TelescopeAxes.axisSecondary"/> 1 Secondary axis (e.g., Declination or Altitude)</li>
            <li><see cref="F:ASCOM.DeviceInterface.TelescopeAxes.axisTertiary"/> 2 Tertiary axis (e.g. imager rotator/de-rotator)</li> 
            </bl>
            </remarks>
        </member>
        <member name="T:ASCOM.DriverAccess.Rate">
            <summary>
            Describes a range of rates supported by the <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> method (degrees/per second)
            These are contained within an <see cref="T:ASCOM.DriverAccess.AxisRates" /> collection and serve to describe one or more supported ranges of rates of motion about a mechanical axis. 
            It is possible that the <see cref="P:ASCOM.DriverAccess.Rate.Maximum" /> and <see cref="P:ASCOM.DriverAccess.Rate.Minimum" /> properties will be equal. In this case, the <see cref="T:ASCOM.DriverAccess.Rate" /> object expresses a single discrete rate. 
            Both the <see cref="P:ASCOM.DriverAccess.Rate.Minimum" />  and <see cref="P:ASCOM.DriverAccess.Rate.Maximum" />  properties are always expressed in units of degrees per second.
            This is only using for Telescope InterfaceVersions 2 and later.
            </summary>
            <remarks>Values used must be non-negative and are scalar values. You do not need to supply complementary negative rates for each positive 
            rate that you specify. Movement in both directions is achieved by the application applying an appropriate positive or negative sign to the 
            rate when it is used in the <see cref="M:ASCOM.DriverAccess.Telescope.MoveAxis(ASCOM.DeviceInterface.TelescopeAxes,System.Double)" /> command.</remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Rate.Maximum">
            <summary>
            The maximum rate (degrees per second)
            This must always be a positive number. It indicates the maximum rate in either direction about the axis. 
            </summary>
        </member>
        <member name="P:ASCOM.DriverAccess.Rate.Minimum">
            <summary>
            The minimum rate (degrees per second)
            This must always be a positive number. It indicates the maximum rate in either direction about the axis. 
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.Rate.Dispose">
            <summary>
            Disposes of any external resources acquired by the rate object
            </summary>
        </member>
        <member name="T:ASCOM.DriverAccess.Video">
            <summary>
            Provides universal access to Video drivers
            </summary>
        </member>
        <member name="M:ASCOM.DriverAccess.Video.#ctor(System.String)">
            <summary>
            Creates a Video object with the given Prog ID
            </summary>
            <param name="videoId">ProgID of the Video to be accessed.</param>
        </member>
        <member name="M:ASCOM.DriverAccess.Video.Choose(System.String)">
            <summary>
            Brings up the ASCOM Chooser Dialogue to choose a Video device
            </summary>
            <param name="videoId">Video Prog ID for default or null for None</param>
            <returns>Prog ID for chosen Video or null for none</returns>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.VideoCaptureDeviceName">
            <summary>
            The name of the video capture device when such a device is used.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>For analogue video this is usually the video capture card or dongle attached to the computer.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.ExposureMax">
            <summary>
            The maximum supported exposure (integration time) in seconds.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            This value is for information purposes only. The exposure cannot be set directly in seconds, use <see cref="P:ASCOM.DeviceInterface.IVideo.IntegrationRate"/> property to change the exposure. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.ExposureMin">
            <summary>
            The minimum supported exposure (integration time) in seconds.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            This value is for information purposes only. The exposure cannot be set directly in seconds, use <see cref="P:ASCOM.DeviceInterface.IVideo.IntegrationRate"/> property to change the exposure. 
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.FrameRate">
            <summary>
            The frame rate at which the camera is running. 
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Analogue cameras run in one of the two fixed frame rates - 25fps for PAL video and 29.97fps for NTSC video. 
            Digital cameras usually can run at a variable frame rate. This value is for information purposes only and cannot be set. The FrameRate has the same value during the entire operation of the device. 
            Changing the <see cref="P:ASCOM.DeviceInterface.IVideo.IntegrationRate"/> property may change the actual variable frame rate but cannot change the return value of this property.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.SupportedIntegrationRates">
            <summary>
            Returns the list of integration rates supported by the video camera.
            </summary>
            <value>The list of supported integration rates in seconds.</value>
            <exception cref="T:ASCOM.NotImplementedException">Must throw exception if camera supports only one integration rate (exposure) that cannot be changed.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Digital and integrating analogue video cameras allow the effective exposure of a frame to be changed. If the camera supports setting the exposure directly i.e. 2.153 sec then the driver must only
            return a range of useful supported exposures. For many video cameras the supported exposures (integration rates) increase by a factor of 2 from a base exposure e.g. 1, 2, 4, 8, 16 sec or 0.04, 0.08, 0.16, 0.32, 0.64, 1.28, 2.56, 5.12, 10.24 sec.
            If the camera supports only one exposure that cannot be changed (such as all non integrating PAL or NTSC video cameras) then this property must throw <see cref="T:ASCOM.PropertyNotImplementedException"/>.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.IntegrationRate">
            <summary>
            Index into the <see cref="P:ASCOM.DeviceInterface.IVideo.SupportedIntegrationRates"/> array for the selected camera integration rate.
            </summary>
            <exception cref="T:ASCOM.InvalidValueException">Must throw an exception if not valid.</exception>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if the camera supports only one integration rate (exposure) that cannot be changed.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <see cref="P:ASCOM.DeviceInterface.IVideo.IntegrationRate"/> can be used to adjust the integration rate (exposure) of the camera, if supported. A 0-based array of strings - <see cref="P:ASCOM.DeviceInterface.IVideo.SupportedIntegrationRates"/>, 
            which correspond to different discrete integration rate settings supported by the camera will be returned. <see cref="P:ASCOM.DeviceInterface.IVideo.IntegrationRate"/> must be set to an integer in this range.
            <para>The driver must default <see cref="P:ASCOM.DeviceInterface.IVideo.IntegrationRate"/> to a valid value when integration rate is supported by the camera. </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.LastVideoFrame">
            <summary>
            Returns an <see cref="T:ASCOM.DeviceInterface.IVideoFrame"/> with its <see cref="P:ASCOM.DeviceInterface.IVideoFrame.ImageArray"/> property populated. 
            </summary>
            <value>The current video frame.</value>
            <exception cref="T:ASCOM.InvalidOperationException">If called before any video frame has been taken.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Video.SensorName">
            <summary>
            Sensor name.
            </summary>
            <returns>The name of sensor used within the camera.</returns>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Returns the name (data-sheet part number) of the sensor, e.g. ICX285AL.  The format is to be exactly as shown on 
            manufacturer data sheet, subject to the following rules. All letter shall be upper-case.  Spaces shall not be included.
            <para>Any extra suffixes that define region codes, package types, temperature range, coatings, grading, colour/monochrome, 
            etc. shall not be included. For colour sensors, if a suffix differentiates different Bayer matrix encodings, it shall be 
            included.</para>
            <para>Examples:</para>
            <list type="bullet">
            	<item><description>ICX285AL-F shall be reported as ICX285</description></item>
            	<item><description>KAF-8300-AXC-CD-AA shall be reported as KAF-8300</description></item>
            </list>
            <para><b>Note:</b></para>
            <para>The most common usage of this property is to select approximate colour balance parameters to be applied to 
            the Bayer matrix of one-shot colour sensors.  Application authors should assume that an appropriate IR cut-off filter is 
            in place for colour sensors.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.IVideo.Connected">connection</see> is established with 
            the camera hardware, to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.SensorType">
             <summary>
             Type of colour information returned by the camera sensor.
             </summary>
             <returns>The <see cref="T:ASCOM.DeviceInterface.SensorType"/> enum value of the camera sensor</returns>
             <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
             <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
               <remarks>
                   <para><see cref="P:ASCOM.DeviceInterface.IVideo.SensorType"/> returns a value indicating whether the sensor is monochrome, or what Bayer matrix it encodes.  
            The following values are defined:</para>
                   <para>
                       <table style="width:76.24%;" cellspacing="0" width="76.24%">
                           <col style="width: 11.701%;"></col>
                           <col style="width: 20.708%;"></col>
                           <col style="width: 67.591%;"></col>
                           <tr>
                               <td colspan="1" rowspan="1" style="width: 11.701%; padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-top-color: #000000; border-top-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid;&#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; &#xA; background-color: #00ffff;" width="11.701%">
                                   <b>Value</b></td>
                               <td colspan="1" rowspan="1" style="width: 20.708%; padding-right: 10px; padding-left: 10px; &#xA; border-top-color: #000000; border-top-style: Solid; &#xA; border-right-style: Solid; border-right-color: #000000; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; &#xA; background-color: #00ffff;" width="20.708%">
                                   <b>Enumeration</b></td>
                               <td colspan="1" rowspan="1" style="width: 67.591%; padding-right: 10px; padding-left: 10px; &#xA; border-top-color: #000000; border-top-style: Solid; &#xA; border-right-style: Solid; border-right-color: #000000; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; &#xA; background-color: #00ffff;" width="67.591%">
                                   <b>Meaning</b></td>
                           </tr>
                           <tr>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            0</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Monochrome</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Camera produces monochrome array with no Bayer encoding</td>
                           </tr>
                           <tr>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            1</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Colour</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Camera produces colour image directly, requiring not Bayer decoding. The monochrome pixels for the R, G and B channels are returned in this order in the <see cref="P:ASCOM.DeviceInterface.IVideoFrame.ImageArray"/>.</td>
                           </tr>
                           <tr>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            2</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            RGGB</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Camera produces RGGB encoded Bayer array images</td>
                           </tr>
                           <tr>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            3</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            CMYG</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Camera produces CMYG encoded Bayer array images</td>
                           </tr>
                           <tr>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            4</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            CMYG2</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Camera produces CMYG2 encoded Bayer array images</td>
                           </tr>
                           <tr>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-left-color: #000000; border-left-style: Solid; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            5</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            LRGB</td>
                               <td style="padding-right: 10px; padding-left: 10px; &#xA; border-right-color: #000000; border-right-style: Solid; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; &#xA; border-right-width: 1px; border-left-width: 1px; border-top-width: 1px; border-bottom-width: 1px; ">
            Camera produces Kodak TRUESENSE Bayer LRGB array images</td>
                           </tr>
                       </table>
                   </para>
                   <para>Please note that additional values may be defined in future updates of the standard, as new Bayer matrices may be created 
            by sensor manufacturers in the future.  If this occurs, then a new enumeration value shall be defined. The pre-existing enumeration 
            values shall not change.
            <para>In the following definitions, R = red, G = green, B = blue, C = cyan, M = magenta, Y = yellow.  The Bayer matrix is 
            defined with X increasing from left to right, and Y increasing from top to bottom. The pattern repeats every N x M pixels for the 
            entire pixel array, where N is the height of the Bayer matrix, and M is the width.</para>
            <para>RGGB indicates the following matrix:</para>
            </para>
            <para>
                       <table style="width:41.254%;" cellspacing="0" width="41.254%">
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #ffffff" width="10%">
                               </td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;&#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 0</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 1</b></td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
                                   <b>Y = 0</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            R</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            G</td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; background-color: #00ffff;" width="10%">
                                   <b>Y = 1</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
            G</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            B</td>
                           </tr>
                       </table>
                   </para>
                   <para>CMYG indicates the following matrix:</para>
                   <para>
                       <table style="width:41.254%;" cellspacing="0" width="41.254%">
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #ffffff" width="10%">
                               </td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;&#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 0</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 1</b></td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
                                   <b>Y = 0</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            Y</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            C</td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; background-color: #00ffff;" width="10%">
                                   <b>Y = 1</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
            G</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            M</td>
                           </tr>
                       </table>
                   </para>
                   <para>CMYG2 indicates the following matrix:</para>
                   <para>
                       <table style="width:41.254%;" cellspacing="0" width="41.254%">
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #ffffff" width="10%">
                               </td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;&#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 0</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 1</b></td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
                                   <b>Y = 0</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            C</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            Y</td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>Y = 1</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            M</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            G</td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
                                   <b>Y = 2</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            C</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            Y</td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; background-color: #00ffff;" width="10%">
                                   <b>Y = 3</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
            G</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
            M</td>
                           </tr>
                       </table>
                   </para>
                   <para>LRGB indicates the following matrix (Kodak TRUESENSE):</para>
                   <para>
                       <table style="width:68.757%;" cellspacing="0" width="68.757%">
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <col style="width: 10%;"></col>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #ffffff" width="10%">
                               </td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px;&#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 0</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 1</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 2</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>X = 3</b></td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
                                   <b>Y = 0</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            L</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            R</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            L</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            G</td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff;" width="10%">
                                   <b>Y = 1</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            R</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            L</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            G</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            L</td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; background-color: #00ffff" width="10%">
                                   <b>Y = 2</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            L</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            G</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; " width="10%">
            L</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-top-color: #000000; border-top-style: Solid;  border-top-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; " width="10%">
            B</td>
                           </tr>
                           <tr valign="top" align="center">
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; background-color: #00ffff;" width="10%">
                                   <b>Y = 3</b></td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
            G</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
            L</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
            B</td>
                               <td colspan="1" rowspan="1" style="width:10%; &#xA; border-top-color: #000000; border-top-style: Solid; border-top-width: 1px; &#xA; border-left-color: #000000; border-left-style: Solid; border-left-width: 1px; &#xA; border-right-color: #000000; border-right-style: Solid; border-right-width: 1px; &#xA; border-bottom-color: #000000; border-bottom-style: Solid; border-bottom=width: 1px;&#xA; " width="10%">
            L</td>
                           </tr>
                       </table>
                   </para>
                   <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.IVideo.Connected">connection</see> is established with the camera hardware, to ensure that 
            the driver is aware of the capabilities of the specific camera model.</para>
               </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.Width">
            <summary>
            Returns the width of the video frame in pixels.
            </summary>
            <value>The video frame width.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            For analogue video cameras working via a frame grabber the dimensions of the video frames may be different than the dimension of the CCD chip
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.Height">
            <summary>
            Returns the height of the video frame in pixels.
            </summary>
            <value>The video frame height.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            For analogue video cameras working via a frame grabber the dimensions of the video frames may be different than the dimension of the CCD chip
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.PixelSizeX">
            <summary>
            Returns the width of the CCD chip pixels in microns.
            </summary>
            <value>The pixel size X if known.</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw exception if not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Video.PixelSizeY">
            <summary>
            Returns the height of the CCD chip pixels in microns.
            </summary>
            <value>The pixel size Y if known.</value>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw exception if not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Video.BitDepth">
            <summary>
            Reports the bit depth the camera can produce.
            </summary>
            <value>The bit depth per pixel. Typical analogue videos are 8-bit while some digital cameras can provide 12, 14 or 16-bit images.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Video.VideoCodec">
            <summary>
            Returns the video codec used to record the video file.
            </summary>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if not implemented.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>For AVI files this is usually the FourCC identifier of the codec- e.g. XVID, DVSD, YUY2, HFYU etc. 
            If the recorded video file doesn't use codecs an empty string must be returned.
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.VideoFileFormat">
            <summary>
            Returns the file format of the recorded video file, e.g. AVI, MPEG, ADV etc.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Video.VideoFramesBufferSize">
            <summary>
            The size of the video frame buffer. 
            </summary>
            <value>The size of the video frame buffer. </value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks><p style="color:red"><b>Must be implemented</b></p> When retrieving video frames using the <see cref="P:ASCOM.DeviceInterface.IVideo.LastVideoFrame" /> property 
            the driver may use a buffer to queue the frames waiting to be read by the client. This property returns the size of the buffer in frames or 
            if no buffering is supported then the value of less than 2 should be returned. The size of the buffer can be controlled by the end user from the driver setup dialogue. 
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Video.StartRecordingVideoFile(System.String)">
            <summary>
            Starts recording a new video file.
            </summary>
            <param name="PreferredFileName">The file name requested by the client. Some systems may not allow the file name to be controlled directly and they should ignore this parameter.</param>
            <returns>The actual file name of the file that is being recorded.</returns>
            <exception cref="T:ASCOM.InvalidOperationException">Must throw exception if the current camera state doesn't allow to begin recording a file.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="M:ASCOM.DriverAccess.Video.StopRecordingVideoFile">
            <summary>
            Stops the recording of a video file.
            </summary>
            <exception cref="T:ASCOM.InvalidOperationException">Must throw exception if the current camera state doesn't allow to stop recording the file or no file is currently being recorded.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
        </member>
        <member name="P:ASCOM.DriverAccess.Video.CameraState">
            <summary>
            Returns the current camera operational state.
            </summary>
            <value>The state of the camera.</value>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            Returns one of the following status information:
            <list type="bullet">
            	<listheader><description>Value  State           Meaning</description></listheader>
            	<item><description>0      CameraRunning	  The camera is running and video frames are available for viewing and recording</description></item>
            	<item><description>1      CameraRecording The camera is running and recording a video</description></item>
            	<item><description>2      CameraError     Camera error condition serious enough to prevent further operations (connection fail, etc.).</description></item>
            </list>
            <para>CameraIdle and CameraBusy are optional states. Free running cameras cannot be stopped and don't have a CameraIdle state. When those cameras are powered they immediately enter CameraRunning state. 
            Some digital cameras or video systems may support operations that take longer to complete. While those longer operations are running the camera will remain in the state it was before the operation started.</para>
            <para>The video camera state diagram is shown below: 
            
            <img src="../media/VideoCamera State Diagram.png"/></para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.GainMax">
            <summary>
            Maximum value of <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/>.
            </summary>
            <value>Short integer representing the maximum gain value supported by the camera.</value>
            <returns>The maximum gain value that this camera supports</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if GainMax is not supported.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>When specifying the gain setting with an integer value, <see cref="P:ASCOM.DeviceInterface.IVideo.GainMax"/> is used in conjunction with <see cref="P:ASCOM.DeviceInterface.IVideo.GainMin"/> to 
            specify the range of valid settings.
            <para><see cref="P:ASCOM.DeviceInterface.IVideo.GainMax"/> shall be greater than <see cref="P:ASCOM.DeviceInterface.IVideo.GainMin"/>. If either is available, then both must be available.</para>
            <para>Please see <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/> for more information.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.IVideo.Connected">connection</see> is established with the camera hardware, to ensure 
            that the driver is aware of the capabilities of the specific camera model.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.GainMin">
            <summary>
            Minimum value of <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/>.
            </summary>
            <returns>The minimum gain value that this camera supports</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if GainMin is not supported.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>When specifying the gain setting with an integer value, <see cref="P:ASCOM.DeviceInterface.IVideo.GainMin"/> is used in conjunction with <see cref="P:ASCOM.DeviceInterface.IVideo.GainMax"/> to 
            specify the range of valid settings.
            <para><see cref="P:ASCOM.DeviceInterface.IVideo.GainMax"/> shall be greater than <see cref="P:ASCOM.DeviceInterface.IVideo.GainMin"/>. If either is available, then both must be available.</para>
            <para>Please see <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/> for more information.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.IVideo.Connected">connection</see> is established with the camera hardware, to ensure 
            that the driver is aware of the capabilities of the specific camera model.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.Gain">
            <summary>
            Index into the <see cref="P:ASCOM.DeviceInterface.IVideo.Gains"/> array for the selected camera gain.
            </summary>
            <value>Short integer index for the current camera gain in the <see cref="P:ASCOM.DeviceInterface.IVideo.Gains"/> string array.</value>
            <returns>Index into the Gains array for the selected camera gain</returns>
            <exception cref="T:ASCOM.InvalidValueException">Must throw an exception if not valid.</exception>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if gain is not supported.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/> can be used to adjust the gain setting of the camera, if supported. There are two typical usage scenarios:
            <ul>
            	<li>Discrete gain video cameras will return a 0-based array of strings - <see cref="P:ASCOM.DeviceInterface.IVideo.Gains"/>, which correspond to different discrete gain settings supported by the camera. <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/> must be set to an integer in this range. <see cref="P:ASCOM.DeviceInterface.IVideo.GainMin"/> and <see cref="P:ASCOM.DeviceInterface.IVideo.GainMax"/> must thrown an exception if 
            this mode is used.</li>
            	<li>Adjustable gain video cameras - <see cref="P:ASCOM.DeviceInterface.IVideo.GainMin"/> and <see cref="P:ASCOM.DeviceInterface.IVideo.GainMax"/> return integers, which specify the valid range for <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/>.</li>
            </ul>
            <para>The driver must default <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/> to a valid value. </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.Gains">
            <summary>
            Gains supported by the camera.
            </summary>
            <returns>An ArrayList of gain names or values</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if Gains is not supported</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks><see cref="P:ASCOM.DeviceInterface.IVideo.Gains"/> provides a 0-based array of available gain settings.
            Typically the application software will display the available gain settings in a drop list. The application will then supply 
            the selected index to the driver via the <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/> property. 
            <para>The <see cref="P:ASCOM.DeviceInterface.IVideo.Gain"/> setting may alternatively be specified using integer values; if this mode is used then <see cref="P:ASCOM.DeviceInterface.IVideo.Gains"/> is invalid 
            and must throw an exception. Please see <see cref="P:ASCOM.DeviceInterface.IVideo.GainMax"/> and <see cref="P:ASCOM.DeviceInterface.IVideo.GainMin"/> for more information.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.IVideo.Connected">connection</see> is established with the camera hardware, 
            to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.GammaMax">
            <summary>
            Maximum value of <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/>.
            </summary>
            <value>Short integer representing the maximum gamma value supported by the camera.</value>
            <returns>The maximum gain value that this camera supports</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if GammaMax is not supported</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>When specifying the gamma setting with an integer value, <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMax"/> is used in conjunction with <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMin"/> to 
            specify the range of valid settings.
            <para><see cref="P:ASCOM.DeviceInterface.IVideo.GammaMax"/> shall be greater than <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMin"/>. If either is available, then both must be available.</para>
            <para>Please see <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/> for more information.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.IVideo.Connected">connection</see> is established with the camera hardware, to ensure 
            that the driver is aware of the capabilities of the specific camera model.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.GammaMin">
            <summary>
            Minimum value of <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/>.
            </summary>
            <returns>The minimum gamma value that this camera supports</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if GammaMin is not supported.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>When specifying the gamma setting with an integer value, <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMin"/> is used in conjunction with <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMax"/> to 
            specify the range of valid settings.
            <para><see cref="P:ASCOM.DeviceInterface.IVideo.GammaMax"/> shall be greater than <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMin"/>. If either is available, then both must be available.</para>
            <para>Please see <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/> for more information.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.IVideo.Connected">connection</see> is established with the camera hardware, to ensure 
            that the driver is aware of the capabilities of the specific camera model.</para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.Gamma">
            <summary>
            Index into the <see cref="P:ASCOM.DeviceInterface.IVideo.Gammas"/> array for the selected camera gamma.
            </summary>
            <value>Short integer index for the current camera gamma in the <see cref="P:ASCOM.DeviceInterface.IVideo.Gammas"/> string array.</value>
            <returns>Index into the Gammas array for the selected camera gamma</returns>
            <exception cref="T:ASCOM.InvalidValueException">Must throw an exception if not valid.</exception>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if gamma is not supported.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/> can be used to adjust the gamma setting of the camera, if supported. There are two typical usage scenarios:
            <ul>
            	<li>Discrete gamma video cameras will return a 0-based array of strings - <see cref="P:ASCOM.DeviceInterface.IVideo.Gammas"/>, which correspond to different discrete gamma settings supported by the camera. <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/> must be set to an integer in this range. <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMin"/> and <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMax"/> must thrown an exception if 
            this mode is used.</li>
            	<li>Adjustable gain video cameras - <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMin"/> and <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMax"/> return integers, which specify the valid range for <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/>.</li>
            </ul>
            <para>The driver must default <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/> to a valid value. </para>
            </remarks>
        </member>
        <member name="P:ASCOM.DriverAccess.Video.Gammas">
            <summary>
            Gammas supported by the camera.
            </summary>
            <returns>An ArrayList of gamma names or values</returns>
            <exception cref="T:ASCOM.PropertyNotImplementedException">Must throw an exception if Gammas is not supported</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks><see cref="P:ASCOM.DeviceInterface.IVideo.Gammas"/> provides a 0-based array of available gamma settings. This list can contain the widely used values of <b>OFF</b>, <b>LO</b> and <b>HI</b> that correspond to gammas of <b>1.00</b>, <b>0.45</b> and <b>0.35</b> as well as other extended values.
            Typically the application software will display the available gamma settings in a drop list. The application will then supply 
            the selected index to the driver via the <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/> property. 
            <para>The <see cref="P:ASCOM.DeviceInterface.IVideo.Gamma"/> setting may alternatively be specified using integer values; if this mode is used then <see cref="P:ASCOM.DeviceInterface.IVideo.Gammas"/> is invalid 
            and must throw an exception. Please see <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMax"/> and <see cref="P:ASCOM.DeviceInterface.IVideo.GammaMin"/> for more information.</para>
            <para>It is recommended that this function be called only after a <see cref="P:ASCOM.DeviceInterface.IVideo.Connected">connection</see> is established with the camera hardware, 
            to ensure that the driver is aware of the capabilities of the specific camera model.</para>
            </remarks>	
        </member>
        <member name="P:ASCOM.DriverAccess.Video.CanConfigureDeviceProperties">
            <summary>
            Returns True if the driver supports custom device properties configuration via the <see cref="M:ASCOM.DeviceInterface.IVideo.ConfigureDeviceProperties"/> method.
            </summary>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks><p style="color:red"><b>Must be implemented</b></p> 
            </remarks>
        </member>
        <member name="M:ASCOM.DriverAccess.Video.ConfigureDeviceProperties">
            <summary>
            Displays a device properties configuration dialogue that allows the configuration of specialized settings.
            </summary>
            <exception cref="T:ASCOM.MethodNotImplementedException">Must throw an exception if the method is not supported.</exception>
            <exception cref="T:ASCOM.NotConnectedException">If the device is not connected</exception>
            <exception cref="T:ASCOM.DriverException">An error occurred that is not described by one of the more specific ASCOM exceptions. The device did not successfully complete the request.</exception> 
            <remarks>
            <para>The dialogue could also provide buttons for cameras that can be controlled via 'on screen display' menus and a set of navigation buttons such as Up, Down, Left, Right and Enter. 
            This dialogue is not intended to be used in unattended mode but can give greater control over video cameras that provide special features. The dialogue may also allow 
            changing standard <see cref="T:ASCOM.DeviceInterface.IVideo"/> interface settings such as Gamma and Gain. If a client software 
            displays any <see cref="T:ASCOM.DeviceInterface.IVideo"/> interface settings then it should take care to keep in sync the values changed by this method and those changed directly via the interface.</para>
            <para>To support automated and unattended control over the specialized device settings or functions available on this dialogue the driver should also allow their control via <see cref="P:ASCOM.DeviceInterface.IVideo.SupportedActions"/>. 
            This dialogue is meant to be used by the applications to allow the user to adjust specialized device settings when those applications don't specifically use the specialized settings in their functionality.</para>
            <para>Examples for specialized settings that could be supported are white balance and sharpness.</para>
            </remarks>
        </member>
    </members>
</doc>
