<Application x:Class="ASCOM.DeviceHub.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
				<ResourceDictionary>
					<ResourceDictionary.MergedDictionaries>
						<ResourceDictionary Source="/PresentationFramework.Aero;component/themes/Aero.NormalColor.xaml" />
						<ResourceDictionary Source="Themes/DevHubMono.xaml"/>
						<!--<ResourceDictionary Source="Themes/generic.xaml"/>-->
					</ResourceDictionary.MergedDictionaries>
				</ResourceDictionary> 
				<ResourceDictionary>
					<ControlTemplate x:Key="MenuItemControlTemplate1" TargetType="{x:Type MenuItem}">
						<Grid SnapsToDevicePixels="True">
							<Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
							<Rectangle x:Name="InnerBorder" Margin="1" RadiusY="2" RadiusX="2"/>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition MinWidth="24" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
									<ColumnDefinition Width="4"/>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="37"/>
									<ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
									<ColumnDefinition Width="17"/>
								</Grid.ColumnDefinitions>
								<ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" Margin="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
								<Border x:Name="GlyphPanel" BorderBrush="#FFCDD3E6" BorderThickness="1" Background="#FFE6EFF4" CornerRadius="3" Height="22" Margin="1" Visibility="Hidden" Width="22">
									<Path x:Name="Glyph" Data="M0,5.1L1.7,5.2 3.4,7.1 8,0.4 9.2,0 3.3,10.8z" Fill="#FF0C12A1" FlowDirection="LeftToRight" Height="11" Width="9"/>
								</Border>
								<ContentPresenter x:Name="CtntPres" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="2" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								<TextBlock Grid.Column="4" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}"/>
							</Grid>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="Icon" Value="{x:Null}">
								<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
							</Trigger>
							<Trigger Property="IsChecked" Value="True">
								<Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
								<Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
							</Trigger>
							<Trigger Property="IsHighlighted" Value="True">

								<!-- This was not easy to find...-->
								<!-- 
				        Since the MenuItem Header is displayed via a ContentPresenter changing the foreground
				        color is trickier. It took a bit of hunting, but it seems that text is displayed in a 
				        TextBlock and that TextBlock.Foreground is an attached property. The following line
				        was added to display the header text in black when highlighted.
					
				        The ContentPresenter, above, was given the name CtntPres.
					
				        No other changes were made to the Template.
			        -->
								<Setter Property="TextBlock.Foreground" TargetName="CtntPres" Value="{DynamicResource NormalTextBrush}" />
								<Setter Property="Fill" TargetName="Bg" Value="{DynamicResource HilightMenuItemBackgroundBrush}" />
								<Setter Property="Stroke" TargetName="Bg" Value="#8071CBF1"/>
								<Setter Property="Stroke" TargetName="InnerBorder" Value="#40FFFFFF"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Foreground" Value="#FF9A9A9A"/>
								<Setter Property="Background" TargetName="GlyphPanel" Value="#FFEEE9E9"/>
								<Setter Property="BorderBrush" TargetName="GlyphPanel" Value="#FFDBD6D6"/>
								<Setter Property="Fill" TargetName="Glyph" Value="#FF848589"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>

					<ControlTemplate x:Key="DeviceHubTabItemTemplate" TargetType="{x:Type TabItem}">
						<Grid SnapsToDevicePixels="True">
							<Border Name="Bd" BorderBrush="{DynamicResource TabItemBorderBrush}" BorderThickness="1,1,1,0" 
									Background="{DynamicResource TabItemBackgroundBrush}" Padding="{TemplateBinding Padding}"  
									CornerRadius="4,4,0,0" >
								<ContentPresenter x:Name="Content" 
									  			ContentTemplate="{TemplateBinding HeaderTemplate}" 
												ContentSource="Header"
												HorizontalAlignment="Center"
												RecognizesAccessKey="True"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												VerticalAlignment="Center" />
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<!-- changes tab background when mouse over -->
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" TargetName="Bd" Value="{DynamicResource TabItemMouseoverBrush}" />
							</Trigger>
							<Trigger Property="IsSelected" Value="True">
								<Setter Property="Panel.ZIndex" Value="1"/>
								<Setter Property="Background" TargetName="Bd" Value="{DynamicResource TabItemSelectedBackgroundBrush}" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="False"/>
									<Condition Property="IsMouseOver" Value="True"/>
								</MultiTrigger.Conditions>
								<Setter Property="BorderBrush" TargetName="Bd" Value="#FF3C7FB1"/>
							</MultiTrigger>
							<Trigger Property="TabStripPlacement" Value="Bottom">
								<Setter Property="BorderThickness" TargetName="Bd" Value="1,0,1,1"/>
								<Setter Property="CornerRadius" TargetName="Bd" Value="0,0,4,4" />
							</Trigger>
							<Trigger Property="TabStripPlacement" Value="Left">
								<Setter Property="BorderThickness" TargetName="Bd" Value="1,1,0,1"/>
								<Setter Property="CornerRadius" TargetName="Bd" Value="4,0,0,4" />
							</Trigger>
							<Trigger Property="TabStripPlacement" Value="Right">
								<Setter Property="BorderThickness" TargetName="Bd" Value="0,1,1,1"/>
								<Setter Property="CornerRadius" TargetName="Bd" Value="0,4,4,0" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="True"/>
									<Condition Property="TabStripPlacement" Value="Top"/>
								</MultiTrigger.Conditions>
								<Setter Property="Margin" Value="-2,-2,-2,-1"/>
								<Setter Property="Margin" TargetName="Content" Value="0,0,0,1"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="True"/>
									<Condition Property="TabStripPlacement" Value="Bottom"/>
								</MultiTrigger.Conditions>
								<Setter Property="Margin" Value="-2,-1,-2,-2"/>
								<Setter Property="Margin" TargetName="Content" Value="0,1,0,0"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="True"/>
									<Condition Property="TabStripPlacement" Value="Left"/>
								</MultiTrigger.Conditions>
								<Setter Property="Margin" Value="-2,-2,-1,-2"/>
								<Setter Property="Margin" TargetName="Content" Value="0,0,1,0"/>
							</MultiTrigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsSelected" Value="True"/>
									<Condition Property="TabStripPlacement" Value="Right"/>
								</MultiTrigger.Conditions>
								<Setter Property="Margin" Value="-1,-2,-2,-2"/>
								<Setter Property="Margin" TargetName="Content" Value="1,0,0,0"/>
							</MultiTrigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							</Trigger>

						</ControlTemplate.Triggers>
					</ControlTemplate>

					<ControlTemplate x:Key="AnimatedExpanderButtonTemplate" TargetType="{x:Type ToggleButton}">
						<Border x:Name="ExpanderButtonBorder"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									Padding="{TemplateBinding Padding}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<Rectangle Fill="Transparent" Grid.ColumnSpan="2"/>
								<Ellipse Name="Circle"
										 Grid.Column="0"
										 Stroke="DarkGray"
										 Width="20"
										 Height="20"
										 HorizontalAlignment="Center"
										 VerticalAlignment="Center" />
								<Path x:Name="Arrow"
										Grid.Column="0"
										Data="M 1,1.5 L 4.5,5 8,1.5"
										Stroke="{DynamicResource ArrowBrush}"
										StrokeThickness="2"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										RenderTransformOrigin="0.5,0.5">
									<Path.RenderTransform>
										<RotateTransform Angle="0"/>
									</Path.RenderTransform>
								</Path>
								<ContentPresenter x:Name="HeaderContent"
                                      Grid.Column="1"
                                      Margin="4,0,0,0"
                                      ContentSource="Content"/>
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<!-- Animate arrow when toggled-->
							<Trigger Property="IsChecked"
                         Value="True">
								<Trigger.EnterActions>
									<BeginStoryboard>
										<Storyboard>
											<DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.3"/>
										</Storyboard>
									</BeginStoryboard>
								</Trigger.EnterActions>
								<Trigger.ExitActions>
									<BeginStoryboard>
										<Storyboard>
											<DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.3"/>
										</Storyboard>
									</BeginStoryboard>
								</Trigger.ExitActions>
							</Trigger>

							<!-- MouseOver, Pressed behaviours-->
							<Trigger Property="IsMouseOver"
                                 Value="true">
								<Setter Property="Stroke"
                                    Value="#FF3C7FB1"
                                    TargetName="Circle"/>
								<Setter Property="Stroke"
                                    Value="#222"
                                    TargetName="Arrow"/>
							</Trigger>
							<Trigger Property="IsPressed"
                                 Value="true">
								<Setter Property="Stroke"
                                    Value="#FF526C7B"
                                    TargetName="Circle"/>
								<Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="Circle"/>
								<Setter Property="Stroke"
                                    Value="#FF003366"
                                    TargetName="Arrow"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>

					<!-- Stretch Out Content Expander's Template,
						 Uses: AnimatedExpanderButtonTemplate from above-->
					<ControlTemplate x:Key="StretchyExpanderTemplate" TargetType="{x:Type Expander}">
						<DockPanel>
							<ToggleButton x:Name="ExpanderButton" 
							  Background="{DynamicResource WindowBackgroundBrush}"
							  Foreground="{DynamicResource NormalTextBrush}"
							  BorderBrush="Transparent"
                              DockPanel.Dock="Top"
                              Template="{StaticResource AnimatedExpanderButtonTemplate}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
							</ToggleButton>
							<ContentPresenter x:Name="ExpanderContent" ContentSource="Content" DockPanel.Dock="Bottom">
								<ContentPresenter.LayoutTransform>
									<ScaleTransform ScaleY="0" ScaleX="0.5"/>
								</ContentPresenter.LayoutTransform>
							</ContentPresenter>
						</DockPanel>
						<ControlTemplate.Triggers>
							<Trigger Property="IsExpanded" Value="True">
								<Trigger.EnterActions>
									<BeginStoryboard>
										<Storyboard>
											<DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"                                                 
                                                 To="1"
                                                 Duration="0:0:0.3"/>
											<DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleX)"                                                 
                                                 To="1"
                                                 Duration="0:0:0.3"/>
										</Storyboard>
									</BeginStoryboard>
								</Trigger.EnterActions>
								<Trigger.ExitActions>
									<BeginStoryboard>
										<Storyboard>
											<DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="0"
                                                 Duration="0:0:0.3"/>
											<DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleX)"
                                                 To="0.5"
                                                 Duration="0:0:0.3"/>
										</Storyboard>
									</BeginStoryboard>
								</Trigger.ExitActions>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>

					<Style x:Key="MyFocusVisual">
						<Setter Property="Control.Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type Control}">
									<Grid Margin="8">
										<Ellipse Name="r1" Stroke="Black" StrokeDashArray="2 2" StrokeThickness="1"/>
										<Border Name="border" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}"
												BorderThickness="1" CornerRadius="2"/>
									</Grid>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
					<Style x:Key="CircleButton" TargetType="Button">
						<Setter Property="OverridesDefaultStyle" Value="True"/>
						<Setter Property="Margin" Value="2"/>
						<Setter Property="FocusVisualStyle" Value="{DynamicResource MyFocusVisual}"/>
						<Setter Property="Background" Value="{DynamicResource RoundButtonFaceBrush}" />
						<Setter Property="Foreground" Value="{DynamicResource NormalTextBrush}" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="Button">
									<Grid>
										<Ellipse Fill="{TemplateBinding Background}"/>
										<Ellipse>
											<Ellipse.Fill>
												<RadialGradientBrush>
													<GradientStop Offset="0" Color="#00000000"/>
													<GradientStop Offset="0.88" Color="#00000000"/>
													<GradientStop Offset="1" Color="#80000000"/>
												</RadialGradientBrush>
											</Ellipse.Fill>
										</Ellipse>
										<Ellipse Margin="8" x:Name="highlightCircle" >
											<Ellipse.Fill >
												<LinearGradientBrush >
													<GradientStop Offset="0" Color="#50FFFFFF"/>
													<GradientStop Offset="0.5" Color="#00FFFFFF"/>
													<GradientStop Offset="1" Color="#50FFFFFF"/>
												</LinearGradientBrush>
											</Ellipse.Fill>
										</Ellipse>
										<ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center"/>
									</Grid>
									<ControlTemplate.Triggers>
										<Trigger Property="IsMouseOver" Value="True">
											<Setter TargetName="highlightCircle" Property="Fill">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.3,0" EndPoint="0.7,1">
														<GradientStop Offset="0" Color="#50FFFFFF"/>
														<GradientStop Offset="0.5" Color="#00FFFFFF"/>
														<GradientStop Offset="1" Color="#50FFFFFF"/>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
											<Setter TargetName="content" Property="RenderTransform">
												<Setter.Value>
													<TranslateTransform Y="0.5" X="0.5"/>
												</Setter.Value>
											</Setter>
										</Trigger>

										<Trigger Property="IsPressed" Value="True">
											<Setter TargetName="highlightCircle" Property="Fill">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.3,0" EndPoint="0.7,1">
														<GradientStop Offset="0" Color="#50FFFFFF"/>
														<GradientStop Offset="0.5" Color="#00FFFFFF"/>
														<GradientStop Offset="1" Color="#50FFFFFF"/>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
											<Setter TargetName="content" Property="RenderTransform">
												<Setter.Value>
													<TranslateTransform Y="0.5" X="0.5"/>
												</Setter.Value>
											</Setter>
										</Trigger>

										<Trigger Property="IsEnabled" Value="False">
											<Setter Property="Foreground" Value="{DynamicResource RoundButtonTextBrush}" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
