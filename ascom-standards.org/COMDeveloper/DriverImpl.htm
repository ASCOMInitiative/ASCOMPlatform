<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- #BeginTemplate "/Templates/Fixed_Fluid.dwt" --><!-- DW6 -->
 
<head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="expires" content="Fri, 1 Jan 1990 00:00:00 GMT">
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="cache-control" content="no-cache, no-store, must-revalidate">

<!-- #BeginEditable "Title" -->
<title>Driver Development</title><!-- #EndEditable -->

<link rel="stylesheet" type="text/css" href="../Styles/Fixed_Fluid.css" />

<script type="text/javascript" language="javascript" src="../jscripts/Navigation.js"></script>

</head>
 
<body>

<div id="banner">
	<img style="position: absolute; top: 20px; left: 20px;" alt="ASCOM Standards for Astronomy" src="../Images/ASCOM-Logo.jpg" />
	
	<div id="breadcrumbs">
	<script type="text/javascript" language="javascript">
	<!-- 
	breadcrumbs(); 
	-->
	</script>
</div>

	<div class="topmenucontainer">
    <script type="text/javascript" language="javascript">
      <!-- 
	        writemainmenu();
	        -->
    </script>
  </div>
</div>



<div id="leftcontent">


	<div class="LeftNav">
	<div class="center"><div class="north"><div class="south">
	<script type="text/javascript" language="javascript">
	<!-- 
	writesubmenu(); 
	-->
	</script>
	
	</div></div></div></div>

	<!-- #BeginEditable "LeftNav" -->	<!-- #EndEditable --></div>
<div id="centercontent">
	<!-- #BeginEditable "MainContent" -->
	<div class="article">
		<p class="note">Before embarking on driver development, you should have the <a href="../Downloads/PlatDevComponents.htm" target="_blank">ASCOM Platform Developer Components</a> installed on your system. Extensive developer documentation, and the installer generator are included in the Developer Components installation. The developer components are provided as a separate download from the Platform itself. </p>

    <h3>Driver Development Notes </h3>
		<p class="note">The worst way to undertake driver development is to use the sources for another	driver.	While it may seem like a shortcut to success, it is almost always a shortcut to troubles, misunderstandings, and propagation of others' mistakes. It can be &quot;the blind leading the blind&quot;. Roll your sleeves up, learn what you need to learn, use the tools <span class="underline">and templates</span>, and do your best.</p>
        <h4>Using the .NET Templates</h4>
			<p>The Platform development team has done quite a bit of work to assist driver developers who use .NET languages. .NET is Microsoft's supported development environment, with C# being the recommended choice of language, and Visual Studio 2022 as the Integrated Development Environment. For those who are starting driver development, it is suggested that you use VS2022 and C#, and use the appropriate driver project template we have provided.</p>
			<p>During installation of the <a href="../Downloads/PlatDevComponents.htm" target="_blank">ASCOM Platform Developer Components</a>, you'll see info on installing the templates which are an Extension in Visual Studio:</p>
			<p align="center"><img src="../Images/TemplateInstall.jpg" width="542" height="433" alt=""/></p>
        
		<p>Once you have the templates installed, when you create a new Project in VS and it asks you for a template, choose the ASCOM template type, then follow the prompts. Along the way you'll see a nice detailed help document appropriate to the device type with a guide on how to go forward from there. </p>
		<h4>Avoiding Running Visual Studio "as Administrator"</h4>
		<p>None of the build process on Visual Studio needs elevated privileges <em>except</em> when having to initially register the COM object in the Windows registry. The need for administrator privileges here is unavoidable for <i>creating the registry entry</i>, but not necessarily to update it after each build. The proces differs depending on whether you are building an in-process loadable driver (DLL) or a separate-process Local Server driver (EXE). </p>
		<p>For a DLL driver,  the VS template has the &quot;Register for COM Interop&quot; flag set on the Build tab (see image below) because the driver has to be registered as a COM component in order for applications to be able to find and use it, and this <em>does</em> require that you run VS as Admin. However, you only need to do this once. After the driver is registered you can uncheck the box and will be able to develop and change the driver in normal mode without any prompts to run as Admin.</p>
		<p align="center"><img src="../Images/TemplateBuildProps.png" width="559" height="166" /></p>
		<p>For a LocalServer (EXE) driver, once it has been built, you need to do a one-off run in an Admin shell</p>
		<pre><em>LocalServer</em>.exe /regserver</pre>
		<p>After that, there is no need to re-register it again. </p>
		<h4>Storage of Driver-Specific Data </h4>
<p>Most drivers will need to save persistent data (e.g. COM port selection). It's highly recommended that you use the DriverHelper.Profile object for this. It has a very simple interface and guarantees that you will get private storage for your persistent data items. It  uses an area of the registry set aside for ASCOM drivers. A browser, the Profile Explorer, is provided in the Platform to help diagnose ASCOM registration issues and to allow inspection and editing of driver-specific data. </p>
			<p>It is possible that the layout of data in the registry will change due to future opperating system restrictions. This already happened twice(!) for Vista and Windows 7. Either way, <span class="underline">if you write directly to the registry you're asking for trouble</span>. Drivers which used the Profile object were <i>unaffected</i> by those changes to the Platform. On the other hand, if you choose to write your own private persistence storage code (e.g. to an XML file) that's fine too. Just be aware that your persistent data will not show (and be editable) in the ASCOM Profile Explorer, which is a useful troubleshooting tool.</p>
        <h4>The Setup Dialog</h4>
			<p>All ASCOM interfaces include a SetupDialog() member. This is intended to display a <i>modal </i> dialog that provides access to device-specific things like COM port selection and controls for device-specific features. Keep in mind that many client programs expect a &quot;perfect&quot; device looking into the driver, and will use the device to support observing. Features like PEC, pointing/tracking models, backlash compensation, etc. that aren't exposed through the standard interface belong in the setup dialog. </p>
			<p>This is a frequent source of confusion and frustration for driver developers, as they want to expose the &quot;value added&quot; features of their device where the driver interface doesn't support those features. Try to resist the temptation to have your driver open a &quot;permanent&quot; modeless window with a bunch of doodads like position or coordinate displays, switches, buttons, etc. The client sofware users will see these windows appear when they connect to the device, and they will think the window is part of the client program. This generates pain for client software developers who get asked for support. It also allows users to change things during normal usage, risking obscure problems and confusion. </p>
	    <h4>Registering (and Unregistering) for ASCOM</h4>
		<p>Besides registering your driver as a Windows Object (COM), it also must be registered for ASCOM in order for it to appear in <a href="Chooser.htm">Chooser</a>. At a minimum, your installer needs do this. <span class="underline">If you use C#.NET or VisualBasic.NET and the templates included with the Platform 2008, this issue is handled in the driver by the template code</span>. Otherwise, if you use the Inno Setup tools included with the Platform Developer Components, it will be done for you. Otherwise, you'll need call the Profile.Register() method during install and the Profile.Unregister() method during uninstall. It's up to you to figure out how to do this with your installer tools. <span class="underline">Be sure to remove the driver's ASCOM Chooser info when the driver is uninstalled</span>. </p>
		<h4> <a name="LocalServer" id="LocalServer"></a>Local Server Pattern: Drivers With Multiple Interfaces &amp; Universal Bit-ness</h4>
		<p>A driver can expose multiple interfaces (for example Telescope and Focuser for a mount that has both pointing and focuser controls). In order for different client programs to use the two interfaces, though, the driver must be a &quot;local server&quot; or executable type Windows Object (COM) server. In order for this type of driver to be accessible from TheSky 6 (via the TeleAPI or DomeAPI plugins), <a href="TheSky.htm">special registry info</a> must be created <span class="underline">and removed</span> by your installer.   If you use C#.NET or VisualBasic.NET and the templates included with the Platform 2008, this issue is handled in the driver by the template code. Otherwise, if you use the Inno Setup tools included with the Platform Developer Components, it will be done for you. Otherwise, it is up to you to figure out how to do this with your installer tools. </p>
	</div>
	<!-- #EndEditable --></div>
<div id="footer">
	Copyright &copy; 1998-2023, The ASCOM Initiative. 
	All rights reserved. </div>

</body>

<!-- #EndTemplate --></html>
