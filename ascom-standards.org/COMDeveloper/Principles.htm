<!-- #BeginTemplate "/Templates/Fixed_Fluid.dwt" --><!-- DW6 -->
<!DOCTYPE html>
 
<head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="expires" content="Fri, 1 Jan 1990 00:00:00 GMT">
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="cache-control" content="no-cache, no-store, must-revalidate">

<!-- #BeginEditable "Title" -->
<title>The General Principle</title><!-- #EndEditable -->
<link rel="stylesheet" type="text/css" href="../Styles/Fixed_Fluid.css" />
<script type="text/javascript" language="javascript" src="../jscripts/Navigation.js"></script>
</head>
 
<body>

<div id="banner">
	<img style="position: absolute; top: 20px; left: 20px;" alt="ASCOM Standards for Astronomy" src="../Images/ASCOM-Logo.jpg" />
	<div id="breadcrumbs">
	<script type="text/javascript" language="javascript">
	<!-- 
		breadcrumbs(); 
	-->
	</script>
	</div>
	<div class="topmenucontainer">
    <script type="text/javascript" language="javascript">
	<!-- 
		writemainmenu();
	-->
    </script>
  	</div>
</div>
<div id="leftcontent">
	<div class="LeftNav">
	<div class="center"><div class="north"><div class="south">
	<script type="text/javascript" language="javascript">
	<!-- 
		writesubmenu(); 
	-->
	</script>
	</div></div></div></div>

	<!-- #BeginEditable "LeftNav" -->
	<!-- #EndEditable -->
</div>
<div id="centercontent">
	<!-- #BeginEditable "MainContent" -->
	<div class="article">
	<h3>The General Principles</h3>
	
	<div class="note">Drivers are system components that are responsible for <span class="underline">hiding all device dependencies</span> from clients via a standard interface.</div> 

	<p>On the surface, you may say "Of course!", but things can become subtle. Let's say your dome control system derives its ShutterStatus from some sensors and the motor state. Now an application calls Dome.OpenShutter() and then starts checking Dome.ShutterStatus to monitor the operation. But in your system, the dome takes a half second to start moving, so your driver reports ShutterClosed for a half second. This is a lie to the application, in fact the shutter is in ShutterOpening state. The application will be faced with a result it doesn't expect: &quot;I asked it to open the shutter, it didn't raise an error, so I should be seeing ShutterOpening or if it's super fast , ShutterOpen. What happened?&quot; It is 100% reasonable for an application to flag a problem when faced with such conflicting info. The real problem is that your driver did not hide the specifics of the shutter control system from the application. Immediately after the call to OpenShutter() returns, the only correct states are ShutterOpening with Slewing true, or ShutterOpen with Slewing false. There must not be any &quot;little bit of time&quot; during which the device will lie to the application through its interface.</p>
<p>It's important to consider what aspects of your target device are exposed to clients. With this in mind, you should review the relevant specification to make sure you aren't exposing low-level limitations or unique requirements to clients. Some of the other sections listed on the left address a few specific instances of this that seem to come up commonly.</p>
	<p class="note"><a name="doitright" id="doitright"></a>Do it correctly or signal an error.</p>
	
	<p>This is the basic &quot;contract&quot; between a driver and its client application. Your driver absolutely <i>must</i> either do what it is asked (including providing a correct and current answer) or signal an error condition for the client to trap. Unless the client gets an error, it will always assume you have done what it requested and continue in its logic under that assumption. This means that the driver must not return &quot;illegal&quot; values for properties in lieu of signaling an error, or &quot;try&quot; to do something and <em>return</em> whether it was done or not. Self-destructive behavior is also prohibited. All modern programming environments operate using out-of-band run time error signalling.</p>
	<p>Here too, things can be subtle. Using Telescope.SlewToCoordinatesAsync() as an example. It is suposed to <em>start</em> the slew (at which time Slewing becomes true):  If the mount knows <em>at that time</em> that it cannot possibly reach the requested coordinates due to the destination being outside the mount's configured or physical limits, then SlewToCoordinatesAsync() must immediately raise an error &quot;I can't possibly do this. It's beyond my limits&quot;. That leaves <em>unforeseen</em> error conditions <em>during</em> the slew... cable snag, wall contact, insufficient power to overcome weight or friction, etc. In that case, if such a condition occurs, the mount is simply in an error state requiring some sort of operator intervention. Any call to the <em>compromised</em> logic in the driver must return an error &quot;I can't give you the answer or do what you want because I have a serious problem that needs your attention&quot;. For example, it would be fine for the driver to return its name or version while in an error state, but if a slew fails then Telescope.Slewing, RightAscension, Declination, Altitude, Azimuth, etc. must return an error.</p>
	<p>It is the application's responsibility to avoid asking the mount to do impossible tasks. One application developer's approach, for example, is to provide the application with its own horizon curve and altitude limit that must be set to prevent asking the mount to do impossible things and to prevent observing through trees, buildings, etc.  </p>
	</div>
	<!-- #EndEditable --></div>
<div id="footer">
	Copyright &copy; 1998-2021, The ASCOM Initiative. 
	All rights reserved.
</div>

</body>

<!-- #EndTemplate --></html>
