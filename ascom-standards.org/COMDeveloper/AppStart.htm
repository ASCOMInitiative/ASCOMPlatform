<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- #BeginTemplate "/Templates/Fixed_Fluid.dwt" --><!-- DW6 -->
 
<head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="expires" content="Fri, 1 Jan 1990 00:00:00 GMT">
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="cache-control" content="no-cache, no-store, must-revalidate">

<!-- #BeginEditable "Title" -->
<title>Applications - Getting Started</title><!-- #EndEditable -->

<link rel="stylesheet" type="text/css" href="../Styles/Fixed_Fluid.css" />

<script type="text/javascript" language="javascript" src="../jscripts/Navigation.js"></script>

</head>
 
<body>

<div id="banner">
	<img style="position: absolute; top: 20px; left: 20px;" alt="ASCOM Standards for Astronomy" src="../Images/ASCOM-Logo.jpg" />
	
	<div id="breadcrumbs">
	<script type="text/javascript" language="javascript">
	<!-- 
	breadcrumbs(); 
	-->
	</script>
</div>

	<div class="topmenucontainer">
    <script type="text/javascript" language="javascript">
      <!-- 
	        writemainmenu();
	        -->
    </script>
  </div>
</div>



<div id="leftcontent">


	<div class="LeftNav">
	<div class="center"><div class="north"><div class="south">
	<script type="text/javascript" language="javascript">
	<!-- 
	writesubmenu(); 
	-->
	</script>
	
	</div></div></div></div>

	<!-- #BeginEditable "LeftNav" -->	<!-- #EndEditable --></div>
<div id="centercontent">
	<!-- #BeginEditable "MainContent" -->
	<div class="article">
	<h3>Applications - Getting Started</h3>
	<p class="note">If you haven't yet read the section <a href="../About/Index.htm">About ASCOM</a>, you should really go there and read it now. Knowing the basics and design philosophy can save you time and frustration compared to starting with pre-conceived ideas and ending up frustrated.<br />
		<br />
	Also see Tom How's excellent video below <a href="#video">ASCOM client astronomy development tutorial and introduction</a>, which takes you through the entire process of developing a program that can control any telescope with an ASCOM driver.</p>
	<p>Using ASCOM drivers differs in detail depending on the language you are using for your application. <a href="../About/CompatLang.htm">Over 20 languages on Windows</a> can use drivers, so it's beyond the scope of this document to describe the details for each. The place to start is the documentation for your language that covers &quot;COM Automation&quot; or &quot;ActiveX&quot;. </p>
	<p>Visual Basic 6 has this built-in and is the simplest to use, however it has been de-supported by Microsoft. C++ is by far the most difficult language from which to use ASCOM drivers (or for that matter, any Windows Object). Since drivers in general only support &quot;late binding&quot;, it's necessary to implement complex IDispatch-based code to call them. The ActiveX Template Library can be a  help, but it's still really difficult. You'll have to write wrapper code and be very careful calling the interface members. The learning curve is steep. Consider how married you are to C++ before starting your new astronomy application development. Consider using a NET language. Beginning with Visual Studio 2010, C# supports late binding, so it's easy to use drivers from C# 2010. Visual Basic .NET has always supported late binding.</p>
	<p>If you are developing in one of the .NET languages, the situation is much better. The <a href="ClientToolkit.htm">ASCOM Client Toolkit</a> is an assembly that greatly simplifies using drivers from .NET. Astronomy software developers wishing to use ASCOM drivers from .NET applications are encouraged to use this library, as it provides not only simplified access to drivers, but also automatic switching between the preferred early-binding interfaces and, for older drivers that don't support it, late-binding. If late binding is needed, the Client Toolkit hides all of the ugly details of calling a driver via its late-bound interface. Your code will always use native .NET class/object syntax.	</p>
	<p>It's very easy to use an ASCOM driver in most languages. The basic steps are:</p>
	<ol>
		<li>Create an instance of the driver</li>
		<li>Optionally, open the driver's setup window, allowing the user to set things like the COM port. The driver will remember these settings.</li>
		<li>Connect to the hardware</li>
		<li>Determine the optional capabilities of the device</li>
		<li>Prepare the device for your use</li>
	</ol>
	<p>At this point you can control the device via the standard interface members (properties and methods). See the interface standard documents installed with the ASCOM Platform (if you included developer content - you're a developer, right?).</p>
	<p>Here's a video by Tom How that takes you through the process of developing a simple astronomy application that can control <span class="underline">any telescope with an ASCOM driver</span>.</p>
	<p  align="center"><a name="video" id="video"></a>
	<iframe width="560" height="315" src="https://www.youtube.com/embed/SfFg5xoVKhg" frameborder="5" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe></p>
	<h4>Hello World in JScript</h4>
	<p>The following script, written in the JScript language, shows how simple it is to control a telescope. We use the Telescope Simulator, part of the ASCOM Platform. The simulator is a Telescope driver; it's a great tool for testing your code. To switch over to talking to some other (real) telescope, all you need to do is change the driver ID from <tt><span style="color: #CF6">ScopeSim.Telescope</span></tt> to <tt><span style="color: #CF6">SomethingElse.Telescope</span></tt>. That's it!</p><pre>
var T = new ActiveXObject(&quot;<span style="color: #CF6;">ScopeSim.Telescope</span>&quot;);    <span style="color: #999999;">// Change for your driver's ID</span>
T.SetupDialog();                                    <span style="color: #999999;">// Comment this out once you set COM port, etc.</span>
T.Connected = true;
WScript.StdOut.WriteLine(&quot;RA = &quot; + T.RightAscension);
WScript.StdOut.WriteLine(&quot;DE = &quot; + T.Declination);
if (T.CanSetTracking &amp;&amp; !T.Tracking)
    T.Tracking = true;
WScript.StdOut.WriteLine(&quot;Slewing to 1 hour east of meridian...&quot;);
T.SlewToCoordinates(T.SiderealTime + 1.0, 0);
WScript.StdOut.WriteLine(&quot;... slew complete&quot;);
WScript.StdOut.Write(&quot;Press Enter to quit and release the driver &quot;);
WScript.StdIn.ReadLine();</pre>
	<p>Create a file <span style="color: #CF6">ASCOMHello.js</span> with this script in it. Open a CMD shell and change to the directory containing the new script file. Run the script with the Windows Script Host <span style="color: #CF6">cscript</span>. This program plays the same role as (e.g.) the Perl or Python interpreters for those panguages.</p>
	<pre>C:\Foo\Bar\&gt; <span style="color: #CF6">cscript ASCOMHello.js
RA = 9.660283023289306
DE = -1.286254097879772e-7
Slewing to 1 hour east of meridian...
... slew complete
Press Enter to quit and release the driver</span>

C:\Foo\Bar\&gt;</pre>
	<p>After typing the command, you'll see the simulator's setup dialog appear, just hit cancel. Next you'll see the simulator in the taskbar, normalize it into view. You should see it slewing (unless it happens to already be pointing at the celestial equator an hour east of the meridian!). In any case, when you see the script's output saying the slew is complete, you can look over the simulator. When you press Enter, the simulator will disappear. </p>
	<p class="note">NOTE: If you are on a 64-bit system, you need to be running this in a 32-bit CMD shell, since the vast majority of drivers are 32-bit. To open a 32-bit CMD shell, run <span style="color: #CF6">C:\Windows\SysWOW64\cmd.exe</span></p>
	<div>
	
	<!-- #EndEditable --></div>
<div id="footer">
	Copyright &copy; 1998-2022, The ASCOM Initiative. 
	All rights reserved. </div>

</body>

<!-- #EndTemplate --></html>
