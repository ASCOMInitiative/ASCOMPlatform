<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- #BeginTemplate "/Templates/Fixed_Fluid.dwt" --><!-- DW6 -->
 
<head>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="expires" content="Fri, 1 Jan 1990 00:00:00 GMT">
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="cache-control" content="no-cache, no-store, must-revalidate">

<!-- #BeginEditable "Title" -->
<title>Projects in Progress</title><!-- #EndEditable -->

<link rel="stylesheet" type="text/css" href="../Styles/Fixed_Fluid.css" />

<script type="text/javascript" language="javascript" src="../jscripts/Navigation.js"></script>

</head>
 
<body>

<div id="banner">
	<img style="position: absolute; top: 20px; left: 20px;" alt="ASCOM Standards for Astronomy" src="../Images/ASCOM-Logo.jpg" />
	
	<div id="breadcrumbs">
	<script type="text/javascript" language="javascript">
	<!-- 
	breadcrumbs(); 
	-->
	</script>
</div>

	<div class="topmenucontainer">
    <script type="text/javascript" language="javascript">
      <!-- 
	        writemainmenu();
	        -->
    </script>
  </div>
</div>



<div id="leftcontent">


	<div class="LeftNav">
	<div class="center"><div class="north"><div class="south">
	<script type="text/javascript" language="javascript">
	<!-- 
	writesubmenu(); 
	-->
	</script>
	
	</div></div></div></div>

	<!-- #BeginEditable "LeftNav" -->	<!-- #EndEditable --></div>
<div id="centercontent">
	<!-- #BeginEditable "MainContent" -->
	<div class="article">
		<!--<h3>Project: ASCOM Video (started April 2012, status: nearing completion, inclusion in Platform 6.1)</h3>
		<p>The new ASCOM interface for video is now available for both video hardware vendors and client software vendors. This provisional standard is currently under development and thus is subject to evolutionary change. The standard can be installed as an SDK that contains the COM interfaces, an IVideo simulator and a client video software with source code in C# .NET. More information about the project can be found on the <a href="http://www.hristopavlov.net/ASCOM/" target="_blank">ASCOM Provisional Video Standard project page.</a> </p>
		
		<h4>How to install ASCOM Provisional Video SDK</h4>
		<p>The installer is available from the project home page. Just download the ASCOM Provisional Video SDK installer via the link below, then run the it.</p>
		<pre style="font-size: larger; text-align: center;"><a href="http://www.hristopavlov.net/ASCOM/ASCOMProvisionalVideoSDK.exe">http://www.hristopavlov.net/ASCOM/ASCOMProvisionalVideoSDK.exe</a></pre>-->
	<h3>September 2021 Update</h3>
	<p>With the introduction of ASCOM Alpaca (see below) lots of new things have been happening within  ASCOM. From now on this page will list only <em>current</em> projects and their status.</p>
	<h3>Developer Tools for Alpaca</h3>
	<p><img src="../Images/AlpacaLogo560.png" width="130" height="103" hspace="8" align="right" /><a href="../AlpacaDeveloper/Alpaca.htm"></a>We are working on a set of tools for developers of Alpaca drivers and clients. The current schedule calls for four deliverables:</p>
	<h4>1. Native Alpaca Device Simulators</h4>
	<p>This will be a single cross-platform executable which will implement native Alpaca simulators for all device types. The simulator suite will run on Linux, Mac, and Windows. Each simulator will be a &quot;reference implementation&quot; of its device type. This means that the behavior of the simulator may be considered &quot;correct&quot; for each operation (though the documentation is always the primary reference for &quot;correct&quot;). Of course the Alpaca simulators may be reached from any ASCOM/COM compatible program on Windows which uses the Chooser and its new automatic COM to Alpaca gateway.</p>
	<h4>2. Cross-Platform Alpaca Device Driver Templates for C# (.NET Core / .NET Standard)</h4>
	<p>We will supply a set of cross-platform (skeleton) templates for developing Alpaca drivers in C# using .NET Core and .NET Standard as appropriate. These language technologies are fully cross-platform except for the GUI that is needed for device configuration. However the templates will  provide the hooks for providing HTML/HTTP-based (and thus universal) device setup user interfaces in the drivers. The templates will allow developers to make drivers for any Alpaca defined device while being certain that their driver supports the interface and error specifications. Of course the implementation of each interface member is up to the individual device and its developer.</p>
	<h4>3. Cross-Platform .NET Core and .NET Standard Libraries for Developers</h4>
	<p>One of the deliverables from the previous two projects will be a set of cross-platform libraries that client and driver developers may use to build programs and special purpose applications that use the Alpaca protocol and interface standards. At present the details of this project are not frozen. We expect the above two projects to provide both ideas and deliverables as collateral outputs.</p>
	<h3>Enhancements to Alpaca Documentation</h3>
	<p>At present, Alpaca documentation is limited to the specifications of the protocols, JSON data structures, and error definitions. This project will enhance the documentation with clarifications of the specifications based on real world experiences, road maps for developers, and other information that has been found to be lacking by developers not part of the core ASCOM group. We are looking for volunteers who have first-hand experience and who are willing to help wtih this.</p>
<!--	<h3>Sample Python/Alpaca Rotator Simulator </h3>
	<p>This is a sample Python 3 based Alpaca Rotator simulator that implements four rotators and which may be run on any platform that runs Python 3. The intention of this project is to serve as a template for Python Alpaca device developers. It passes Conform while being run on a Raspberry Pi and Windows. The sample also implements a device Home page, a Server level settings page, and four device pages for settings specific to each of the four rotators it implements. The number of rotators may be increased or decreased with a 1-line chnge in the Python source. In addition it provides a self-documenting API in the Swagger-UI style similar to that provided <a href="https://ascom-standards.org/api/" target="_new">here on the ASCOM web site</a> except it is fully functional for controlling the simulator via Alpaca's REST-like API. This is in a late stage of development. Field testing should begin in 2021. </p>
-->
		<h3>Updates to Deprecate Synchronous Operations</h3>
<p>Early in ASCOM's history, the interfaces were designed with &quot;synchronous&quot; functions as a convenience. This means that calling a function, for example SlewToTarget(), would not return until the operation, the slew in this case, is complete. Thus a synchronous function call could take minutes before it returns. 20 years later, and with the Alpaca protocols rapidly gaining acceptance and usage, synchronous function calls present a real problem. Furthermore, there are some functions in the interfaces for which it is &quot;up in the air&quot; whether it must be asynchronous or not. </p>
		<p>For example, the Telescope.Park() function has a companion property Telescope.AtPark. Even so, some Telescope systems implement Park() as a synchronous operation where it could take minutes to return. We are currently studying various approaches to this problem, all of which will involve deprecating synchronous operations. It will take time, and it will have impact on applications which use synchronous calls, or depend on implicit synchronous behaviors (the latter is a bad idea today). This project is in the study phase.</p>
		<h3>Soliciting Developer Satisfaction Feedback</h3>
		<p>During May, June, and July (2019), we conducted surveys of application developers, and separately, device developers. The purpose of the surveys was to determine the level of satisfaction with the ASCOM standard interfaces and the ASCOM-provided support libraries and tools. The response was excellent compared to a typical survey response, showing that the developers want to be heard. We asked if the interfaces were sufficient to cover the routine (night-to-night) usages of the devices, and if there were things they would like to see added. One outcome was the Rotator Interface Update described above. But the vast majority of responses indicated that the interfaces meet the design objective of  providing the functions needed by applications for day to day use. We will conduct another survey like this in the Summer of 2021.</p>
		<!--<p>As background, Software Bisque has implemented a <a href="http://www.bisque.com/x2standard/" target="_blank">cross-platform plugin architecture called X2</a> that provides interfacing with astronomical devices from TheSky X Pro. The ASCOM X2 Integration project  developed generic X2 drivers that convert from X2 to ASCOM, allowing TheSky X to take advantage of the many existing ASCOM drivers. The new X2 drivers  replace the old <a href="../FAQs/TheSky.htm#teleapi">TeleAPI</a>, FocusAPI, and DomeAPI plugins that are legacy from TheSky 6. For info on how ASCOM and TheSky interoperate, see our FAQ <a href="../FAQs/TheSky.htm" target="_blank">Working WIth TheSky</a>. The X2 interfaces provide a <span class="underline">much richer</span> set of capabilities, allowing TheSky X to take advantage of more features of devices via their ASCOM drivers.  There are X2 to ASCOM plugins available . Thanks to Evan Warkentine for most of these plugins, and to Bob Denny for the original mount plugin. Over the first part of 2013, Software Bisque and Evan Warkentine teamed up to merge these plugins into TheSky X so they are now a standard part of TheSky X.  </p>-->
	</div>
	<!-- #EndEditable --></div>
<div id="footer">
	Copyright &copy; 1998-2022, The ASCOM Initiative. 
	All rights reserved. </div>

</body>

<!-- #EndTemplate --></html>
