using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;

namespace FindGUIDs
{
    partial class Program
    {

        static string searchPath = @"..\..\..\..";

        static string outputFileName = @"..\..\..\Remove ASCOM\GUIDList.vb";

        static void Main(string[] args)
        {

            using (TraceLogger TL = new TraceLogger("", "FindGUIDs"))
            {
                try
                {
                    TL.Enabled = true;
                    if (args.Length > 0)
                    {
                        searchPath = args[0];
                        outputFileName = args[0] + @"\Remove ASCOM\GUIDList.vb";
                    }

                    TL.LogMessage("Main", "Search path: " + Path.GetFullPath(searchPath));
                    TL.LogMessage("Main", "Output file: " + Path.GetFullPath(outputFileName));

                    RegexOptions options = RegexOptions.IgnoreCase;

                    Regex g = new Regex(@"(Guid\(\"")([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})""", options); //[Guid(   <Guid(  [Guid("0EF59E5C-2715-4E91-8A5E-38FE388B4F00")]

                    List<string> files = new List<string>(Directory.GetFiles(searchPath, "*.cs*", SearchOption.AllDirectories));

                    TL.LogMessage("Main", "Number of C# files found: " + files.Count);
                    files.AddRange(new List<string>(Directory.GetFiles(searchPath, "*.vb*", SearchOption.AllDirectories)));
                    TL.LogMessage("Main", "Total files found: " + files.Count);

                    StreamWriter outputFile = new StreamWriter(outputFileName);


                    outputFile.WriteLine(@"' ***** WARNING ***** WARNING ***** WARNING *****");
                    outputFile.WriteLine(" ");
                    outputFile.WriteLine(@"' This class is dynamically generated by the FindGUIDs Program.");
                    outputFile.WriteLine(@"' Do not alter this class, alter the FindGUIDs program instead and your changes will appear when the next build is made.");
                    outputFile.WriteLine(" ");
                    outputFile.WriteLine("Imports System.Collections.Generic");
                    outputFile.WriteLine(" ");
                    outputFile.WriteLine("Class GUIDList");
                    outputFile.WriteLine("    Shared Function Members(TL as TraceLogger) As SortedList(Of String, String)");
                    outputFile.WriteLine("        Dim guids As SortedList(Of String, String)");
                    outputFile.WriteLine("        guids = New SortedList(Of String, String)");

                    foreach (string file in files)
                    {
                        //TL.LogMessage("Main", "Found: " + file);
                        if (!file.Contains(Path.GetFileName(outputFileName)))
                        {
                            List<string> lines = new List<string>(File.ReadAllLines(file));
                            foreach (string line in lines)
                            {
                                Match m = g.Match(line);
                                if (m.Success)
                                {
                                    TL.LogMessage("Main", "Match: " + m.Groups[2] + " in: " + file);
                                    outputFile.WriteLine("        Try : guids.Add(\"" + m.Groups[2] + "\", \"" + Path.GetFullPath(file) + "\") :TL.LogMessage(\"GUIDLIst\",\"Added GUID: \" + \"" + m.Groups[2] + "\") : Catch ex As ArgumentException : TL.LogMessage(\"GUIDLIst\",\"Duplicate GUID: \" + \"" + m.Groups[2] + "\"):End Try");
                                }
                            }
                        }
                    }

                    outputFile.WriteLine("        Return guids");
                    outputFile.WriteLine("    End Function");
                    outputFile.WriteLine("End Class");

                    outputFile.Flush();
                    outputFile.Close();

                }
                catch (Exception ex)
                {
                    TL.LogMessageCrLf("Main", "Exception: " + ex.ToString());
                }
            }

        }
    }
}
