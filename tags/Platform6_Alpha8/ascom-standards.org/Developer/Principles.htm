<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- #BeginTemplate "/Templates/Fixed_Fluid.dwt" --><!-- DW6 -->
 
<head><!-- #BeginEditable "Title" -->
<title>The General Principle</title><!-- #EndEditable -->

<link rel="stylesheet" type="text/css" href="../Styles/Fixed_Fluid.css" />

<script type="text/javascript" language="javascript" src="../jscripts/Navigation.js"></script>

</head>
 
<body>

<div id="banner">
	<img style="position: absolute; top: 20px; left: 20px;" alt="ASCOM Standards for Astronomy" src="../Images/ASCOM-Logo.jpg" />
	
	<div id="breadcrumbs">
	<script type="text/javascript" language="javascript">
	<!-- 
	breadcrumbs(); 
	-->
	</script>
</div>

	<div class="topmenucontainer">
    <script type="text/javascript" language="javascript">
      <!-- 
	        writemainmenu();
	        -->
    </script>
  </div>
</div>



<div id="leftcontent">


	<div class="LeftNav">
	<div class="center"><div class="north"><div class="south">
	<script type="text/javascript" language="javascript">
	<!-- 
	writesubmenu(); 
	-->
	</script>
	
	</div></div></div></div>

	<!-- #BeginEditable "LeftNav" -->	<!-- #EndEditable --></div>
<div id="centercontent">
	<!-- #BeginEditable "MainContent" -->
	<div class="article">
	<h3>The General Principles</h3>
	
	<div class="note">Drivers are system components that are responsible for <span class="underline">hiding all device dependencies</span> from clients via a standard interface.</div> 

	<p>On the surface, you may say "Of course!", but things can become subtle.</p> 

	<p>Consider this example: The telescope whose driver you are writing needs to be "homed" before it can be used. This is an unusual requirement, arising from the behavior of the particular micro controller. While the Telescope Interface Standard provides a Home() method, it is not enough to simply implement Home() and leave it at that. Applications would need to know this "special info" about your mount! Since most other mounts can be used after setting Connected = True and, if needed, calling Unpark(), applications will fail when using your mount. Thus, you need to handle that initial homing as part of the driver's Connected property, or as an <i>internal </i> pre-condition to using any other methods or properties that depend on that initial homing. It must be hidden from clients, as it is a device dependency.</p>

	<p>It's important to consider what aspects of your target device are exposed to clients. With this in mind, you should review the relevant specification to make sure you aren't exposing low-level limitations or unique requirements to clients. Some of the other sections listed on the left address a few specific instances of this that seem to come up commonly.</p>
	<p class="note">Do it correctly or signal an error.</p>
	
	<p>This is the basic &quot;contract&quot; between a driver and its client application. Your driver absolutely <i>must</i> either do what it is asked or signal an error condition for the client to trap. Unless the client gets an error, it will always assume you have done what it requested and continue in its logic under that assumption. This means that you must not return &quot;illegal&quot; values for properties in lieu of signaling an error, or &quot;try&quot; to do something and return whether it was done or not. You cannot expect client applications to know about limitations and quirks of your device and avoid them (see the first principle above). </p>
	</div>
	<!-- #EndEditable --></div>
<div id="footer">
	Copyright © 1998-2010, The ASCOM Initiative. 
	All rights reserved. </div>

</body>

<!-- #EndTemplate --></html>
