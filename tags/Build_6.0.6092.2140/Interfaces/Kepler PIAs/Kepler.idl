// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: Kepler.dll

// #define VARIANT_TRUE ((VARIANT_BOOL)-1)
// #define VARIANT_FALSE ((VARIANT_BOOL)0)

//#if (__midl >= 501)
//midl_pragma warning( disable: 2400 2401 )   // rbd These warnings are n/a
//#endif

[
  uuid(695BB5C0-00B6-4E41-84E4-E629391EE301),
  version(1.0),
  helpstring("Kepler Ephemeris Engine"),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 84082968),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 996339738),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 6.00.0347 at Fri Jul 20 09:31:19 2007"),
  custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, "ASCOM.Kepler")
  
]
library Kepler
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IEphemeris;

    typedef [uuid(695BB5C9-00B6-4E41-84E4-E629391EE301), helpstring("Kepler major planet numbers")]
    enum PlanetNumber {
        kepMercury = 1,
        kepVenus = 2,
        kepEarth = 3,
        kepMars = 4,
        kepJupiter = 5,
        kepSaturn = 6,
        kepUranus = 7,
        kepNeptune = 8,
        kepPluto = 9
    } PlanetNumber;

    typedef [uuid(695BB5C8-00B6-4E41-84E4-E629391EE301), helpstring("Kepler body types")]
    enum BodyType {
        kepMajorPlanet = 0,
        kepMinorPlanet = 1,
        kepComet = 2
    } BodyType;

    [
      odl,
      uuid(695BB5C2-00B6-4E41-84E4-E629391EE301),
      version(1.0),
      helpstring("IEphemeris Interface"),
      dual,
      oleautomation
    ]
    interface IEphemeris : IDispatch {
        [id(0x00000001), helpstring("method GetPositionAndVelocity")]
        HRESULT GetPositionAndVelocity(
                        [in] double tjd, 
                        [out, retval] VARIANT* Vectors);
        [id(0x00000002), propget, helpstring("The type of solar system body represented by this instance of the ephemeris engine (enum)")]
        HRESULT BodyType([out, retval] BodyType* pVal);
        [id(0x00000002), propput, helpstring("The type of solar system body represented by this instance of the ephemeris engine (enum)")]
        HRESULT BodyType([in] BodyType pVal);
        [id(0x00000003), propget, helpstring("The major or minor planet number, 0 if not numbered.")]
        HRESULT Number([out, retval] long* pVal);
        [id(0x00000003), propput, helpstring("The major or minor planet number, 0 if not numbered.")]
        HRESULT Number([in] long pVal);
        [id(0x00000004), propget, helpstring("The name of the body. If this instance represents an unnumbered minor planet, Ephemeris.Name must be the packed MPC designation. For other types, this is for display only.")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000004), propput, helpstring("The name of the body. If this instance represents an unnumbered minor planet, Ephemeris.Name must be the packed MPC designation. For other types, this is for display only.")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000005), propget, helpstring("Mean anomaly at the epoch")]
        HRESULT M([out, retval] double* pVal);
        [id(0x00000005), propput, helpstring("Mean anomaly at the epoch")]
        HRESULT M([in] double pVal);
        [id(0x00000006), propget, helpstring("Epoch of osculation of the orbital elements (terrestrial Julian date)")]
        HRESULT Epoch([out, retval] double* pVal);
        [id(0x00000006), propput, helpstring("Epoch of osculation of the orbital elements (terrestrial Julian date)")]
        HRESULT Epoch([in] double pVal);
        [id(0x00000007), propget, helpstring("Mean daily motion (deg/day)")]
        HRESULT n([out, retval] double* pVal);
        [id(0x00000007), propput, helpstring("Mean daily motion (deg/day)")]
        HRESULT n([in] double pVal);
        [id(0x00000008), propget, helpstring("Semi-major axis (AU)")]
        HRESULT a([out, retval] double* pVal);
        [id(0x00000008), propput, helpstring("Semi-major axis (AU)")]
        HRESULT a([in] double pVal);
        [id(0x00000009), propget, helpstring("Reciprocal semi-major axis (1/AU)")]
        HRESULT z([out, retval] double* pVal);
        [id(0x00000009), propput, helpstring("Reciprocal semi-major axis (1/AU)")]
        HRESULT z([in] double pVal);
        [id(0x0000000a), propget, helpstring("Perihelion distance (AU)")]
        HRESULT q([out, retval] double* pVal);
        [id(0x0000000a), propput, helpstring("Perihelion distance (AU)")]
        HRESULT q([in] double pVal);
        [id(0x0000000b), propget, helpstring("Orbital eccentricity")]
        HRESULT e([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("Orbital eccentricity")]
        HRESULT e([in] double pVal);
        [id(0x0000000c), propget, helpstring("Orbital period (years)")]
        HRESULT P([out, retval] double* pVal);
        [id(0x0000000c), propput, helpstring("Orbital period (years)")]
        HRESULT P([in] double pVal);
        [id(0x0000000d), propget, helpstring("The J2000.0 argument of perihelion (deg.)")]
        HRESULT Peri([out, retval] double* pVal);
        [id(0x0000000d), propput, helpstring("The J2000.0 argument of perihelion (deg.)")]
        HRESULT Peri([in] double pVal);
        [id(0x0000000e), propget, helpstring("The J2000.0 longitude of the ascending node (deg.)")]
        HRESULT Node([out, retval] double* pVal);
        [id(0x0000000e), propput, helpstring("The J2000.0 longitude of the ascending node (deg.)")]
        HRESULT Node([in] double pVal);
        [id(0x0000000f), propget, helpstring("The J2000.0 inclination (deg.)")]
        HRESULT Incl([out, retval] double* pVal);
        [id(0x0000000f), propput, helpstring("The J2000.0 inclination (deg.)")]
        HRESULT Incl([in] double pVal);
        [id(0x00000010), propget, helpstring("Absolute visual magnitude")]
        HRESULT H([out, retval] double* pVal);
        [id(0x00000010), propput, helpstring("Absolute visual magnitude")]
        HRESULT H([in] double pVal);
        [id(0x00000011), propget, helpstring("Slope parameter for magnitude")]
        HRESULT G([out, retval] double* pVal);
        [id(0x00000011), propput, helpstring("Slope parameter for magnitude")]
        HRESULT G([in] double pVal);
    };

    [
      uuid(695BB5C1-00B6-4E41-84E4-E629391EE301),
      version(2.0),
      helpstring("Kepler Ephemeris Object")
    ]
    coclass Ephemeris {
        [default] interface IEphemeris;
    };
};
