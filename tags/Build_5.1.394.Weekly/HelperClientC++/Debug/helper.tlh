// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (9cbb3263).
//
// c:\documents and settings\robert b. denny\my documents\visual studio 2005\projects\ascom\helpercilentc++\debug\helper.tlh
//
// C++ source equivalent of Win32 type library c:\\Program Files\\Common files\\ASCOM\\Helper.dll
// compiler-generated file created 05/08/07 at 12:45:30 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace DriverHelper {

//
// Forward references and typedefs
//

struct __declspec(uuid("6c41fa67-db56-4221-a120-35c50fb0d041"))
/* LIBID */ __DriverHelper;
struct /* coclass */ Serial;
struct /* coclass */ Util;
struct /* coclass */ Chooser;
struct __declspec(uuid("f9753a79-1b26-4a3e-a1fc-250775c19f0b"))
/* dual interface */ _Profile;
struct /* coclass */ Profile;
struct /* coclass */ Timer;
enum PortSpeed;
enum MessageBoxOptions;
enum MessageBoxAnswers;
enum FirstDayOfWeek;
enum FirstWeekOfYear;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_Profile, __uuidof(_Profile));

//
// Type library items
//

struct __declspec(uuid("70af32bb-5ed3-489e-a119-cd97e5f1e435"))
Serial;
    // [ default ] interface _Serial
    // interface IObjectSafety

struct __declspec(uuid("7d51f28c-babc-4d38-b630-7997d24998b6"))
Util;
    // [ default ] interface _Util
    // interface IObjectSafety

struct __declspec(uuid("bde110b3-5859-440c-8aba-ad9a9d5f7481"))
Chooser;
    // [ default ] interface _Chooser
    // interface IObjectSafety

struct __declspec(uuid("f9753a79-1b26-4a3e-a1fc-250775c19f0b"))
_Profile : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDeviceType ( );
    void PutDeviceType (
        BSTR * _arg1 );
    VARIANT_BOOL IsRegistered (
        _bstr_t DriverID );
    HRESULT Register (
        _bstr_t DriverID,
        _bstr_t DescriptiveName );
    HRESULT Unregister (
        _bstr_t DriverID );
    _bstr_t GetValue (
        _bstr_t DriverID,
        _bstr_t Name,
        _bstr_t SubKey );
    HRESULT WriteValue (
        _bstr_t DriverID,
        _bstr_t Name,
        _bstr_t Value,
        _bstr_t SubKey );
    Scripting::IDictionaryPtr Values (
        _bstr_t DriverID,
        _bstr_t SubKey );
    HRESULT DeleteValue (
        _bstr_t DriverID,
        _bstr_t Name,
        _bstr_t SubKey );
    HRESULT CreateSubKey (
        _bstr_t DriverID,
        _bstr_t SubKey );
    Scripting::IDictionaryPtr SubKeys (
        _bstr_t DriverID,
        _bstr_t SubKey );
    HRESULT DeleteSubKey (
        _bstr_t DriverID,
        _bstr_t SubKey );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT _VtblGapPlaceholder1( ) { return E_NOTIMPL; }
    virtual HRESULT _VtblGapPlaceholder2( ) { return E_NOTIMPL; }
    virtual HRESULT _VtblGapPlaceholder3( ) { return E_NOTIMPL; }
      virtual HRESULT __stdcall get_DeviceType (
        /*[out,retval]*/ BSTR * _arg1 ) = 0;
      virtual HRESULT __stdcall put_DeviceType (
        /*[in,out]*/ BSTR * _arg1 ) = 0;
      virtual HRESULT __stdcall raw_IsRegistered (
        /*[in]*/ BSTR DriverID,
        /*[out,retval]*/ VARIANT_BOOL * _arg2 ) = 0;
      virtual HRESULT __stdcall raw_Register (
        /*[in]*/ BSTR DriverID,
        /*[in]*/ BSTR DescriptiveName ) = 0;
      virtual HRESULT __stdcall raw_Unregister (
        /*[in]*/ BSTR DriverID ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        /*[in]*/ BSTR DriverID,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR SubKey,
        /*[out,retval]*/ BSTR * _arg4 ) = 0;
      virtual HRESULT __stdcall raw_WriteValue (
        /*[in]*/ BSTR DriverID,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value,
        /*[in]*/ BSTR SubKey ) = 0;
      virtual HRESULT __stdcall raw_Values (
        /*[in]*/ BSTR DriverID,
        /*[in]*/ BSTR SubKey,
        /*[out,retval]*/ struct Scripting::IDictionary * * _arg3 ) = 0;
      virtual HRESULT __stdcall raw_DeleteValue (
        /*[in]*/ BSTR DriverID,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR SubKey ) = 0;
      virtual HRESULT __stdcall raw_CreateSubKey (
        /*[in]*/ BSTR DriverID,
        /*[in]*/ BSTR SubKey ) = 0;
      virtual HRESULT __stdcall raw_SubKeys (
        /*[in]*/ BSTR DriverID,
        /*[in]*/ BSTR SubKey,
        /*[out,retval]*/ struct Scripting::IDictionary * * _arg3 ) = 0;
      virtual HRESULT __stdcall raw_DeleteSubKey (
        /*[in]*/ BSTR DriverID,
        /*[in]*/ BSTR SubKey ) = 0;
};

struct __declspec(uuid("edebaaf9-e097-4d30-aa5f-6a4b0f17dc6d"))
Profile;
    // [ default ] interface _Profile
    // interface IObjectSafety

struct __declspec(uuid("51c1a9fc-e1b8-45a9-b934-ee7de7dd1b3b"))
Timer;
    // [ default ] interface _Timer
    // interface IObjectSafety
    // [ default, source ] dispinterface __Timer

enum __declspec(uuid("3b4688a7-e5e8-4645-8f15-258351df03b5"))
PortSpeed
{
    ps300 = 300,
    ps1200 = 1200,
    ps2400 = 2400,
    ps4800 = 4800,
    ps9600 = 9600,
    ps14400 = 14400,
    ps19200 = 19200,
    ps28800 = 28800,
    ps38400 = 38400,
    ps57600 = 57600,
    ps115200 = 115200
};

enum __declspec(uuid("027422a5-e2ce-455c-90a3-c0001038cd7b"))
MessageBoxOptions
{
    mbOKOnly = 0,
    mbOKCancel = 1,
    mbAbortRetryIgnore = 2,
    mbYesNoCancel = 3,
    mbYesNo = 4,
    mbRetryCancel = 5,
    mbIconStop = 16,
    mbIconQuestion = 32,
    mbIconExclamation = 48,
    mbIconInformation = 64,
    mbDefButton1 = 0,
    mbDefButton2 = 256,
    mbDefButton3 = 512,
    mbAbblicationModal = 0,
    mbSystemModal = 4096,
    mbNoFocus = 32768,
    mbSetForeground = 65536,
    mbDefaultDesktopOnly = 131072
};

enum __declspec(uuid("5475f540-0417-46bd-8eee-f4bdb9fde557"))
MessageBoxAnswers
{
    mbOK = 1,
    mbCancel = 2,
    mbAbort = 3,
    mbRetry = 4,
    mbIgnore = 5,
    mbYes = 6,
    mbNo = 7
};

enum __declspec(uuid("6d64d5a9-e88a-4693-917e-eb115fdbb39f"))
FirstDayOfWeek
{
    fmtUseSystemDayOfWeek = 0,
    fmtSunday = 1,
    fmtMonday = 2,
    fmtTuesday = 3,
    fmtWednesday = 4,
    fmtThursday = 5,
    fmtFriday = 6,
    fmtSaturday = 7
};

enum __declspec(uuid("11a6cebe-fd26-4fa6-9b41-f79bd4f5e9df"))
FirstWeekOfYear
{
    fmtUseSystem = 0,
    fmtFirstJan1 = 1,
    fmtFirstFourDays = 2,
    fmtFirstFullWeek = 3
};

//
// Wrapper method implementations
//

#include "c:\documents and settings\robert b. denny\my documents\visual studio 2005\projects\ascom\helpercilentc++\debug\helper.tli"

} // namespace DriverHelper

#pragma pack(pop)
