// RoboFocus.idl : IDL source for RoboFocus.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (RoboFocus.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		uuid(7FECCD83-2147-48F0-9889-595E1F12FAAA),
		dual,
		helpstring("ASCOM Focuser Driver for RoboFocus"),
		pointer_default(unique)
	]
	interface IFocuser : IDispatch
	{
		[propget, id(1), helpstring("Step size in microns (absolute) or speed (relative)")] HRESULT StepSize([out, retval] float *pVal);
		[id(2), helpstring("Display the setup dialog box")] HRESULT SetupDialog();
		[propget, id(3), helpstring("Maximum step position (absolute only)")] HRESULT MaxStep([out, retval] long *pVal);
		[propget, id(4), helpstring("True if focuser is currently moving")] HRESULT IsMoving([out, retval] VARIANT_BOOL *pVal);
		[id(5), helpstring("Move to position (absolute mode) or +/- distance (relative mode)")] HRESULT Move(long Position);
		[propget, id(6), helpstring("Current focuser position (absolute only)")] HRESULT Position([out, retval] long *pVal);
		[propget, id(9), helpstring("Set true to start link to focuser, false to shut down")] HRESULT Link([out, retval] VARIANT_BOOL *pVal);
		[propput, id(9), helpstring("Set true to start link to focuser, false to shut down")] HRESULT Link([in] VARIANT_BOOL newVal);
		[propget, id(10), helpstring("True if the focuser control is capable of absolute positioning")] HRESULT Absolute([out, retval] VARIANT_BOOL *pVal);
		[propget, id(11), helpstring("True if the focuser is capable of automatic temperature compensation")] HRESULT TempCompAvailable([out, retval] VARIANT_BOOL *pVal);
		[propget, id(12), helpstring("When True, temperature compensation is on; Move command not available")] HRESULT TempComp([out, retval] VARIANT_BOOL *pVal);
		[propput, id(12), helpstring("When True, temperature compensation is on; Move command not available")] HRESULT TempComp([in] VARIANT_BOOL newVal);
		[propget, id(13), helpstring("Temperature at focuser; 100 if not available")] HRESULT Temperature([out, retval] float *pVal);
		[propget, id(14), helpstring("Maximum increment for Move")] HRESULT MaxIncrement([out, retval] long *pVal);
		[id(15), helpstring("Stop focuser motion immediately")] HRESULT Stop();
		[id(16), helpstring("method Halt")] HRESULT Halt();
	};

[
	uuid(E8E01F61-2D1D-4585-833A-38480DA22EB1),
	version(1.0),
	helpstring("ASCOM Focuser Driver for RoboFocus")
]
library RoboFocusLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(026DAA75-C2C3-488d-AC0A-A8342D1702E6),
		helpstring("ASCOM Focuser Driver for RoboFocus")
	]
	coclass Focuser
	{
		[default] interface IFocuser;
	};
};
