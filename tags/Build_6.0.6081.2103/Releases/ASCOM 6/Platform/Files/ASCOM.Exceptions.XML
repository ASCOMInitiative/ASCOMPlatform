<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASCOM.Exceptions</name>
    </assembly>
    <members>
        <member name="T:ASCOM.ErrorCodes">
            <summary>
            Error numbers for use by drivers.
            </summary>
            <remarks>
            The range of permitted values falls within the class FACILTY_ITF as 
            defined by the operating system and COM. These values will never clash with 
            COM, RPC, or OS error codes.
            </remarks>
        </member>
        <member name="F:ASCOM.ErrorCodes.NotImplemented">
            <summary>
            Reserved error number for property or method not implemented.
            </summary>
            <remarks>
            See ASCOM.Exception.NotImplementedException.
            </remarks>
        </member>
        <member name="F:ASCOM.ErrorCodes.DriverBase">
            <summary>
            The starting value for driver-specific error numbers. 
            </summary>
            <remarks>
            Drivers are free to choose their own numbers starting with
            DriverBase, up to and including DriverMax.
            </remarks>
        </member>
        <member name="F:ASCOM.ErrorCodes.DriverMax">
            <summary>
            Maximum value for driver-specific error numbers. 
            </summary>
            <remarks>
            Drivers are free to choose their own numbers starting with
            DriverBase, up to and including DriverMax.
            </remarks>
        </member>
        <member name="T:ASCOM.DriverException">
            <summary>
            This is the generic driver exception. Drivers are permitted to directly throw this
            exception as well as any derived exceptions. Note that the Message property is 
            a member of ApplicationException, the base class of DriverException. The HResult
            property of ApplicationException is simply renamed to Number.
            </summary>
        </member>
        <member name="M:ASCOM.DriverException.#ctor(System.String,System.Int32)">
            <summary>
            Create a new ASCOM exception using the specified text message and error code.
            </summary>
            <param name="message">Descriptive text describing the cause of the exception</param>
            <param name="number">Error code for the exception (80040400 - 80040FFF).</param>
        </member>
        <member name="M:ASCOM.DriverException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Create a new ASCOM exception based on another exception plus additional descriptive text and error code. This member is 
            required for a well-behaved exception class. For example, if a driver receives an exception
            (perhaps a COMException) from some other component yet it wants to report some meaningful
            error that <i>resulted</i> from the other error, it can package the original error in the
            InnerException member of the exception <i>it</i> generates.
            </summary>
            <param name="message">Descriptive text describing the cause of the exception</param>
            <param name="number">Error code for the exception (80040400 - 80040FFF).</param>
            <param name="inner">The inner exception that led to throwing this exception</param>
        </member>
        <member name="P:ASCOM.DriverException.Number">
            <summary>
            The error code for this exception (hex 80040400 - 800404FF)
            </summary>
        </member>
        <member name="T:ASCOM.NotImplementedException">
            <summary>
            All properties and methods defined by the relevant ASCOM standard interface must exist in each driver. However,
            those properties and methods do not all have to be <i>implemented</i>. This exception is a base class for
            PropertyNotImplementedException and MethodNotImplementedException, which drivers should use for throwing
            the relevant exception(s). This class is intended to be used by clients who wich to catch either of
            the two specific exceptions in a single catch() clause.
            </summary>
        </member>
        <member name="M:ASCOM.NotImplementedException.#ctor(System.String)">
            <summary>
            Create a new exception object and identify the specified driver property or method as the source.
            </summary>
            <param name="strPropertyOrMethod">The name of the driver property/accessor or method that caused the exception</param>
        </member>
        <member name="M:ASCOM.NotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new exception object and identify the specified driver property as the source,
            and include an inner exception object containing a caught exception.
            </summary>
            <param name="strPropertyOrMethod">The name of the driver property/accessor or method that caused the exception</param>
            <param name="inner">The caught exception</param>
        </member>
        <member name="P:ASCOM.NotImplementedException.PropertyOrMethod">
            <summary>
            The property/accessor or method that is not implemented
            </summary>
        </member>
        <member name="T:ASCOM.PropertyNotImplementedException">
            <summary>
            All properties defined by the relevant ASCOM standard interface must exist in each driver. However,
            those properties do not all have to be <i>implemented</i>. The minimum requirement
            for each defined property is to throw the ASCOM.PropertyNotImplementedException for each
            of its accessors. Note that no default constructor is supplied. Throwing this requires both the 
            property name and unimplemented accessor type to be supplied.
            </summary>
        </member>
        <member name="M:ASCOM.PropertyNotImplementedException.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new exception object and identify the specified driver property and accessor as the source.
            </summary>
            <param name="strProperty">The name of the driver property that caused the exception.</param>
            <param name="bAccessorSet">True if the exception is being thrown for the 'set' accessor, else false</param>
        </member>
        <member name="M:ASCOM.PropertyNotImplementedException.#ctor(System.String,System.Boolean,System.Exception)">
            <summary>
            Create a new exception object and identify the specified driver property as the source,
            and include an inner exception object containing a caught exception.
            </summary>
            <param name="strProperty">The name of the driver property that caused the exception</param>
            <param name="bAccessorSet">True if the exception is being thrown for the 'set' accessor, else false</param>
            <param name="inner">The caught exception</param>
        </member>
        <member name="P:ASCOM.PropertyNotImplementedException.Property">
            <summary>
            The property that is not implemented
            </summary>
        </member>
        <member name="P:ASCOM.PropertyNotImplementedException.AccessorSet">
            <summary>
            True if the 'set' accessor is not implemented, else false
            </summary>
        </member>
        <member name="T:ASCOM.MethodNotImplementedException">
            <summary>
            All methods defined by the relevant ASCOM standard interface must exist in each driver. However,
            those methods do not all have to be <i>implemented</i>. The minimum requirement
            for each defined method is to throw the ASCOM.MethodNotImplementedException. Note
            that no default constructor is supplied. Throwing this requires the the method name. 
            </summary>
        </member>
        <member name="M:ASCOM.MethodNotImplementedException.#ctor(System.String)">
            <summary>
            Create a new exception object and identify the specified driver method as the source.
            </summary>
            <param name="strMethod">The name of the driver method that caused the exception.</param>
        </member>
        <member name="M:ASCOM.MethodNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new exception object and identify the specified driver method as the source,
            and include an inner exception object containing a caught exception.
            </summary>
            <param name="strMethod">The name of the driver method that caused the exception</param>
            <param name="inner">The caught exception</param>
        </member>
        <member name="P:ASCOM.MethodNotImplementedException.Method">
            <summary>
            The method that is not implemented
            </summary>
        </member>
    </members>
</doc>
