<?xml version="1.0" encoding="utf-8"?>
<topic id="e7734c14-0562-4010-b0c9-ddb5055cd318" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    
    <section address="Intro">
    <title>Introduction</title>
    <content>
        <para>The original VB6 COM components remain as they are in ASCOM Platform 5 although some functionality is 
        invisibly replaced with equivalents from the .NET components.This provides maximum compatibility as the original 
        VB6 COM binary application interface has not been changed at all and so all existing clients and drivers should 
        work without hitches.</para>
      	
  		<alert class="caution">
  		<para>Over time you should migrate away from the VB6 COM components to use the native .NET components
 		to maximise the longevity of your drivers and applications. There is curently no 
 		<quoteInline>"must do by"</quoteInline> date in sight but a change to the Windows platform that renders 
 		the VB6 components unviable to repair could occur at any point in the future.</para>
      	</alert>
      	
    </content>
    </section>
    <section address="Diffs">
    <title>Differences to the .NET Interface</title>
    <content>  	
      	
      	<para>Due to limitations in the original COM specification, there are a few features of the .NET framework
      	and recent language enhancements that canot be expressed through COM; these include static classes, overloads 
      	and generic variables. To optimise the experience for both COM and .NET developers, a varienty of approaches have 
      	been used:</para>
      	
      	<table>
			<tableHeader>
				<row>
		    		<entry>Element</entry>
			    	<entry>Approach</entry>
		    	</row>
			</tableHeader>
		  	<row>
		    	<entry>Static Classes</entry>
		    	<entry>Wherever possible static classes have been avoided, the only exception is the 
		    	<quoteInline>NOVAS2</quoteInline> component. For ease of use and because it contains no state, 
		    	<quoteInline>NOVAS2</quoteInline> has been implemented as a static class for .NET applications.  
		    	A functionally identical, instanciable class, <quoteInline>NOVAS2COM</quoteInline>, has been provided for
		    	COM clients.</entry>
		  	</row>
		  	<row>
		    	<entry>Overloads</entry>
		    	<entry>All overloads have been allocated into separate interfaces from the main class interfaces. Each main interface 
		    	contains all the core component functionality that is visible to both .NET and COM clients, while the additional 
		    	interface contains the overloads and is not COM visible. The most extensive additional interface is for the 
		    	Util component, which sports the <quoteInline>IUtil</quoteInline> and extensive 
		    	<quoteInline>IUtilExtra</quoteInline> interfaces.</entry>
		  	</row><row>
			    <entry>Generic Variables</entry>
		    	<entry>These have been avoided by use of a custom <quoteInline>KeyValuePair</quoteInline> 
		    	class in the ASCOM.Utilities namespace. This is non-generic and allows a set of string keys and 
		    	associated string values to be returned to both COM and .NET clients. While generics are a little 
		    	more elegant and provide compiler level type checking, the advantages of having a single return 
		    	type common to both COM and .NET clients was considered to outweigh these.</entry>
		  	</row><row>
			    <entry>Parameterless Constructors</entry>
		    	<entry>COM needs a parameterless constructor, while .NET supports constructors with parameters. Where it 
		    	is convenient to have a constructor with parameters, this is provided along with a parameterless 
		    	constructor and set method for COM use. A typical example is the <quoteInline>TraceLogger</quoteInline> 
		    	component which has a constructor that takes <quoteInline>LogFileName</quoteInline> and 
		    	<quoteInline>LogFileType</quoteInline> as well as a paraemterless constructor and the 
		    	<quoteInline>SetLogFile</quoteInline> method that sets <quoteInline>LogFileName</quoteInline> and 
		    	<quoteInline>LogFileType</quoteInline>.</entry>
		  	</row>
		</table>

    </content>
    </section>
    <section address="COMNames">
    <title>COM Names and Type Libraries</title>
    <content>  	
		<para>Type libraries for all components are provided in the 
		<quoteInline>Program Files\Common Files\ASCOM\.net</quoteInline> directory.</para>
		
		<alert class="caution">
		<para>With one exception, COM names of all elements are identical to the namespace names given in this help 
		file. That exception is enum values (not overall enum names) where each value is prefixed by the enum name 
		and an underscore in the COM interface.</para>
		</alert>
		
		<para>For example, the serial speed enum <quoteInline>SerialSpeed</quoteInline>, is documented as having values <literal>ps300</literal>,
		<literal>ps1200</literal> etc. and these are the names that should be used in a .NET application. However, within COM, 
		the values are called <literal>SerialSpeed_ps300</literal> and <literal>SerialSpeed_ps1200</literal>
		respectively. Unfortunately, this is a  limitation of the COM support in .NET and is not influencible 
		by the platform developers.</para>
		
		<para>A good way to get a feel for enum value names, from a COM perspective, is to use <hardware>Microsoft's
		OLE/COM Object Viewer</hardware> to examine the supplied typelibs before stating to code your application.</para>
		
		
      	
    </content>
      
    </section>
    
    <relatedTopics>
  
    </relatedTopics>
  </developerConceptualDocument>
</topic>