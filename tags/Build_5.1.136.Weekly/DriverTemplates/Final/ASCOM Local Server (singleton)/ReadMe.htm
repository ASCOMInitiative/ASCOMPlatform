<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>

<style type="text/css">
body {
	background-color:#FFFFFF;
	font-family: Verdana, Arial, Helvetica, sans-serif; 
	font-size: 80%; 
	font-weight: normal
	}
h1,h2,h3,h4 {
	font-family:Arial, Helvetica, sans-serif;
	}
li {
	margin-bottom: 6pt;
	}
ol,ul {
	margin-top: 6pt;
}
pre {
	margin: 5pt;
	background-color:#CCFFFF;
}
.code {
	font-family: "Lucida Console", "Courier New", Courier, monospace;
	}
.hilite {
	background: yellow;
	}
.codehilite {
	font-family: "Lucida Console", "Courier New", Courier, monospace;
	background: yellow;
}
.note {
	margin-left: 12pt;
	margin-right: 12pt;
	border: 1px solid;
	padding: 6pt;
	background-color: #FFEE88;
	}
.underline {
	text-decoration: underline;
	}
}
</style>
<title>Untitled Document</title>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
<body>
<table width="90%" border="0" cellspacing="4" cellpadding="4">
  <tr>
    <td colspan="2" bgcolor="#CCFFCC">
      <table width="100%" border="0" cellspacing="0" cellpadding="4">
        <tr>
          <td><h2 class="titletext">ASCOM LocalServer (singleton) Host </h2></td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td width="70%" style="vertical-align: top">
      	<h4 class="titletext">You have just created a local server (singleton) host for one or more ASCOM driver classes.</h4>
      	<hr>
      	<p>This project implements an ASCOM host server for one or more driver classes in a single-instance executable. It can be used to serve multiple instances of a single driver class (hub) or for providing driver services for multiple devices (e.g., Telescope and Focuser) to multiple applications. In the latter scenario, the multiple driver classes will often share one or more resources such as the serial connection and a microcontroller in the combined device. From the client's perspective, using the drivers served by the local server is exactly the same as if the drivers are loaded into the client's process space (in-proc servers). </p>
      	<div class="note"><strong>NOTE:</strong> Unless you are prepared to handle all of the  timing issues that arise when multiple clients are accessing the properties and methods of your driver(s), stop now. Just because the local server serializes the calls to your driver(s)' properties and methods does not mean that there will be no timing or concurrency issues.<br>&nbsp;<br>
      	For example, suppose the hub serves instances of a Telescope driver. One client sets the TargetRightAscension property, then another sets TargetRightAscension to a different value, then the first client sets TargetDeclination, then the first client calls SlewToTarget() followed by the second client calling SlewToTarget(). Besides the first client's slew command sending the scope to the wrong (and possibly dangerous) coordinates, there is the problem of the second client trying to slew a slewing scope. Local server drivers are tricky to get right. There is no such thing as &quot;ignorance is bliss&quot; here.</div>
      	<p>You're probably anxious to get going, but you really should read through the <a href="#theory">Theory of Operation</a> and <a href="#details">Detailed Use and Deployment</a> below. </p>
      	<p class="underline">You must do the following in order to complete your local server:</p>
      	<ol>
      		<li>In the local server's project properties, Application tab, change BOTH the AssemblyName and the default assembly name to ASCOM.xxx (e.g., ASCOM.SuperScope).</li>
      		<li>Add one or more driver skeleton projects using the in-proc templates. You may use either the C# or VB templates. Project name is not important (not used in ProgID) choose something like TelescopeDriver. You will be changing the substituted project name in these projects below.</li>
      		<li>Build the LocalServer</li>
      		<li>Set a reference to the local server <strong>project</strong> in each of the driver skeleton projects</li>
      		<li>In each skeleton driver project:<br>
			<ol type="a">
      			<li> Do a Find In Files for the project name of the skeleton driver (e.g., TelescopeDriver) and change it to match the project name of your local server (e.g. SuperScope). You don't have to do this in the ReadMe.html file. Everywhere else, however, is IMPORTANT. This sets the correct namespace, progID, etc. If you're a bit more brave, you can use Replace in Files.</li>
      			<li> In project properties, Application tab, change the assembly name to ASCOM.<em class="underline">localserverprojectname</em>.<em>drivertype</em>, (e.g., ASCOM.SuperScope.Telescope).</li>
      			<li> In project properties, Application tab, click Assembly Information...
				<ul>
      				<li>Assure that Make assembly COM visible is <strong>on</strong> (it should aready be on).</li>
					<li>Edit the Product Name to be the &quot;friendly name&quot; of your driver as will be shown in the  Chooser.</li>
				</ul></li>
      			<li> In project properties, Build tab, turn <strong>off</strong> Register for COM Interop.</li>
      			<li> Modify the driver class declaration to inherit from ReferenceCountedBase. Examples:<br>
      		    C#:<br>
      			<pre>    public class Telescope :
        ReferenceCountedObjectBase,
        ITelescope</pre>
      			VB:<br>
      			<pre>    Public Class Telescope
        '==================================
        Inherits ReferenceCountedObjectBase
        Implements ITelescope
        '==================================</pre></li>
      			<li> In driver.cs/driver.vb, remove the entire ASCOM Registration region</li>
      			<li> In driver.cs/driver.vb, remove the private strings for driver ID and driver description</li>
			</ol>
      		<li>Unless you're writing a single-driver hub, you will have two or more driver types (e.g. Telescope and Focuser) and thus two or more skeleton driver assembly projects added. Presumably, these drivers need to share some resources (e.g. a single COM port via Helper.Serial). <span class="underline">Put shared resources into the SharedResources class provided</span>. <br>
      			<br>
      			A shared serial port is already provided (see SharedResources.cs) as <span class="code">SharedResources.SharedSerial</span> and it is an ASCOM Helper Serial object. You may wish to define additional shared resources in static member variables with public static accessor properties as is already done for the SharedSerial. Unfortunately, if you are a Visual Basic programmer, you will have to make these additions in C#.</li>
      		<li> If you are writing a hub and don't need the serial port, in SharedResources.cs you can remove the public static SharedSerial property, the m_SharedSerial member in the private data region, and the line in main that initializes it. If you don't need any other shared resources for your hub, then you can remove the SharedResources.cs file completely. </li>
      		<li>If you modified the LocalServer in (6) or (7), build it again now. This will refresh the stuff that's visible to the driver skeletons.</li>
      		<li>Build the driver skeletons to verify that you got all of the namespace and other variable changes in (5a).</li>
      		<li>The local server dynamically loads the driver assemblies from a subdirectory called <em>localservername</em>ServedClasses (e.g. SuperScopeServedClasses) which must be a sub-folder of the local server executable. <br>
      			<br>
      			The local server is smart enough to detect that it is running in the Visual Studio IDE and look for this folder just below its <em>solution</em> folder in that case. It is assumed that the local server project and each served driver assembly project, are in subfolders below the solution folder. <br>
      			<br>
      			Once deployed, the subfolder will need to be just under the local server executable. At any rate, during development, you'll need to add a post-build task to each your driver assembly projects which puts a copy of the driver assembly into that subfolder. Here is an example:<br>
      		<pre>    copy &quot;$(TargetPath)&quot; &quot;..\..\..\SuperScopeServedClasses\$(TargetName).dll&quot;</pre>
			Note the quotes for possible path elements with spaces in them.</li>
      		<li><span class="hilite">IMPORTANT:</span> With a local server based driver (or hub) it is possible for multiple clients to control the device(s). It is up to you to safeguard against abuse. </li>
      		<li>You may want to add controls and/or status information to the main form frmMain of the local server. Please resist the temptation to turn the local server's main form into a graphical device control panel. Instead, make a separate application that uses the served driver(s). <span class="underline">A driver is not a program!</span></li>
      		</ol>
      	<h3>Notes</h3>
      	<ul>
      		<li>The local server handles all of the registration and unregistration for each of its served driver classes, including the ASCOM Chooser info and the DCOM/AppID info needed for activation from TheSky. By running the server from a command line and giving /register or /unregister as the command line option, it will register or unregister all served classes (respectively). <span class="hilite">Never use REGASM on the local server executable!</span></li>
      		<li>When you make the installer for your local server based driver/hub, do not let it register the executable for COM. Instead, have it activate the installed local server with the /register option. </li>
      		<li>The ASCOM registration uses the driver assembly info AssemblyProduct attribute as the friendly name that will show in the chooser.</li>
   			</ul>
      	<h3><a name="theory"></a>Theory of Operation</h3>
      	<p>The local server is an executable which can provide multiple instances of multiple drivers to multiple clients. This capability is needed for two applications:</p>
      	<ul>
      		<li>A hub, which allows multiple clients to chare a single device</li>
   			<li>A device which provides multiple services, such as a telescope which has a focuser built-in where both the telescope and focuser are controlled by the same serial connection and different client programs need to control to the focuser and telescope.  </li>
      		</ul>
      	<p>By simply dropping suitably developed driver assemblies into a known folder, the local server will register them for COM and ASCOM and serve any number of instances of the drivers' interfaces to any number of client programs. It does this by locating and loading the driver assemblies, analyzing them to detect their classes and interfaces, and implementing a class factory that can create instances of them for clients. </p>
      	<p>A driver is an assembly which contains a class that <em>implements</em> one of the ASCOM standard driver interfaces and  <em>inherits</em> the ReferenceCountedObjectBase class of the local server. Apart from that, driver assemblies are identical to those that are used in-process (DLL-type). The instructions above detail the steps needed to convert an in-process driver into one that can be served by the local server.</p>
      	<p>The name of the local server is important, so we provide it as a <em>template</em> from which you can create a local server for your produce. To make this clear, let's assume that your company AlphaTech produces a telescope system which contains a microcontroller that is able to control not only the telescope mount, but also a focuser and a camera rotator. The mount, focuser, and rotator are all controlled via commands sent through a common serial line connecting the computer to the microcontroller, so you need a local server. In ASCOM, then, you probably want your system to appear as AlphaTech.Telescope, AlphaTech.Focuser, and AlphaTech.Rotator. Then you would name the local server AlphaTech. Be sure to give this due consideration before creating the template, the project name is the name of your local server. </p>
      	<p>The fact that driver classes inherit from the local server's ReferenceCountedObjectBase class  allows the local server to maintain a reference count on the driver class. If a client creates an instance of a served driver, the local server automatically starts up and provides an instance of the class to the client. Once started the local server can provide additional instances of any of its served driver classes. If the reference count of all served classes drops to zero as a result of clients releasing their instances, the local server will automatically exit. </p>
      	<p>Registration services provided include not only the basic COM class registration, but also DCOM/AppID info needed to use the served classes from outbound connections from Software Bisque's TheSky. It also registers the served classes for the ASCOM Chooser. The &quot;friendly&quot; name of each served driver that appears in the chooser comes from the driver classes' assembly information ProductName. The COM ProgID for each served driver is ASCOM.<em>localservername</em>.<em>drivertype</em>, for example, ASCOM.AlphaTech.Telescope, where AlphaTech is the local server name and Telescope is the type of the driver. Unregistering removes all of this information from the operating system. </p>
      	<h3><a name="details"></a>Detailed Use and Deployment </h3>
      	<p>Once you have built your local server and the served driver class assemblies, here's how to use it. To register the served classes, activate the local server from a shell command line with the option /register (or /regserver, for VB6 compatibility): </p>
      	<pre>C:\xxx&gt; <em>localserver</em>.exe /register</pre>
      	<p>To unregister the local server and its drivers, activate the local server from a shell command line with the option /unregister (or /unregserver for VB6 compatibility):</p>
      	<pre>C:\xxx&gt; <em>localserver</em>.exe /unregister</pre>
      	<p>When the operating system starts the local server in response to a client creating one of it's served driver classes, the command option /embedding is included. The local server's code detects this and sets a variable that you can use. </p>
      	<p>When deploying a hub or set of drivers with the local server,  you'll have to arrange for the driver assemblies to be placed in a subfolder under the local server called <em>localservername</em>ServedClasses.. That's all you need to do, though, the local server will find them. </p>
      	</td>
    <td width="30%" style="text-align: right; vertical-align: top">
      <table width="100%" border="0" cellspacing="0" cellpadding="4">
        <tr>
          <td style="">
            <table width="100%" border="0" cellspacing="0" cellpadding="4">
              <tr>
                <td><h3> ASCOM Initiative</h3>
				<td><img src="ASCOM.png" alt="logo" width="48" height="56" align="right" longdesc="http://ascom-standards.org/"></td>
                </tr>
            </table>          </td>
        </tr>
        <tr>
          <td><p>The ASCOM Initiative consists of a group of astronomy software developers and instrument vendors  whose goals are to promote the driver/client model and scripting  automation. </p>
          	<p>See the <a href="http://ascom-standards.org/" target="browser">ASCOM web site</a> for more information. Please participate in the <a href="http://tech.groups.yahoo.com/group/ASCOM-Talk" target="browser">ASCOM-Talk Yahoo Group</a>. </p>
          	</td>
        </tr>
      </table>    </td>
  </tr>
</table>
</body>
</html>
