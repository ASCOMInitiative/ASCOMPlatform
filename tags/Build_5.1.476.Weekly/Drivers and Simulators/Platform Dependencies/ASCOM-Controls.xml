<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASCOM.Controls</name>
    </assembly>
    <members>
        <member name="P:ASCOM.Controls.Properties.Settings.ASCOMStandardsURL">
            <summary>
            The URL of the ASCOM Standards web site.
            </summary>
        </member>
        <member name="T:ASCOM.Controls.Chooser">
            <summary>
            Summary description for Chooser.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.Chooser.cstrPromptLabel">
            <summary>
            Format string used to construct the on-screen prompt,
            which reflects the currently selected device class.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.Chooser.#ctor">
            <summary>
            Default public constructor; create a new chooser object and populate the device selection combo box.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.Chooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.Chooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.Chooser.m_eDriverClass">
            <summary>
            The class of device being chosen. Defaults to "Telescope".
            </summary>
        </member>
        <member name="M:ASCOM.Controls.Chooser.pictureASCOMLogo_Click(System.Object,System.EventArgs)">
            <summary>
            Handles a click event on the ASCOM logo image.
            Starts a web browser and navigates to <see cref="P:ASCOM.Controls.Chooser.URL"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASCOM.Controls.Chooser.PopulateDeviceList">
            <summary>
            Populates the device list by enumerating the entries for devices in the given DriverClass.
            The DriverClass comes from the DeviceClass property.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.Chooser.m_strDeviceID">
            <summary>
            The value of the most-recently-used DeviceID. Set by the user and used to set the default selection.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.Chooser.comboSelectDriver_SelectionChangeCommitted(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectionChangeCommitted event from the device selector drop-down.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASCOM.Controls.Chooser.OnSelectionChanged">
            <summary>
            Raise the <see cref="E:ASCOM.Controls.Chooser.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.Chooser.m_MRU">
            <summary>
            The most-recently-used devices
            </summary>
        </member>
        <member name="P:ASCOM.Controls.Chooser.DeviceClass">
            <summary>
            Get or set the Driver Class (or device type) being chosen, as a string.
            When this property is changed, the ComboBox is refreshed to reflect the new device type.
            The selection list is positioned at the most recently used DeviceID, if possible.
            </summary>
        </member>
        <member name="P:ASCOM.Controls.Chooser.URL">
            <summary>
            Returns the full URL of the ASCOM-Standards web site, as a string.
            </summary>
            <value>The full URL of the ASCOM-Standards web site, as a string.</value>
        </member>
        <member name="P:ASCOM.Controls.Chooser.RegistryRoot">
            <summary>
            Gets the root key in the registry beneath which ASCOM device profiles are stored,
            as a RegistryKey object.
            </summary>
        </member>
        <member name="E:ASCOM.Controls.Chooser.SelectionChanged">
            <summary>
            This event occurs when the device selection changes.
            </summary>
        </member>
        <member name="P:ASCOM.Controls.Chooser.DeviceID">
            <summary>
            Get or Set the DeviceID.
            Set this property prior to suggest a default selection. The chooser will then attempt
            to match one of the installed drivers and will preselect it in the combo box if a match is found.
            If the supplied DeviceID does not match any installed device, it is ignored.
            Read this property to retrieve the user's device selection. A null reference is returned if
            there has been no selection, or if there are no installed drivers.
            This property is reset when the DeviceClass property is set.
            </summary>
        </member>
        <member name="P:ASCOM.Controls.Chooser.SelectedDevice">
            <summary>
            Gets the currently selected ASCOM device as a <see cref="T:ASCOM.Controls.DeviceDescriptor"/>.
            If there is no currently selected device, or if the selected item is not a valid ASCOM
            device, then the value <c>null</c> is returned.
            </summary>
        </member>
        <member name="T:ASCOM.Controls.DeviceDescriptor">
            <summary>
            This class defines a Device Descriptor for ASCOM devices and is convenient
            for populating ComboBoxes with lists of ASCOM devices.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.DeviceDescriptor.#ctor(System.String,System.String)">
            <summary>
            Initialize a new DeviceDescriptor object.
            </summary>
            <param name="s1">DeviceID of the device (Device ID)</param>
            <param name="s2">Human-readable description</param>
        </member>
        <member name="M:ASCOM.Controls.DeviceDescriptor.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ASCOM.Controls.DeviceDescriptor"/> class
            from a generic <see cref="T:System.Collections.Generic.KeyValuePair{string,string}"/>.
            These values are typically returned from methods in <see cref="N:ASCOM.Utilities"/>.
            </summary>
            <param name="deviceProfileKey">The device profile key.</param>
        </member>
        <member name="M:ASCOM.Controls.DeviceDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> containing a description of the ASCOM device.
            When this item is added to a <see cref="T:System.Windows.Forms.ComboBox"/> then this
            method determines what will be displayed in the Combo Box control.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a description of the ASCOM device.
            </returns>
        </member>
        <member name="P:ASCOM.Controls.DeviceDescriptor.DeviceID">
            <summary>
            Gets or sets the ASCOM DeviceID.
            </summary>
            <value>The ASCOM DeviceID (synonymous with the COM ClsId) of the device.</value>
        </member>
        <member name="P:ASCOM.Controls.DeviceDescriptor.Description">
            <summary>
            Gets or sets the description of the ASCOM device.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:ASCOM.Controls.CadencePattern">
            <summary>
            Cadence patterns for blinking LEDs.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.CadencePattern.SteadyOn">
            <summary>
            LED permanently on (when enabled). Appropriate for indication of simple on/off status.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.CadencePattern.SteadyOff">
            <summary>
            LED permanently off, even when enabled. Appropriate for indication of simple on/off status.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.CadencePattern.BlinkFast">
            <summary>
            Fast blink, appropriate for non-critical ongoing change of state (eg Slewing).
            </summary>
        </member>
        <member name="F:ASCOM.Controls.CadencePattern.BlinkSlow">
            <summary>
            Slow blink, appropriate for non-critical persistent conditions (e.g. image exposure in progress).
            </summary>
        </member>
        <member name="F:ASCOM.Controls.CadencePattern.BlinkAlarm">
            <summary>
            Very fast blink, appropriate for drawing attention to urgent conditions that require operator intervention.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.CadencePattern.Wink">
            <summary>
            Wink (mostly on with occasional short wink-off), appropriate for indicating non-critical ongoing steady state.
            </summary>
        </member>
        <member name="T:ASCOM.Controls.LEDIndicator">
            <summary>
            Provides an indicator lamp similar in appearance to a rectangular LED.
            The lamp can be red, yellow or green (traffic light colours) and
            can be steady or can flash with a choice of different cadences.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.cCadenceSteadyOn">
            <summary>
            LED cadence mask for steady-on
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.cCadenceSteadyOff">
            <summary>
            LED cadence mask for steady-off
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.cCadenceBlinkSlow">
            <summary>
            LED cadence mask for slow blink
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.cCadenceBlinkFast">
            <summary>
            LED cadence mask for fast blink
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.#ctor">
            <summary>
            Default constructor for a new LEDIndicator object. Performs the default processing required
            by the designer.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.bRedOn">
            <summary>
            True if the RED portion of the LED is active
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.bGreenOn">
            <summary>
            True if the green portion of the LED is on
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.bPowerOn">
            <summary>
            When True, the LED indicator reflects the state of the Red, Green and Cadence settings.
            When False, the LED appears inactive (steady off).
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.bCadenceBit">
            <summary>
            While bPowerOn is true, the cadence bit controls whether the LED is on or off.
            For the LED to be On, bPowerOn and bCadenceBit must both be true, and at least one of
            bRedOn and bGreenOn must be true.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.eCadence">
            <summary>
            64-bit cadence bitmap that determines the duty cycle of the LED.
            Defaults to steady on cadence (not flashing).
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.i64ShiftReg">
            <summary>
            Working copy of the cadence bitmap, used as a shift register.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.nBit">
            <summary>
            Counter that keeps track of the position of the shift register.
            Counts down from 64 and when it decrements to zero, the shift register
            is reloaded from the cadence bitmap.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.panelLED">
            <summary>
            Internal panel control that is used to display the LED's colour.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.labelLED">
            <summary>
            Internal control used to display the LED's text label.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.timerCadence">
            <summary>
            Internal timer object used to time the flashing cadence of the LED.
            </summary>
        </member>
        <member name="F:ASCOM.Controls.LEDIndicator.uiTicksPerCadenceBit">
            <summary>
            The number of system clock ticks per cadence bit.
            Determines the flashing speed of an LED indicator.
            Defaults to 500ms per bit.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.RefreshLED">
            <summary>
            Refreshes the LED display, taking account of the power,
            colour and cadence settings.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.SetColour(System.Drawing.Color)">
            <summary>
            Sets the colour of the LED. This method is thread-safe.
            This is intended primarily for use in the Tick event of the
            cadence timer.
            </summary>
            <param name="ledColour">The led colour.</param>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.timerCadence_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Updates the LED on/off status based on the specified cadence pattern.
            If the cadence has been changed to a continuous pattern, then the timer is disabled.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.ConfigureCadence(System.Object,System.Object)">
            <summary>
            Compares the two objects for inequality (change of state).
            If there is a difference, the LED cadence needs to be configured
            and the display refreshed.
            </summary>
            <param name="oOld">Old object value</param>
            <param name="oNew">New object value</param>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.EnableCadence">
            <summary>
            Configures and starts the cadence timer
            </summary>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.ReloadCadenceShiftRegister">
            <summary>
            Reloads the cadence shift register based on the user-selected cadence pattern
            and resets the shift register bit counter.
            </summary>
        </member>
        <member name="M:ASCOM.Controls.LEDIndicator.DisableCadence">
            <summary>
            Stops the cadence timer, effectively disabling cadencing.
            </summary>
        </member>
        <member name="P:ASCOM.Controls.LEDIndicator.Red">
            <summary>
            Gets or sets the red component of the LED
            </summary>
        </member>
        <member name="P:ASCOM.Controls.LEDIndicator.Green">
            <summary>
            Gets or sets the Green component of the LED
            </summary>
        </member>
        <member name="P:ASCOM.Controls.LEDIndicator.LabelText">
            <summary>
            Sets the text displayed alongside the indicator
            </summary>
        </member>
        <member name="P:ASCOM.Controls.LEDIndicator.Enabled">
            <summary>
            Sets or reads the 'power status' of the LED
            When the LED is Enabled, it reflects the current colour settings and cadence.
            When disabled, the LED appears off and cadencing is disabled.
            </summary>
        </member>
        <member name="P:ASCOM.Controls.LEDIndicator.Cadence">
            <summary>
            Gets or sets the LED cadence bitmap.
            If the cadence has changed and is non-steady and the LED is enabled, then the cadence timer is started.
            </summary>
        </member>
        <member name="T:ASCOM.Controls.LEDIndicator.SetColourDelegate">
            <summary>
            Defines the delegate used to set the LED's display colour.
            This is used to update the control in a thread-safe manner.
            </summary>
            <param name="ledColour">The desired LED colour.</param>
        </member>
        <member name="T:ASCOM.Controls.ChooserMRU">
            <summary>
            Most Recently Used list for the Chooser.
            </summary>
            <remarks>
            The MRU list remembers which components where last used by the user. Each time the chooser
            is used, the MRU list is updated. This functionality is encapsulated in its own class so that
            In this implementation, the data happens to be stored in the ASCOM registry area.
            </remarks>
        </member>
        <member name="M:ASCOM.Controls.ChooserMRU.#ctor">
            <summary>
            Default public constructor, sets up the default device class.
            </summary>
        </member>
        <member name="P:ASCOM.Controls.ChooserMRU.MRUType">
            <summary>
            Sets the DriverClass that is to be considered. If not set, defaults to "Telescope".
            </summary>
        </member>
        <member name="P:ASCOM.Controls.ChooserMRU.MostRecentlyUsedDeviceID">
            <summary>
            Gets or sets the MRU entry for the current device type (as specified in the
            <see cref="P:ASCOM.Controls.ChooserMRU.MRUType"/> property).
            </summary>
        </member>
    </members>
</doc>
