// Created by Microsoft (R) C/C++ Compiler Version 14.00.50727.762 (9cbb3263).
//
// c:\documents and settings\robert b. denny\my documents\visual studio 2005\projects\ascom\helpercilentc++\debug\helper.tli
//
// Wrapper implementations for Win32 type library c:\\Program Files\\Common files\\ASCOM\\Helper.dll
// compiler-generated file created 05/08/07 at 12:45:30 - DO NOT EDIT!

#pragma once

//
// interface _Profile wrapper method implementations
//

inline _bstr_t _Profile::GetDeviceType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _Profile::PutDeviceType ( BSTR * _arg1 ) {
    HRESULT _hr = put_DeviceType(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL _Profile::IsRegistered ( _bstr_t DriverID ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRegistered(DriverID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _Profile::Register ( _bstr_t DriverID, _bstr_t DescriptiveName ) {
    HRESULT _hr = raw_Register(DriverID, DescriptiveName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Profile::Unregister ( _bstr_t DriverID ) {
    HRESULT _hr = raw_Unregister(DriverID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t _Profile::GetValue ( _bstr_t DriverID, _bstr_t Name, _bstr_t SubKey ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetValue(DriverID, Name, SubKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT _Profile::WriteValue ( _bstr_t DriverID, _bstr_t Name, _bstr_t Value, _bstr_t SubKey ) {
    HRESULT _hr = raw_WriteValue(DriverID, Name, Value, SubKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Scripting::IDictionaryPtr _Profile::Values ( _bstr_t DriverID, _bstr_t SubKey ) {
    struct Scripting::IDictionary * _result = 0;
    HRESULT _hr = raw_Values(DriverID, SubKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Scripting::IDictionaryPtr(_result, false);
}

inline HRESULT _Profile::DeleteValue ( _bstr_t DriverID, _bstr_t Name, _bstr_t SubKey ) {
    HRESULT _hr = raw_DeleteValue(DriverID, Name, SubKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _Profile::CreateSubKey ( _bstr_t DriverID, _bstr_t SubKey ) {
    HRESULT _hr = raw_CreateSubKey(DriverID, SubKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline Scripting::IDictionaryPtr _Profile::SubKeys ( _bstr_t DriverID, _bstr_t SubKey ) {
    struct Scripting::IDictionary * _result = 0;
    HRESULT _hr = raw_SubKeys(DriverID, SubKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Scripting::IDictionaryPtr(_result, false);
}

inline HRESULT _Profile::DeleteSubKey ( _bstr_t DriverID, _bstr_t SubKey ) {
    HRESULT _hr = raw_DeleteSubKey(DriverID, SubKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
