<?xml version="1.0" encoding="utf-8"?>
<topic id="caf6b21d-755a-4f1c-891f-ce971a9a2f79" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <section address="MultiThreading">
      <title>Drivers and Multi-Threading</title>
      <content>
         <para>Client applications that use ASCOM drivers are becoming increasingly sophisticated in their 
         use of multiple threads to provide
         a comprehensive and responsive user experience. This being the case, drivers authors have to 
         ensure that their drivers will perform well if used by such applications. So, what does this mean for 
         a driver author?
		 </para>
		 <para>The key question to ask yourself is what will happen if two or more of your properties or methods are called at
		 the same time? For each of these you should be clear about whether it can function independently or whether 
		 it has dependencies. 
		 In many cases the communication channel to the hardware that you are driving will be such a dependency
		 and this will definitely be the case if you use a serial port as these can generally do just one thing at 
		 a time!</para>
		 
		 <para>The ASCOM Serial component has a measure of protection built in which prevents multiple 
		 simultaneous use of the serial port by multi-threaded applications when using its transmit and receive
		 mehtods. This however is unlikely to be sufficient for your needs as in many cases you will need to 
		 transmit something to your device and then wait for its reply while blocking any attempts by other 
		 threads to interrupt your "transmit - receive" transaction.
		 </para>
		 
		 <para>In the .NET world there are a variety of mechanics including Mutexes, Monitors and Semaphores each with its 
		 own pros and cons. Mutexes are a good place to start if you are unsure. In other languages you will need to 
		 check out what synchronisation features are provided.
		 </para>
		 
		 <para>The example below shows how to protect a transmit - receive transaction with a mutex. The key 
		 synchronisation lines are SerMutex.WaitOne and SerMutex.ReleaseMutex in the SerialWorker class. The rest
		 of the code is to create the multiple threads in order to demonstrate that the mutex works! If you do try 
		 this out you should find that each command receives the response that it is expecting. If you comment out
		 the two SerMutex lines, you will find that from time to time a thread will pick up the response from 
		 another thread because that second thread just happend to get in between the SerPort.Transmit 
		 and SerPort.ReceiveTerminated commands of the first thread.</para> 
		 <para>This is impossible when the mutexes are in place because although the seond thread starts, it
		 gets hung up on its SerMutex.WaitOne until the first thread releases the mutex.</para>
		 
		 <para>CommandString and CommandBool are specific (but are unlikely to be the only cases) where you should 
		 use synchronisation to ensure that you get the correct response to the command that you sent.</para>
		
		<code lang="vbnet" title="ASCOM Serial Threading Examples" 
      	source="..\ASCOM Platform Examples\Examples\SerialThreadingExamples.vb" />

		
      </content>
    </section>
  </developerConceptualDocument>
</topic>