// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: NOVAS2.dll

#define VARIANT_TRUE ((VARIANT_BOOL)-1)
#define VARIANT_FALSE ((VARIANT_BOOL)0)

#if (__midl >= 501)
midl_pragma warning( disable: 2400 2401 )   // rbd These warnings are n/a
#endif

[
  uuid(E52CFA21-6B98-4D49-833E-584787E85B32),
  version(2.0),
  helpstring("NOVAS-COM USNO Astrometry Component V2.0"),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 100663643),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 1184949082),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 6.00.0347 at Fri Jul 20 09:31:19 2007"),
  custom(0F21F359-AB84-41E8-9A78-36D110E6D2F9, "ASCOM.NOVAS2")

]
library NOVAS
{
    // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IEarth;
    interface IPositionVector;
    interface IVelocityVector;
    interface IStar;
    interface ISite;
    interface IPlanet;

  typedef [uuid(E52CFA31-6B98-4D49-833E-584787E85B32), helpstring("Ephemeris body types")]
    enum BodyType {
        nvMajorPlanet = 0,
        nvMinorPlanet = 1,
        nvComet = 2
    } BodyType;  
    
    [
      uuid(E52CFA22-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS-COM Earth Class")
    ]
    coclass Earth {
        [default] interface IEarth;
    };

    //
    // Interfaces and CoClasses
    //

    [
      odl,
      uuid(E52CFA23-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS-COM Earth Interface"),
      dual,
      oleautomation
    ]
    interface IEarth : IDispatch {
        [id(0x00000001), propget, helpstring("Barycentric position vector, AU (ref J2000)")]
        HRESULT BarycentricPosition([out, retval] IPositionVector** ppVal);
        [id(0x00000002), propget, helpstring("Barycentric velocity vector, AU/day (ref J2000)")]
        HRESULT BarycentricVelocity([out, retval] IVelocityVector** ppVal);
        [id(0x00000003), propget, helpstring("Heliocentric position vector, AU (ref J2000)")]
        HRESULT HeliocentricPosition([out, retval] IPositionVector** ppVal);
        [id(0x00000004), propget, helpstring("Heliocentric velocity vector, AU/day (ref J2000)")]
        HRESULT HeliocentricVelocity([out, retval] IVelocityVector** ppVal);
        [id(0x00000005), propget, helpstring("Barycentric dynamical time (Julian) for given tjd")]
        HRESULT BarycentricTime([out, retval] double* pVal);
        [id(0x00000006), propget, helpstring("Mean obliquity of the ecliptic, degrees")]
        HRESULT MeanObliquity([out, retval] double* pVal);
        [id(0x00000007), propget, helpstring("True obliquity of the ecliptic, degrees")]
        HRESULT TrueObliquity([out, retval] double* pVal);
        [id(0x00000008), propget, helpstring("Nutation in longitude, degrees")]
        HRESULT NutationInLongitude([out, retval] double* pVal);
        [id(0x00000009), propget, helpstring("Nutation in obliquity, degrees")]
        HRESULT NutationInObliquity([out, retval] double* pVal);
        [id(0x0000000a), propget, helpstring("Equation of the equinoxes, seconds")]
        HRESULT EquationOfEquinoxes([out, retval] double* pVal);
        [id(0x0000000b), helpstring("Set for given terrestrial Julian date/time")]
        HRESULT SetForTime(
                        [in] double tjd, 
                        [out, retval] VARIANT_BOOL* OK);
        [id(0x0000000c), propget, helpstring("The Ephemeris object used to provide the position of the Earth. This must be provided by an Automation server that implements specific functions. See the NOVAS-COM documentation.")]
        HRESULT EarthEphemeris([out, retval] IDispatch** pVal);
        [id(0x0000000c), propput, helpstring("The Ephemeris object used to provide the position of the Earth. This must be provided by an Automation server that implements specific functions. See the NOVAS-COM documentation.")]
        HRESULT EarthEphemeris([in] IDispatch* pVal);
    };

    [
      odl,
      uuid(E52CFA25-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS-COM PositionVector Interface"),
      dual,
      oleautomation
    ]
    interface IPositionVector : IDispatch {
        [id(0x00000001), propget, helpstring("x component")]
        HRESULT x([out, retval] double* pVal);
        [id(0x00000001), propput, helpstring("x component")]
        HRESULT x([in] double pVal);
        [id(0x00000002), propget, helpstring("y component")]
        HRESULT y([out, retval] double* pVal);
        [id(0x00000002), propput, helpstring("y component")]
        HRESULT y([in] double pVal);
        [id(0x00000003), propget, helpstring("z component")]
        HRESULT z([out, retval] double* pVal);
        [id(0x00000003), propput, helpstring("z component")]
        HRESULT z([in] double pVal);
        [id(0x00000004), propget, helpstring("Light time from body to Earth, days.")]
        HRESULT LightTime([out, retval] double* pVal);
        [id(0x00000005), propget, helpstring("RightAscension coordinate, hours")]
        HRESULT RightAscension([out, retval] double* pVal);
        [id(0x00000006), propget, helpstring("Declination coordinate, degrees")]
        HRESULT Declination([out, retval] double* pVal);
        [id(0x00000007), propget, helpstring("Distance/Radius coordinate, AU")]
        HRESULT Distance([out, retval] double* pVal);
        [id(0x00000008), helpstring("Precess from one epoch to another.")]
        HRESULT Precess(
                        [in] double tjd, 
                        [in] double tjd2);
        [id(0x00000009), helpstring("Correct for aberration of light.")]
        HRESULT Aberration([in] IVelocityVector* vel);
        [id(0x0000000a), helpstring("Applies proper motion, including foreshortening effects, to a star's position.")]
        HRESULT ProperMotion(
                        [in] IVelocityVector* vel, 
                        [in] double tjd1, 
                        [in] double tjd2, 
                        [out, retval] VARIANT_BOOL* OK);
        [id(0x0000000b), helpstring("Make position of star from a Star object")]
        HRESULT SetFromStar(
                        [in] IStar* star, 
                        [out, retval] VARIANT_BOOL* OK);
        [id(0x0000000c), helpstring("Make position of site at given Greenwich apparent sidereal time")]
        HRESULT SetFromSite(
                        [in] ISite* site, 
                        [in] double gast, 
                        [out, retval] VARIANT_BOOL* OK);
        [id(0x0000000d), propget, helpstring("property Elevation")]
        HRESULT Elevation([out, retval] double* pVal);
        [id(0x0000000e), propget, helpstring("property Azimuth")]
        HRESULT Azimuth([out, retval] double* pVal);
        [id(0x0000000f), helpstring("Make position of site at given UTC julian date")]
        HRESULT SetFromSiteJD(
                        [in] ISite* site, 
                        [in] double ujd, 
                        [in, optional, defaultvalue(0)] double delta_t, 
                        [out, retval] VARIANT_BOOL* OK);
    };

    [
      odl,
      uuid(E52CFA27-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS_COM VelocityVector Interface"),
      dual,
      oleautomation
    ]
    interface IVelocityVector : IDispatch {
        [id(0x00000001), propget, helpstring("x component")]
        HRESULT x([out, retval] double* pVal);
        [id(0x00000001), propput, helpstring("x component")]
        HRESULT x([in] double pVal);
        [id(0x00000002), propget, helpstring("y component")]
        HRESULT y([out, retval] double* pVal);
        [id(0x00000002), propput, helpstring("y component")]
        HRESULT y([in] double pVal);
        [id(0x00000003), propget, helpstring("z component")]
        HRESULT z([out, retval] double* pVal);
        [id(0x00000003), propput, helpstring("z component")]
        HRESULT z([in] double pVal);
        [id(0x00000004), propget, helpstring("Linear velocity along the right ascension direction")]
        HRESULT RAVelocity([out, retval] double* pVal);
        [id(0x00000005), propget, helpstring("Linear velocity along the declination direction")]
        HRESULT DecVelocity([out, retval] double* pVal);
        [id(0x00000006), propget, helpstring("Linear velocity along the radial direction")]
        HRESULT RadialVelocity([out, retval] double* pVal);
        [id(0x00000007), helpstring("Make velocity of star from a Star object")]
        HRESULT SetFromStar(
                        [in] IStar* star, 
                        [out, retval] VARIANT_BOOL* OK);
        [id(0x00000008), helpstring("Make velocity of site at given Greenwich apparent sidereal time")]
        HRESULT SetFromSite(
                        [in] ISite* site, 
                        [in] double gast, 
                        [out, retval] VARIANT_BOOL* OK);
        [id(0x00000009), helpstring("Make velocity of site at given UTC Julian date")]
        HRESULT SetFromSiteJD(
                        [in] ISite* site, 
                        [in] double ujd, 
                        [in, optional, defaultvalue(0)] double delta_t, 
                        [out, retval] VARIANT_BOOL* OK);
    };

    [
      odl,
      uuid(E52CFA2B-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS-COM Star Interface"),
      dual,
      oleautomation
    ]
    interface IStar : IDispatch {
        [id(0x00000001), propget, helpstring("J2000 right ascension coordinate, hours")]
        HRESULT RightAscension([out, retval] double* pVal);
        [id(0x00000001), propput, helpstring("J2000 right ascension coordinate, hours")]
        HRESULT RightAscension([in] double pVal);
        [id(0x00000002), propget, helpstring("J2000 declination coordinate, degrees")]
        HRESULT Declination([out, retval] double* pVal);
        [id(0x00000002), propput, helpstring("J2000 declination coordinate, degrees")]
        HRESULT Declination([in] double pVal);
        [id(0x00000003), propget, helpstring("J2000 proper motion in right ascension, sec/century")]
        HRESULT ProperMotionRA([out, retval] double* pVal);
        [id(0x00000003), propput, helpstring("J2000 proper motion in right ascension, sec/century")]
        HRESULT ProperMotionRA([in] double pVal);
        [id(0x00000004), propget, helpstring("J2000 proper motion in declination, arcsec/century")]
        HRESULT ProperMotionDec([out, retval] double* pVal);
        [id(0x00000004), propput, helpstring("J2000 proper motion in declination, arcsec/century")]
        HRESULT ProperMotionDec([in] double pVal);
        [id(0x00000005), propget, helpstring("J2000 parallax, arcsec")]
        HRESULT Parallax([out, retval] double* pVal);
        [id(0x00000005), propput, helpstring("J2000 parallax, arcsec")]
        HRESULT Parallax([in] double pVal);
        [id(0x00000006), propget, helpstring("J2000 radial velocity, km/sec")]
        HRESULT RadialVelocity([out, retval] double* pVal);
        [id(0x00000006), propput, helpstring("J2000 radial velocity, km/sec")]
        HRESULT RadialVelocity([in] double pVal);
        [id(0x00000007), helpstring("Initialize all properties with one method call")]
        HRESULT Set(
                        [in] double RA, 
                        [in] double Dec, 
                        [in] double ProMoRA, 
                        [in] double ProMoDec, 
                        [in] double Parallax, 
                        [in] double RadVel);
        [id(0x00000008), helpstring("Get a topocentric position vector for given site and time")]
        HRESULT GetTopocentricPosition(
                        [in] double tjd, 
                        [in] ISite* site, 
                        [in] VARIANT_BOOL Refract, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x00000009), helpstring("Get a local position vector for given site and time")]
        HRESULT GetLocalPosition(
                        [in] double tjd, 
                        [in] ISite* site, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x0000000a), helpstring("Get an apparent position vector for time")]
        HRESULT GetApparentPosition(
                        [in] double tjd, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x0000000b), helpstring("Get a virtual position vector for time")]
        HRESULT GetVirtualPosition(
                        [in] double tjd, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x0000000c), propget, helpstring("The 3 character catalog code for the star's data")]
        HRESULT Catalog([out, retval] BSTR* pVal);
        [id(0x0000000c), propput, helpstring("The 3 character catalog code for the star's data")]
        HRESULT Catalog([in] BSTR pVal);
        [id(0x0000000d), propget, helpstring("The catalog name of the star (50 char max)")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x0000000d), propput, helpstring("The catalog name of the star (50 char max)")]
        HRESULT Name([in] BSTR pVal);
        [id(0x0000000e), propget, helpstring("The catalog number of the star (Long)")]
        HRESULT Number([out, retval] long* pVal);
        [id(0x0000000e), propput, helpstring("The catalog number of the star (Long)")]
        HRESULT Number([in] long pVal);
        [id(0x0000000f), helpstring("Set in one call using Hipparcos data. Transforms to FK5 standard used by NOVAS.")]
        HRESULT SetHipparcos(
                        [in] double RA, 
                        [in] double Dec, 
                        [in] double ProMoRA, 
                        [in] double ProMoDec, 
                        [in] double Parallax, 
                        [in] double RadVel);
        [id(0x00000010), propget, helpstring("The Ephemeris object used to provide the position of the Earth. This must be provided by an Automation server that implements specific functions. See the NOVAS-COM documentation.")]
        HRESULT EarthEphemeris([out, retval] IDispatch** pVal);
        [id(0x00000010), propput, helpstring("The Ephemeris object used to provide the position of the Earth. This must be provided by an Automation server that implements specific functions. See the NOVAS-COM documentation.")]
        HRESULT EarthEphemeris([in] IDispatch* pVal);
        [id(0x00000011), helpstring("Get an astrometric position vector for time")]
        HRESULT GetAstrometricPosition(
                        [in] double tjd, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x00000012), propget, helpstring("property DeltaT")]
        HRESULT DeltaT([out, retval] double* pVal);
        [id(0x00000012), propput, helpstring("property DeltaT")]
        HRESULT DeltaT([in] double pVal);
    };

    [
      odl,
      uuid(E52CFA29-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS-COM Site Interface"),
      dual,
      oleautomation
    ]
    interface ISite : IDispatch {
        [id(0x00000001), propget, helpstring("Geodetic latitude, degrees, + north")]
        HRESULT Latitude([out, retval] double* pVal);
        [id(0x00000001), propput, helpstring("Geodetic latitude, degrees, + north")]
        HRESULT Latitude([in] double pVal);
        [id(0x00000002), propget, helpstring("Geodetic longitude, degrees, + east")]
        HRESULT Longitude([out, retval] double* pVal);
        [id(0x00000002), propput, helpstring("Geodetic longitude, degrees, + east")]
        HRESULT Longitude([in] double pVal);
        [id(0x00000003), propget, helpstring("Height, meters")]
        HRESULT Height([out, retval] double* pVal);
        [id(0x00000003), propput, helpstring("Height, meters")]
        HRESULT Height([in] double pVal);
        [id(0x00000004), helpstring("Set all properties in one method call")]
        HRESULT Set(
                        [in] double Latitude, 
                        [in] double Longitude, 
                        [in] double Height);
        [id(0x00000005), propget, helpstring("Ambient temperature, deg. celsius")]
        HRESULT Temperature([out, retval] double* pVal);
        [id(0x00000005), propput, helpstring("Ambient temperature, deg. celsius")]
        HRESULT Temperature([in] double pVal);
        [id(0x00000006), propget, helpstring("Barometric pressure, millibars")]
        HRESULT Pressure([out, retval] double* pVal);
        [id(0x00000006), propput, helpstring("Barometric pressure, millibars")]
        HRESULT Pressure([in] double pVal);
    };

    [
      uuid(E52CFA24-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS-COM PositionVector Class")
    ]
    coclass PositionVector {
        [default] interface IPositionVector;
    };

    [
      uuid(E52CFA26-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS_COM VelocityVector Class")
    ]
    coclass VelocityVector {
        [default] interface IVelocityVector;
    };

    [
      uuid(E52CFA28-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS-COM Site Class")
    ]
    coclass Site {
        [default] interface ISite;
    };

    [
      uuid(E52CFA2A-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("NOVAS-COM Star Class")
    ]
    coclass Star {
        [default] interface IStar;
    };

    [
      uuid(E52CFA2C-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("Planet Class")
    ]
    coclass Planet {
        [default] interface IPlanet;
    };

    [
      odl,
      uuid(E52CFA2D-6B98-4D49-833E-584787E85B32),
      version(2.0),
      helpstring("IPlanet Interface"),
      dual,
      oleautomation
    ]
    interface IPlanet : IDispatch {
        [id(0x00000001), propget, helpstring("The Ephemeris object used to provide positions of solar system  bodies. This must be provided by an Automation server that implements specific functions. See the NOVAS-COM documentation.")]
        HRESULT Ephemeris([out, retval] IDispatch** pVal);
        [id(0x00000001), propput, helpstring("The Ephemeris object used to provide positions of solar system  bodies. This must be provided by an Automation server that implements specific functions. See the NOVAS-COM documentation.")]
        HRESULT Ephemeris([in] IDispatch* pVal);
        [id(0x00000002), propget, helpstring("The Ephemeris object used to provide the position of the Earth. This must be provided by an Automation server that implements specific functions. See the NOVAS-COM documentation.")]
        HRESULT EarthEphemeris([out, retval] IDispatch** pVal);
        [id(0x00000002), propput, helpstring("The Ephemeris object used to provide the position of the Earth. This must be provided by an Automation server that implements specific functions. See the NOVAS-COM documentation.")]
        HRESULT EarthEphemeris([in] IDispatch* pVal);
        [id(0x00000003), propget, helpstring("The type of solar system body (BodyType, default=nvMajorPlanet)")]
        HRESULT Type([out, retval] BodyType* pVal);
        [id(0x00000003), propput, helpstring("The type of solar system body (BodyType, default=nvMajorPlanet)")]
        HRESULT Type([in] BodyType pVal);
        [id(0x00000004), propget, helpstring("For major planets (Type=nvMajorPlanet), a PlanetNumber value. For minor planets (Type=nvMinorPlanet), the number of the minor planet or 0 for unnumbered minor planet.")]
        HRESULT Number([out, retval] long* pVal);
        [id(0x00000004), propput, helpstring("For major planets (Type=nvMajorPlanet), a PlanetNumber value. For minor planets (Type=nvMinorPlanet), the number of the minor planet or 0 for unnumbered minor planet.")]
        HRESULT Number([in] long pVal);
        [id(0x00000005), propget, helpstring("For unnumbered minor planets (Type=nvMinorPlanet & Number=0), the packed designation for the minor planet. For other types, this is not significant, but may be used to store a name.")]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x00000005), propput, helpstring("For unnumbered minor planets (Type=nvMinorPlanet & Number=0), the packed designation for the minor planet. For other types, this is not significant, but may be used to store a name.")]
        HRESULT Name([in] BSTR pVal);
        [id(0x00000006), helpstring("Get a topocentric position vector for given site and time")]
        HRESULT GetTopocentricPosition(
                        [in] double tjd, 
                        [in] ISite* site, 
                        [in] VARIANT_BOOL Refract, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x00000007), helpstring("Get a local position vector for given site and time")]
        HRESULT GetLocalPosition(
                        [in] double tjd, 
                        [in] ISite* site, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x00000008), helpstring("Get an apparent position vector for given site and time")]
        HRESULT GetApparentPosition(
                        [in] double tjd, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x00000009), helpstring("Get a virtual position vector for given site and time")]
        HRESULT GetVirtualPosition(
                        [in] double tjd, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x0000000a), helpstring("Get an astrometric position vector for time")]
        HRESULT GetAstrometricPosition(
                        [in] double tjd, 
                        [out, retval] IPositionVector** ppPos);
        [id(0x0000000b), propget, helpstring("property DeltaT")]
        HRESULT DeltaT([out, retval] double* pVal);
        [id(0x0000000b), propput, helpstring("property DeltaT")]
        HRESULT DeltaT([in] double pVal);
    };


};

