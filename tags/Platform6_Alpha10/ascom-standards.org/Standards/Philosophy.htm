<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- #BeginTemplate "/Templates/Fixed_Fluid.dwt" --><!-- DW6 -->
 
<head><!-- #BeginEditable "Title" -->
<title>Interface Design Philosophy</title>

<script type="text/javascript" language="javascript" src="../jscripts/expando.js"></script>
<!-- #EndEditable -->

<link rel="stylesheet" type="text/css" href="../Styles/Fixed_Fluid.css" />

<script type="text/javascript" language="javascript" src="../jscripts/Navigation.js"></script>

</head>
 
<body>

<div id="banner">
	<img style="position: absolute; top: 20px; left: 20px;" alt="ASCOM Standards for Astronomy" src="../Images/ASCOM-Logo.jpg" />
	
	<div id="breadcrumbs">
	<script type="text/javascript" language="javascript">
	<!-- 
	breadcrumbs(); 
	-->
	</script>
</div>

	<div class="topmenucontainer">
    <script type="text/javascript" language="javascript">
      <!-- 
	        writemainmenu();
	        -->
    </script>
  </div>
</div>



<div id="leftcontent">


	<div class="LeftNav">
	<div class="center"><div class="north"><div class="south">
	<script type="text/javascript" language="javascript">
	<!-- 
	writesubmenu(); 
	-->
	</script>
	
	</div></div></div></div>

	<!-- #BeginEditable "LeftNav" -->	<!-- #EndEditable --></div>
<div id="centercontent">
	<!-- #BeginEditable "MainContent" -->
	<div class="article">
		<h3>Interface Design Philosophy</h3>
		<p>It's important to understand some general philosophical issues as applied to ASCOM driver interface designs. </p>
		<p>First, as stated in the <a href="../Developer/Principles.htm">General Principle</a> (Developer section), the job of a driver is to <span class="underline">hide all device-dependencies</span> from clients. If it were only that simple. Reaching an interface agreement always involves the interplay between the basic operations needed for the device, and the &quot;value added&quot; features present in some devices and not others. The makers of more sophisticated devices want their unique features to be exposed to clients, yet a driver by its nature cannot expose device dependent features! Our standards process requires the interface author to broker the interface agreement. </p>
		<p>There are some (semi-related) guiding principles that can be applied to maximize the chances of success:</p>
		<ul>
			<li><a href="javascript:;" id="simple" onclick="toggleSlide('sSimple');" title="click for details">Simple is better&#8230;</a>
				<div class="expando" style="display:block;" id="sSimple"><span id="tsSimple">Strive for elegance and simplicity. This is an art. </span>It's so easy and mindless to just dump everything you can think of into an interface spec. Require clear use-cases for functionality! If someone says &quot;it would be nice if&quot;, immediately <i>reject </i> the suggestion. Remember, the fewer members in the interface, the less work client developers have to do to use it! </div>
			</li>
			<li><a href="javascript:;" id="routine" onclick="toggleSlide('sRoutine');" title="click for details">Support only functions used for routine operation&#8230;</a>
				<div class="expando" style="display:block;" id="sRoutine"><span id="tsRoutine">Clients don't want to develop user interfaces for things that don't relate to their tasks. Many of the unique features of a device are aimed at making the device act closer to ideal. For example, telescope clients want to see a mount that points and tracks perfectly; functions that a particular mount uses to achieve pointing and tracking <i>improvement</i> aren't part of routine operation. This isn't black and white, though. For example, few mounts have absolute encoders, thus many mounts need to be synced before they can be used. It's probably a good idea to include syncing in the interface even though it's not strictly needed for routine operation. On the other hand, periodic error training/adjustment is always done offline, when not observing, so PEC training/adjustment controls should not be part of the interface.</span> </div>
			</li>
			<li><a href="javascript:;" id="perfect" onclick="toggleSlide('sPerfect');" title="click for details">Clients should see a perfect device&#8230;</a>
				<div class="expando" style="display:block;" id="sPerfect"><span id="tsPerfect">Some devices will inherently perform close to the ideal. Design the interface (at least initially) for a perfect device. Then add only those functions that are absolutely necessary during routine operation (observing). </span></div>
			</li>
			<li><a href="javascript:;" id="adapt" onclick="toggleSlide('sAdapt');" title="click for details">Minimize the need for clients to discover and adapt to device differences and limits&#8230;</a>
				<div class="expando" style="display:block;" id="sAdapt"><span id="tsAdapt">This can get tricky. It will be the focus of much of the negotiations over the interface. A family of devices may come in more than one flavor (e.g. simple vs German equatorial mounts) and the clients may need to know what flavor a device is (e.g., know whether it needs to manage flipping). Device limits fall into this category too. Do you provide functions to allow a client to discover slewing/tracking limits pro-actively, or do you raise an error when a client attempts to slew past the limits, or when the mount tracks into a limit? One general rule we've followed is to provide "CanWhatever" properties only for those functions that will "do something" when used. Other things that can be tried, and allowed to raise an error if not supported, don't have a CanWhatever property. The client can try using the function without altering the state of the device, and if no error is raised, the client can unwind that and know that the function is supported.</span></div>
			</li>
		</ul>
		<h3>Case Study </h3>
		<p>Let's look at these principles in action.  </p>
	</div>
	<script type="text/javascript" language="javascript">
	// Hide expando blocks at runtime. Allows editing in DW
	var divs = document.getElementsByTagName("div");
	for(var i = 0; i < divs.length; i++) {
		if(divs[i].style.display == "block")
			divs[i].style.display = "none";
	}
	</script>
	<!-- #EndEditable --></div>
<div id="footer">
	Copyright © 1998-2010, The ASCOM Initiative. 
	All rights reserved. </div>

</body>

<!-- #EndTemplate --></html>
