<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- #BeginTemplate "/Templates/Fixed_Fluid.dwt" --><!-- DW6 -->
 
<head><!-- #BeginEditable "Title" -->
<title>How ASCOM Works</title>
<style type="text/css">
<!--
.footnote {
	font-size: 8pt;
	font-style: normal;
	color: #00CCFF;
}
-->
</style>
<!-- #EndEditable -->

<link rel="stylesheet" type="text/css" href="../Styles/Fixed_Fluid.css" />

<script type="text/javascript" language="javascript" src="../jscripts/Navigation.js"></script>

</head>
 
<body>

<div id="banner">
	<img style="position: absolute; top: 20px; left: 20px;" alt="ASCOM Standards for Astronomy" src="../Images/ASCOM-Logo.jpg" />
	
	<div id="breadcrumbs">
	<script type="text/javascript" language="javascript">
	<!-- 
	breadcrumbs(); 
	-->
	</script>
</div>

	<div class="topmenucontainer">
    <script type="text/javascript" language="javascript">
      <!-- 
	        writemainmenu();
	        -->
    </script>
  </div>
</div>



<div id="leftcontent">


	<div class="LeftNav">
	<div class="center"><div class="north"><div class="south">
	<script type="text/javascript" language="javascript">
	<!-- 
	writesubmenu(); 
	-->
	</script>
	
	</div></div></div></div>

	<!-- #BeginEditable "LeftNav" -->	<!-- #EndEditable --></div>
<div id="centercontent">
	<!-- #BeginEditable "MainContent" -->
	<div class="article">
		<h3>How ASCOM Works</h3>
		<p>If you haven't yet read  <a href="WhyImportant.htm">Why are Drivers Important?</a>, now is the time to do so. Before you can understand how ASCOM works, you need to understand why ASCOM is what it is. If you are unfamiliar with Object-Oriented Programming in general, the following probably won't make much sense.</p>
		<h4>Background</h4>
		<p>The main  goal of ASCOM is to provide a driver-client layer to separate astronomy device-specifics from the application software that uses those devices. It is also a goal to make the drivers usable from all programming languages (that matter), leaving astronomy software developers the freedom to use the development tools and language(s) of their choice. <span class="underline">One driver must be usable from any language</span>. But each language has its own libraries, so how can one avoid needing to write the driver for some astro device multiple times, once for each language?</p>
		<p> Without going through the evolution of the ASCOM driver architecture, the answer is to use a service <i>built into the Windows OS </i> called COM. <a href="CompatLang.htm">Virtually all languages</a> on Windows already come with features that provide access to Windows OS services, <span class="underline">including COM</span>. Thus, a driver that is a COM object is accessible from <i>any language </i> without needing any extra/special libraries for that language. </p>
		<h4>Driver API </h4>
		<p>A driver, then, is a COM object. Its API consists of a set of standard properties and methods (&quot;members&quot;), as defined in the relevant <a href="../Standards/Index.htm">ASCOM interface specification</a>. A driver's ASCOM standard API appears within all Windows languages with the same member names and calling parameters (for methods). Permitted data types have been constrained to permit compatibility with all Windows languages. </p>
		<h4>How Drivers Work</h4>
		<p>So how does an astronomy software program (&quot;application&quot;, or &quot;app&quot;
		) use a driver? Let's use a simple example, a focuser, specifically a (hypothetical) MicroGlide Focuser. The MicroGlide connects to the computer via a serial port, and uses a simple ASCII command set. But the app doesn't need to know anything about the connection or the ASCII commands! It uses the <a href="http://download.ascom-standards.org/docs/Focuser.zip" target="aux">ASCOM Standard Focuser API</a>, which it sees looking into <i>any </i> focuser driver, including the one for the MicroGlide.</p>
		<h5>Step 1: Choosing and Configuring the Driver (one-time setup) </h5>
		<p>Since all focusers look the same to the app, it first has to give the user a chance to select the MicroGlide as the type of focuser he's using. To do this, the app uses a component that comes with the ASCOM Platform called the Chooser. Omitting the details, the app displays the Chooser and the user selects the <i>type </i> of focuser, MicroGlide, from a list. Once chosen, the user then clicks a Properties button. This loads the MicroGlide driver into the Chooser and asks the driver to show its configuration window. There, the user sets the COM port that the focuser is connected to, as well as anything else the MicroGlide needs for one-time configuration. The Chooser looks exactly the same regardless of which language the app is written in or which type of driver is being chosen. When the user finishes, he closes the config window and the Chooser. At this point, the MicroGlide driver saves the settings entered by the user then disappears from the system. Thus, the user's settings are remembered and need not be entered again unless something changes.</p>
		<h5>Step 2: Loading the Driver</h5>
		<p>When the user closes the Chooser, it returns the  <i>ID </i> of the MicroGlide driver to the app. At this point the app can load the driver by making a Windows function call that loads the driver and returns a <i>reference </i> to the loaded driver. For example:</p>
		<pre>string ID = Helper.Choose();            # Select the driver, return its ID
ASCOM.Focuser F = CreateObject(ID);     # Load the driver, return reference</pre>
		<h5>Step 3: Using the Driver</h5>
		<p>At this point, the app has a reference to the driver and using it, the app can reference any of the members of the ASCOM Standard Focuser interface.  For example:</p>
		<pre>F.Link = true;                          # Connect to the focuser unit
Print F.Position;                       # Display the focuser's position
F.Move(21432);                          # Move the focuser's position
while(F.IsMoving) wait;                 # Wait until it stops moving  </pre>
		<p>Note that at no time is the app's code aware of the COM port number (or even that a COM port is being used) or the ASCII protocol that the MicroGlide uses. Thus the app is completely independent of all of the specifics of the MicroGlide. It only needs to know about the ASCOM Standard Focuser API.</p>
		<h4>Why Use COM? </h4>
		<p>COM is built into Windows. Any language can use COM like it can display on the screen or write to a disk file. COM isn't an I/O service though, it is a Component Object service (hence the name which stands for Component Object Model). Components are a special type of object. Within any Object Oriented Programming  language, one can define and create objects, then use their members while treating the object as a black box. But Components are different. They exist <i>apart </i> from the app's code, and are <i>served by the operating system </i>. Once loaded, though, they can be used exactly like objects created in the native language. The cool thing, though, is that <span class="underline">one Component can be used by any program in any language</span>. This makes Components a natural choice for drivers, which after all are things that must be usable by any program in any language! </p>
		<h4>How COM Works</h4>
		<p>When an app asks the OS for a Component, it uses the ID of the component. IDs are system-wide. The location on disk of the Component is not important to the application. The OS has an <i>object broker </i> that uses the ID to locate the Component's code and activate it. Once the Component is activated, its constructor is called. Thereafter it is ready for use by the app. Multiple instances of a Component can be used by different apps simultaneously. The OS call that activates the Component returns a <i>reference </i> to the activated component. The Component reference is kept in a variable and used just like a reference to an object created in the app's native language. Thus the app's code see the Component as identical to one of it's own objects and uses it identically. Perhaps you can now see how powerful the Component concept is, and why it was a natural choice for ASCOM drivers. </p>
	</div>
	<!-- #EndEditable --></div>
<div id="footer">
	Copyright © 1998-2010, The ASCOM Initiative. 
	All rights reserved. </div>

</body>

<!-- #EndTemplate --></html>
