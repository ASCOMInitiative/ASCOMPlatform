<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RemoveASCOM</name>
    </assembly>
    <members>
        <member name="T:Utilities.TraceLogger">
             <summary>
             Creates a log file for a driver or application. Uses a similar file name and internal format to the serial logger. Multiple logs can be created simultaneously if needed.
             </summary>
             <remarks>
            <para>In automatic mode the file will be stored in an ASCOM folder within XP's My Documents folder or equivalent places 
             in other operating systems. Within the ASCOM folder will be a folder named Logs yyyy-mm-dd where yyyy, mm and dd are 
             today's year, month and day numbers. The trace file will appear within the day folder with the name 
             ASCOM.Identifier.hhmm.ssffff where hh, mm, ss and ffff are the current hour, minute, second and fraction of second 
             numbers at the time of file creation.
             </para> 
             <para>Within the file the format of each line is hh:mm:ss.fff Identifier Message where hh, mm, ss and fff are the hour, minute, second 
             and fractional second at the time that the message was logged, Identifier is the supplied identifier (usually the subroutine, 
             function, property or method from which the message is sent) and Message is the message to be logged.</para>
            </remarks>
        </member>
        <member name="M:Utilities.TraceLogger.#ctor(System.String)">
            <summary>
            Creates a new TraceLogger instance and initialises filename and type
            </summary>
            <param name="logFileType">String identifying the type of log e,g, Focuser, LX200, GEMINI, MoonLite, G11</param>
            <remarks>The LogFileType is used in the file name to allow you to quickly identify which of several logs contains the information of interest.</remarks>
        </member>
        <member name="M:Utilities.TraceLogger.Dispose(System.Boolean)">
            <summary>
            Disposes of the TraceLogger object
            </summary>
            <param name="disposing">True if being disposed by the application, False if disposed by the finalizer.</param>
            <remarks></remarks>
        </member>
        <member name="M:Utilities.TraceLogger.Dispose">
            <summary>
            Disposes of the TraceLogger object
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Utilities.TraceLogger.BlankLine">
            <summary>
            Insert a blank line into the log file
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Utilities.TraceLogger.LogMessage(System.String,System.String,System.Boolean)">
            <summary>
            Logs a complete message in one call, including a hex translation of the message
            </summary>
            <param name="Identifier">Identifies the meaning of the message e.g. name of module or method logging the message.</param>
            <param name="Message">Message to log</param>
            <param name="HexDump">True to append a hex translation of the message at the end of the message</param>
            <remarks>
            <para>Use this for straightforward logging requirements. Writes all information in one command.</para>
            <para>Will create a LOGISSUE message in the log if called before a line started by LogStart has been closed with LogFinish. 
            Possible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
            </remarks>
        </member>
        <member name="M:Utilities.TraceLogger.LogMessageCrLf(System.String,System.String)">
            <summary>
            Displays a message respecting carriage return and linefeed characters
            </summary>
            <param name="Identifier">Identifies the meaning of the message e.g. name of module or method logging the message.</param>
            <param name="Message">The final message to terminate the line</param>
            <remarks>
            <para>Will create a LOGISSUE message in the log if called before a line has been started with LogStart.  
            Possible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
            </remarks>
        </member>
        <member name="P:Utilities.TraceLogger.Enabled">
            <summary>
            Enables or disables logging to the file.
            </summary>
            <value>True to enable logging</value>
            <returns>Boolean, current logging status (enabled/disabled).</returns>
            <remarks>If this property is false then calls to LogMsg, LogStart, LogContinue and LogFinish do nothing. If True, 
            supplied messages are written to the log file.</remarks>
        </member>
        <member name="M:Utilities.TraceLogger.LogMessage(System.String,System.String)">
            <summary>
            Logs a complete message in one call
            </summary>
            <param name="Identifier">Identifies the meaning of the message e.g. name of module or method logging the message.</param>
            <param name="Message">Message to log</param>
            <remarks>
            <para>Use this for straightforward logging requirements. Writes all information in one command.</para>
            <para>Will create a LOGISSUE message in the log if called before a line started by LogStart has been closed with LogFinish. 
            Possible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
            <para>This overload is not available through COM, please use 
            "LogMessage(ByVal Identifier As String, ByVal Message As String, ByVal HexDump As Boolean)"
            with HexDump set False to achieve this effect.</para>
            </remarks>
        </member>
        <member name="T:RemoveASCOM.Form1">
            <summary>
            Remove ASCOM Form class
            </summary>
        </member>
        <member name="M:RemoveASCOM.Form1.#ctor">
            <summary>
            Create the Remove ASCOM form.
            </summary>
        </member>
        <member name="M:RemoveASCOM.Form1.cmbRemoveMode_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Update colours and text when the type of removal is changed
            </summary>
            <param name="sender">Object creating the event</param>
            <param name="e">Event arguments</param>
            <remarks></remarks>
        </member>
        <member name="M:RemoveASCOM.Form1.btnRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Effect Platform removal
            </summary>
            <param name="sender">Object creating the event</param>
            <param name="e">Event arguments</param>
            <remarks></remarks>
        </member>
        <member name="M:RemoveASCOM.Form1.Form1_Load(System.Object,System.EventArgs)">
            <summary>
            Form load event handler
            </summary>
            <param name="sender">Object creating the event</param>
            <param name="e">Event arguments</param>
            <remarks></remarks>
        </member>
        <member name="M:RemoveASCOM.Form1.Form1_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            Form close event handler
            </summary>
            <param name="sender">Object creating the event</param>
            <param name="e">Event arguments</param>
            <remarks></remarks>
        </member>
        <member name="M:RemoveASCOM.Form1.btnExit_Click(System.Object,System.EventArgs)">
            <summary>
            Exit button event handler
            </summary>
            <param name="sender">Object creating the event</param>
            <param name="e">Event arguments</param>
            <remarks></remarks>
        </member>
        <member name="M:RemoveASCOM.Form1.RemovePlatformFiles">
            <summary>
            Remove specific Platform files only leaving the directory structure and 3rd party files intact.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:RemoveASCOM.Form1.RemovePlatformDirectories">
            <summary>
            Recursively removes all Platform directories and their contents regardless of whether the files are Platform or 3rd party provided.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:RemoveASCOM.Form1.DeleteFile(System.String)">
            <summary>
            Delete a single file, reporting success or an exception
            </summary>
            <param name="FileName">Full path to the file to delete</param>
            <remarks></remarks>
        </member>
        <member name="M:RemoveASCOM.Form1.Dispose(System.Boolean)">
            <summary>
            Dispose of the form
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:RemoveASCOM.ASM_DISPLAY_FLAGS">
            <summary>
            <see cref="M:RemoveASCOM.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,RemoveASCOM.ASM_DISPLAY_FLAGS)"/>
            </summary>
        </member>
        <member name="T:RemoveASCOM.ASM_NAME">
            <summary>
            The ASM_NAME enumeration property ID describes the valid names of the name-value pairs in an assembly name. 
            See the .NET Framework SDK for a description of these properties. 
            </summary>
        </member>
        <member name="T:RemoveASCOM.IASSEMBLYCACHE_UNINSTALL_DISPOSITION">
            <summary>
            <see cref="M:RemoveASCOM.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,RemoveASCOM.FusionInstallReference[],RemoveASCOM.IASSEMBLYCACHE_UNINSTALL_DISPOSITION@)"/>
            </summary>
        </member>
        <member name="T:RemoveASCOM.QUERYASMINFO_FLAG">
            <summary>
            <see cref="M:RemoveASCOM.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,RemoveASCOM.AssemblyInfo@)"/>
            </summary>
        </member>
        <member name="T:RemoveASCOM.IASSEMBLYCACHE_INSTALL_FLAG">
            <summary>
            <see cref="M:RemoveASCOM.IAssemblyCache.InstallAssembly(System.UInt32,System.String,RemoveASCOM.FusionInstallReference[])"/>
            </summary>
        </member>
        <member name="T:RemoveASCOM.CREATE_ASM_NAME_OBJ_FLAGS">
            <summary>
            The CREATE_ASM_NAME_OBJ_FLAGS enumeration contains the following values: 
            	CANOF_PARSE_DISPLAY_NAME - If this flag is specified, the szAssemblyName parameter is a full assembly name and is parsed to 
            		the individual properties. If the flag is not specified, szAssemblyName is the "Name" portion of the assembly name.
            	CANOF_SET_DEFAULT_VALUES - If this flag is specified, certain properties, such as processor architecture, are set to 
            		their default values.
            	<see cref="M:RemoveASCOM.AssemblyCache.CreateAssemblyNameObject(RemoveASCOM.IAssemblyName@,System.String,System.UInt32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="T:RemoveASCOM.ASM_CACHE_FLAGS">
            <summary>
            The ASM_CACHE_FLAGS enumeration contains the following values: 
            ASM_CACHE_ZAP - Enumerates the cache of precompiled assemblies by using Ngen.exe.
            ASM_CACHE_GAC - Enumerates the GAC.
            ASM_CACHE_DOWNLOAD - Enumerates the assemblies that have been downloaded on-demand or that have been shadow-copied.
            </summary>
        </member>
        <member name="T:RemoveASCOM.FusionInstallReference">
            <summary>
            The FUSION_INSTALL_REFERENCE structure represents a reference that is made when an application has installed an 
            assembly in the GAC. 
            The fields of the structure are defined as follows: 
            		cbSize - The size of the structure in bytes.
            		dwFlags - Reserved, must be zero.
            		guidScheme - The entity that adds the reference.
            		szIdentifier - A unique string that identifies the application that installed the assembly.
            		szNonCannonicalData - A string that is only understood by the entity that adds the reference. 
            				The GAC only stores this string.
            Possible values for the guidScheme field can be one of the following: 
            		FUSION_REFCOUNT_MSI_GUID - The assembly is referenced by an application that has been installed by using 
            				Windows Installer. The szIdentifier field is set to MSI, and szNonCannonicalData is set to Windows Installer. 
            				This scheme must only be used by Windows Installer itself.
            		FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID - The assembly is referenced by an application that appears in Add/Remove 
            				Programs. The szIdentifier field is the token that is used to register the application with Add/Remove programs.
            		FUSION_REFCOUNT_FILEPATH_GUID - The assembly is referenced by an application that is represented by a file in 
            				the file system. The szIdentifier field is the path to this file.
            		FUSION_REFCOUNT_OPAQUE_STRING_GUID - The assembly is referenced by an application that is only represented 
            				by an opaque string. The szIdentifier is this opaque string. The GAC does not perform existence checking 
            				for opaque references when you remove this.
            </summary>
        </member>
        <member name="T:RemoveASCOM.AssemblyInfo">
            <summary>
            The ASSEMBLY_INFO structure represents information about an assembly in the assembly cache. 
            The fields of the structure are defined as follows: 
            		cbAssemblyInfo - Size of the structure in bytes. Permits additions to the structure in future version of the .NET Framework.
            		dwAssemblyFlags - Indicates one or more of the ASSEMBLYINFO_FLAG_* bits.
            		uliAssemblySizeInKB - The size of the files that make up the assembly in kilobytes (KB).
            		pszCurrentAssemblyPathBuf - A pointer to a string buffer that holds the current path of the directory that contains the 
            				files that make up the assembly. The path must end with a zero.
            		cchBuf - Size of the buffer that the pszCurrentAssemblyPathBug field points to.
            	dwAssemblyFlags can have one of the following values: 
            		ASSEMBLYINFO_FLAG__INSTALLED - Indicates that the assembly is actually installed. Always set in current version of the 
            				.NET Framework.
            		ASSEMBLYINFO_FLAG__PAYLOADRESIDENT - Never set in the current version of the .NET Framework.
            </summary>
        </member>
        <member name="M:RemoveASCOM.AssemblyCache.CreateAssemblyCache(RemoveASCOM.IAssemblyCache@,System.UInt32)">
            <summary>
            The key entry point for reading the assembly cache.
            </summary>
            <param name="ppAsmCache">Pointer to return IAssemblyCache</param>
            <param name="dwReserved">must be 0</param>
        </member>
        <member name="M:RemoveASCOM.AssemblyCache.CreateAssemblyNameObject(RemoveASCOM.IAssemblyName@,System.String,System.UInt32,System.IntPtr)">
            <summary>
            An instance of IAssemblyName is obtained by calling the CreateAssemblyNameObject API.
            </summary>
            <param name="ppAssemblyNameObj">Pointer to a memory location that receives the IAssemblyName pointer that is created.</param>
            <param name="szAssemblyName">A string representation of the assembly name or of a full assembly reference that is 
            determined by dwFlags. The string representation can be null.</param>
            <param name="dwFlags">Zero or more of the bits that are defined in the CREATE_ASM_NAME_OBJ_FLAGS enumeration.</param>
            <param name="pvReserved"> Must be null.</param>
        </member>
        <member name="M:RemoveASCOM.AssemblyCache.CreateAssemblyEnum(RemoveASCOM.IAssemblyEnum@,System.IntPtr,RemoveASCOM.IAssemblyName,RemoveASCOM.ASM_CACHE_FLAGS,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateAssemblyEnum API, call the CreateAssemblyNameObject API.
            </summary>
            <param name="pEnum">Pointer to a memory location that contains the IAssemblyEnum pointer.</param>
            <param name="pUnkReserved">Must be null.</param>
            <param name="pName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <param name="dwFlags">Exactly one bit from the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pvReserved">Must be NULL.</param>
        </member>
        <member name="M:RemoveASCOM.AssemblyCache.CreateInstallReferenceEnum(RemoveASCOM.IInstallReferenceEnum@,RemoveASCOM.IAssemblyName,System.UInt32,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateInstallReferenceEnum API, call the CreateInstallReferenceEnum API.
            </summary>
            <param name="ppRefEnum">A pointer to a memory location that receives the IInstallReferenceEnum pointer.</param>
            <param name="pName">The assembly name for which the references are enumerated.</param>
            <param name="dwFlags"> Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
        </member>
        <member name="M:RemoveASCOM.AssemblyCache.GetCachePath(RemoveASCOM.ASM_CACHE_FLAGS,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            The GetCachePath API returns the storage location of the GAC. 
            </summary>
            <param name="dwCacheFlags">Exactly one of the bits defined in the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pwzCachePath">Pointer to a buffer that is to receive the path of the GAC as a Unicode string.</param>
            <param name="pcchPath">Length of the pwszCachePath buffer, in Unicode characters.</param>
        </member>
        <member name="P:RemoveASCOM.AssemblyCache.FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            The assembly is referenced by an application that has been installed by using Windows Installer. 
            The szIdentifier field is set to MSI, and szNonCannonicalData is set to Windows Installer. 
            This scheme must only be used by Windows Installer itself.
            </summary>
        </member>
        <member name="P:RemoveASCOM.AssemblyCache.FUSION_REFCOUNT_FILEPATH_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="P:RemoveASCOM.AssemblyCache.FUSION_REFCOUNT_OPAQUE_STRING_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="P:RemoveASCOM.AssemblyCache.FUSION_REFCOUNT_MSI_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="M:RemoveASCOM.AssemblyCache.CreateAssemblyCache">
            <summary>
            Use this method as a start for the GAC API
            </summary>
            <returns>IAssemblyCache COM interface</returns>
        </member>
        <member name="M:RemoveASCOM.AssemblyCache.GetNextAssembly(RemoveASCOM.IAssemblyEnum,RemoveASCOM.IAssemblyName@)">
            <summary>
            Get the next assembly name in the current enumerator or fail
            </summary>
            <param name="enumerator"></param>
            <param name="name"></param>
            <returns>0 if the enumeration is not at its end</returns>
        </member>
        <member name="T:RemoveASCOM.IAssemblyCache">
            <summary>
            The IAssemblyCache interface is the top-level interface that provides access to the GAC.
            </summary>
        </member>
        <member name="M:RemoveASCOM.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,RemoveASCOM.FusionInstallReference[],RemoveASCOM.IASSEMBLYCACHE_UNINSTALL_DISPOSITION@)">
            <summary>
            The IAssemblyCache::UninstallAssembly method removes a reference to an assembly from the GAC. 
            If other applications hold no other references to the assembly, the files that make up the assembly are removed from the GAC. 
            </summary>
            <param name="dwFlags">No flags defined. Must be zero.</param>
            <param name="pszAssemblyName">The name of the assembly. A zero-ended Unicode string.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. Although this is not recommended, 
            		this parameter can be null. The assembly is installed without an application reference, or all existing application 
            		references are gone.</param>
            <param name="pulDisposition">Pointer to an integer that indicates the action that is performed by the function.</param>
            <returns>The return values are defined as follows: 
            		S_OK - The assembly has been uninstalled.
            		S_FALSE - The operation succeeded, but the assembly was not removed from the GAC. 
            		The reason is described in pulDisposition.</returns>
            	<remarks>
            	NOTE: If pulDisposition is not null, pulDisposition contains one of the following values:
            		IASSEMBLYCACHE_UNINSTALL_DISPOSITION_UNINSTALLED - The assembly files have been removed from the GAC.
            		IASSEMBLYCACHE_UNINSTALL_DISPOSITION_STILL_IN_USE - An application is using the assembly. 
            			This value is returned on Microsoft Windows 95 and Microsoft Windows 98.
            		IASSEMBLYCACHE_UNINSTALL_DISPOSITION_ALREADY_UNINSTALLED - The assembly does not exist in the GAC.
            		IASSEMBLYCACHE_UNINSTALL_DISPOSITION_DELETE_PENDING - Not used.
            		IASSEMBLYCACHE_UNINSTALL_DISPOSITION_HAS_INSTALL_REFERENCES - The assembly has not been removed from the GAC because 
            			another application reference exists.
            		IASSEMBLYCACHE_UNINSTALL_DISPOSITION_REFERENCE_NOT_FOUND - The reference that is specified in pRefData is not found 
            			in the GAC.
            	</remarks>
        </member>
        <member name="M:RemoveASCOM.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,RemoveASCOM.AssemblyInfo@)">
            <summary>
            The IAssemblyCache::QueryAssemblyInfo method retrieves information about an assembly from the GAC. 
            </summary>
            <param name="dwFlags">One of QUERYASMINFO_FLAG_VALIDATE or QUERYASMINFO_FLAG_GETSIZE: 
            		*_VALIDATE - Performs validation of the files in the GAC against the assembly manifest, including hash verification 
            			and strong name signature verification.
            		*_GETSIZE - Returns the size of all files in the assembly (disk footprint). If this is not specified, the 
            			ASSEMBLY_INFO::uliAssemblySizeInKB field is not modified.</param>
            <param name="pszAssemblyName"></param>
            <param name="pAsmInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,RemoveASCOM.IAssemblyCacheItem@,System.String)">
            <summary>
            Undocumented
            </summary>
            <param name="dwFlags"></param>
            <param name="pvReserved"></param>
            <param name="ppAsmItem"></param>
            <param name="pszAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyCache.CreateAssemblyScavenger(System.Object@)">
            <summary>
            Undocumented
            </summary>
            <param name="ppAsmScavenger"></param>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyCache.InstallAssembly(System.UInt32,System.String,RemoveASCOM.FusionInstallReference[])">
            <summary>
            The IAssemblyCache::InstallAssembly method adds a new assembly to the GAC. The assembly must be persisted in the file 
            system and is copied to the GAC.
            </summary>
            <param name="dwFlags">At most, one of the bits of the IASSEMBLYCACHE_INSTALL_FLAG_* values can be specified: 
            		*_REFRESH - If the assembly is already installed in the GAC and the file version numbers of the assembly being 
            		installed are the same or later, the files are replaced.
            		*_FORCE_REFRESH - The files of an existing assembly are overwritten regardless of their version number.</param>
            <param name="pszManifestFilePath"> A string pointing to the dynamic-linked library (DLL) that contains the assembly manifest. 
            	Other assembly files must reside in the same directory as the DLL that contains the assembly manifest.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE that indicates the application on whose behalf the 
            assembly is being installed. Although this is not recommended, this parameter can be null, but this leaves the assembly 
            without any application reference.</param>
            <returns></returns>
        </member>
        <member name="T:RemoveASCOM.IAssemblyName">
            <summary>
            The IAssemblyName interface represents an assembly name. An assembly name includes a predetermined set of name-value pairs. 
            The assembly name is described in detail in the .NET Framework SDK.
            </summary>
        </member>
        <member name="M:RemoveASCOM.IAssemblyName.SetProperty(RemoveASCOM.ASM_NAME,System.IntPtr,System.UInt32)">
            <summary>
            The IAssemblyName::SetProperty method adds a name-value pair to the assembly name, or, if a name-value pair 
            with the same name already exists, modifies or deletes the value of a name-value pair.
            </summary>
            <param name="PropertyId">The ID that represents the name part of the name-value pair that is to be 
            added or to be modified. Valid property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that contains the value of the property.</param>
            <param name="cbProperty">The length of the pvProperty buffer in bytes. If cbProperty is zero, the name-value pair 
            is removed from the assembly name.</param>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyName.GetProperty(RemoveASCOM.ASM_NAME,System.IntPtr,System.UInt32@)">
            <summary>
            The IAssemblyName::GetProperty method retrieves the value of a name-value pair in the assembly name that specifies the name.
            </summary>
            <param name="PropertyId">The ID that represents the name of the name-value pair whose value is to be retrieved.
            Specified property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that is to contain the value of the property.</param>
            <param name="pcbProperty">The length of the pvProperty buffer, in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyName.Finalize">
            <summary>
            The IAssemblyName::Finalize method freezes an assembly name. Additional calls to IAssemblyName::SetProperty are 
            unsuccessful after this method has been called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,RemoveASCOM.ASM_DISPLAY_FLAGS)">
            <summary>
            The IAssemblyName::GetDisplayName method returns a string representation of the assembly name.
            </summary>
            <param name="szDisplayName">A pointer to a buffer that is to contain the display name. The display name is returned in Unicode.</param>
            <param name="pccDisplayName">The size of the buffer in characters (on input). The length of the returned display name (on return).</param>
            <param name="dwDisplayFlags">One or more of the bits defined in the ASM_DISPLAY_FLAGS enumeration: 
            		*_VERSION - Includes the version number as part of the display name.
            		*_CULTURE - Includes the culture.
            		*_PUBLIC_KEY_TOKEN - Includes the public key token.
            		*_PUBLIC_KEY - Includes the public key.
            		*_CUSTOM - Includes the custom part of the assembly name.
            		*_PROCESSORARCHITECTURE - Includes the processor architecture.
            		*_LANGUAGEID - Includes the language ID.</param>
            <returns></returns>
            <remarks>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp</remarks>
        </member>
        <member name="M:RemoveASCOM.IAssemblyName.BindToObject(System.Guid@,System.Object,System.Object,System.String,System.Int64,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Undocumented
            </summary>
            <param name="refIID"></param>
            <param name="pUnkSink"></param>
            <param name="pUnkContext"></param>
            <param name="szCodeBase"></param>
            <param name="llFlags"></param>
            <param name="pvReserved"></param>
            <param name="cbReserved"></param>
            <param name="ppv"></param>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyName.GetName(System.UInt32@,System.Text.StringBuilder)">
            <summary>
            The IAssemblyName::GetName method returns the name part of the assembly name.
            </summary>
            <param name="lpcwBuffer">Size of the pwszName buffer (on input). Length of the name (on return).</param>
            <param name="pwzName">Pointer to the buffer that is to contain the name part of the assembly name.</param>
            <returns></returns>
            <remarks>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp</remarks>
        </member>
        <member name="M:RemoveASCOM.IAssemblyName.GetVersion(System.UInt32@,System.UInt32@)">
            <summary>
            The IAssemblyName::GetVersion method returns the version part of the assembly name.
            </summary>
            <param name="pdwVersionHi">Pointer to a DWORD that contains the upper 32 bits of the version number.</param>
            <param name="pdwVersionLow">Pointer to a DWORD that contain the lower 32 bits of the version number.</param>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyName.IsEqual(RemoveASCOM.IAssemblyName,RemoveASCOM.ASM_CMP_FLAGS)">
            <summary>
            The IAssemblyName::IsEqual method compares the assembly name to another assembly names.
            </summary>
            <param name="pName">The assembly name to compare to.</param>
            <param name="dwCmpFlags">Indicates which part of the assembly name to use in the comparison. 
            Values are one or more of the bits defined in the ASM_CMP_FLAGS enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyName.Clone(RemoveASCOM.IAssemblyName@)">
            <summary>
            The IAssemblyName::Clone method creates a copy of an assembly name. 
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="T:RemoveASCOM.IAssemblyEnum">
            <summary>
            The IAssemblyEnum interface enumerates the assemblies in the GAC.
            </summary>
        </member>
        <member name="M:RemoveASCOM.IAssemblyEnum.GetNextAssembly(System.IntPtr,RemoveASCOM.IAssemblyName@,System.UInt32)">
            <summary>
            The IAssemblyEnum::GetNextAssembly method enumerates the assemblies in the GAC. 
            </summary>
            <param name="pvReserved">Must be null.</param>
            <param name="ppName">Pointer to a memory location that is to receive the interface pointer to the assembly 
            name of the next assembly that is enumerated.</param>
            <param name="dwFlags">Must be zero.</param>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyEnum.Reset">
            <summary>
            Undocumented. Best guess: reset the enumeration to the first assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RemoveASCOM.IAssemblyEnum.Clone(RemoveASCOM.IAssemblyEnum@)">
            <summary>
            Undocumented. Create a copy of the assembly enum that is independently enumerable.
            </summary>
            <param name="ppEnum"></param>
            <returns></returns>
        </member>
        <member name="T:RemoveASCOM.IInstallReferenceItem">
            <summary>
            The IInstallReferenceItem interface represents a reference that has been set on an assembly in the GAC. 
            Instances of IInstallReferenceIteam are returned by the IInstallReferenceEnum interface.
            </summary>
        </member>
        <member name="M:RemoveASCOM.IInstallReferenceItem.GetReference(RemoveASCOM.FusionInstallReference[]@,System.UInt32,System.IntPtr)">
            <summary>
            The IInstallReferenceItem::GetReference method returns a FUSION_INSTALL_REFERENCE structure. 
            </summary>
            <param name="ppRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. The memory is allocated by the GetReference 
            method and is freed when IInstallReferenceItem is released. Callers must not hold a reference to this buffer after the 
            IInstallReferenceItem object is released.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns></returns>
        </member>
        <member name="T:RemoveASCOM.IInstallReferenceEnum">
            <summary>
            The IInstallReferenceEnum interface enumerates all references that are set on an assembly in the GAC.
            NOTE: References that belong to the assembly are locked for changes while those references are being enumerated. 
            </summary>
        </member>
        <member name="M:RemoveASCOM.IInstallReferenceEnum.GetNextInstallReferenceItem(RemoveASCOM.IInstallReferenceItem@,System.UInt32,System.IntPtr)">
            <summary>
            IInstallReferenceEnum::GetNextInstallReferenceItem returns the next reference information for an assembly. 
            </summary>
            <param name="ppRefItem">Pointer to a memory location that receives the IInstallReferenceItem pointer.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns></returns>
        </member>
        <member name="T:RemoveASCOM.IAssemblyCacheItem">
            <summary>
            Undocumented. Probably only for internal use.
            <see cref="M:RemoveASCOM.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,RemoveASCOM.IAssemblyCacheItem@,System.String)"/>
            </summary>
        </member>
        <member name="M:RemoveASCOM.IAssemblyCacheItem.CreateStream(System.UInt32,System.String,System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.IStream@,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pszStreamName"></param>
            <param name="dwFormat"></param>
            <param name="dwFormatFlags"></param>
            <param name="ppIStream"></param>
            <param name="puliMaxSize"></param>
        </member>
        <member name="M:RemoveASCOM.IAssemblyCacheItem.Commit(System.UInt32,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pulDisposition"></param>
        </member>
        <member name="M:RemoveASCOM.IAssemblyCacheItem.AbortItem">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="M:RemoveASCOM.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:RemoveASCOM.Program.HandleApplicationException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Handle an un-handled application exception
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:RemoveASCOM.Program.HandleThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Handle an un-handled thread exception
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
    </members>
</doc>
