<?xml version="1.0"?>
<doc>
<assembly>
<name>
ASCOM.HelperNET
</name>
</assembly>
<members>
<member name="P:ASCOM.HelperNET.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:ASCOM.HelperNET.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:ASCOM.HelperNET.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITraceLogger.LogStart(System.String,System.String)">
	<summary>
 Writes the time and identifier to the log, leaving the line ready for further content through LogContinue and LogFinish
 </summary>
	<param name="Identifier">Identifies the meaning of the the message e.g. name of modeule or method logging the message.</param>
	<param name="Message">Message to log</param>
	<remarks><para>Use this to start a log line where you want to write further information on the line at a later time.</para>
		<para>E.g. You might want to use this to record that an action has started and then append the word OK if all went well.
  You would then end up with just one line to record the whole transaction even though you didn't know that it would be 
 successful when you started. If you just used LogMsg you would have ended up with two log lines, one showing 
 the start of the transaction and the next the outcome.</para>
		<para>Will create a LOGISSUE message in the log if called before a line started by LogStart has been closed with LogFinish. 
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITraceLogger.LogContinue(System.String)">
	<summary>
 Appends further message to a line started by LogStart, does not terminate the line.
 </summary>
	<param name="Message">The additional message to appear in the line</param>
	<remarks>
		<para>This can be called multiple times to build up a complex log line if required.</para>
		<para>Will create a LOGISSUE message in the log if called before a line has been started with LogStart. 
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITraceLogger.LogContinue(System.String,System.Boolean)">
	<summary>
 Appends further message to a line started by LogStart, appends a hex translation of the message to the line, does not terminate the line.
 </summary>
	<param name="Message">The additional message to appear in the line</param>
	<param name="HexDump">True to append a hex translation of the message at the end of the message</param>
	<remarks>
		<para>This can be called multiple times to build up a complex log line if required.</para>
		<para>Will create a LOGISSUE message in the log if called before a line has been started with LogStart. 
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITraceLogger.LogFinish(System.String)">
	<summary>
 Closes a line started by LogStart with the supplied message
 </summary>
	<param name="Message">The final message to terminate the line</param>
	<remarks>
		<para>Can only be called once for each line started by LogStart.</para>
		<para>Will create a LOGISSUE message in the log if called before a line has been started with LogStart.  
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITraceLogger.LogFinish(System.String,System.Boolean)">
	<summary>
 Closes a line started by LogStart with option to append a translation of the supplied message into HEX
 </summary>
	<param name="Message">The final message to appear in the line</param>
	<param name="HexDump">True to append a hex translation of the message at the end of the message</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITraceLogger.LogMessage(System.String,System.String)">
	<summary>
 Logs a complete message in one call
 </summary>
	<param name="Identifier">Identifies the meaning of the the message e.g. name of modeule or method logging the message.</param>
	<param name="Message">Message to log</param>
	<remarks>
		<para>Use this for straightforward logging requrements. Writes all information in one command.</para>
		<para>Will create a LOGISSUE message in the log if called before a line started by LogStart has been closed with LogFinish. 
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITraceLogger.LogMessage(System.String,System.String,System.Boolean)">
	<summary>
 Closes a line started by LogStart with the supplied message and a hex translation of the message
 </summary>
	<param name="Identifier">Identifies the meaning of the the message e.g. name of modeule or method logging the message.</param>
	<param name="Message">The final message to terminate the line</param>
	<param name="HexDump">True to append a hex translation of the message at the end of the message</param>
	<remarks>
		<para>Will create a LOGISSUE message in the log if called before a line has been started with LogStart.  
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITraceLogger.Enabled">
	<summary>
 Enables or disables logging to the file.
 </summary>
	<value>True to enable logging</value>
	<returns>Boolean, current logging status (enabled/disabled).</returns>
	<remarks>If this property is false then calls to LogMsg, LogStart, LogContinue and LogFinish do nothing. If True, 
 supplied messages are written to the log file.</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITraceLogger.LogIssue(System.String,System.String)">
	<summary>
 Logs an issue, closing any open line and opening a continuation line if necessary after the 
 issue message.
 </summary>
	<param name="Identifier">Identifies the meaning of the the message e.g. name of modeule or method logging the message.</param>
	<param name="Message">Message to log</param>
	<remarks>Use this for reporting issues that you don't want to appear on a line already opened 
 with StartLine</remarks>
</member><member name="T:ASCOM.HelperNET.Interfaces.ITraceLogger">
	<summary>
 Interface to the .NET TraceLogger component
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IChooser.DeviceType">
	<summary>
 The type of device for which the Chooser will select a driver. (String, default = "Telescope")
 </summary>
	<value>The type of device for which the Chooser will select a driver. (String, default = "Telescope") 
</value>
	<returns>The device type that has been set</returns>
	<remarks>This property changes the "personality" of the Chooser, allowing it to be used to select a driver for any arbitrary 
 ASCOM device type. The default value for this is "Telescope", but it could be "Focuser", "Camera", etc. 
 <para>This property is independent of the Profile object's DeviceType property. Setting Chooser's DeviceType 
 property doesn't set the DeviceType property in Profile, you must set that also when needed.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IChooser.Choose">
	<summary>
 Select ASCOM driver to use without pre-selecting in the dropdown list
 </summary>
	<returns>Driver ID of chosen driver</returns>
	<remarks>No driver will be pre-selected in the Chooser's list when the chooser window is first opened. 
 </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IChooser.Choose(System.String)">
	<summary>
 Select ASCOM driver to use including pre-selecting one in the dropdown list
 </summary>
	<param name="DriverProgID">Driver to preselect in the chooser dialogue</param>
	<returns>Driver ID of chosen driver</returns>
	<remarks>The supplied driver will be pre-selected in the Chooser's list when the chooser window is first opened.
 </remarks>
</member><member name="T:ASCOM.HelperNET.Interfaces.IChooser">
	<summary>
 Interface to the .NET Chooser component
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.WaitForMilliseconds(System.Int32)">
	<summary>
 Pauses for a given interval in milliseconds.
 </summary>
	<param name="Milliseconds">The number of milliseconds to wait</param>
	<remarks>Repeatedly puts the calling Win32 process to sleep, totally freezing it, for 10 milliseconds, 
 then pumps events so the script or program calling it will receive its normal flow of events, until the 
 pause interval elapses. If the pause interval is 20 milliseconds or less, the sleep interval is reduced 
 to 0, causing the calling Win32 process to give up control to the kernel scheduler and then immediately 
 become eligible for scheduling. </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DMSToDegrees(System.String)">
	<summary>
 Convert sexagesimal degrees to binary double-precision degrees
 </summary>
	<param name="DMS">The sexagesimal input string (degrees)</param>
	<returns>The double-precision binary value (degrees) represented by the sexagesimal input</returns>
	<remarks><para>The sexagesimal to real conversion methods such as this one are flexible enough to convert just 
 about anything that resembles sexagesimal. Thee way they operate is to first separate the input string 
 into numeric "tokens", strings consisting only of the numerals 0-9, plus and minus, and period. All other 
 characters are considered delimiters. Once the input string is parsed into tokens they are converted to 
 numerics. </para>
		<para>If there are more than three numeric tokens, only the first three are considered, the remainder 
 are ignored. Left to right positionally, the tokens are assumed to represent units (degrees or hours), 
 minutes, and seconds. If only two tokens are present, they are assumed to be units and minutes, and if 
 only one token is present, it is assumed to be units. Any token can have a fractionsl part. Of course it 
 would not be normal (for example) for both the minutes and seconds parts to have fractional parts, but it 
 would be legal. So 00:30.5:30 would convert to 1.0 unit. </para>
		<para>Note that plain units, for example 23.128734523 are acceptable to the method. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HMSToHours(System.String)">
	<summary>
 Convert sexagesimal hours to binary double-precision hours
 </summary>
	<param name="HMS">The sexagesimal input string (hours)</param>
	<returns>The double-precision binary value (hours) represented by the sexagesimal input </returns>
	<remarks>
		<para>The sexagesimal to real conversion methods such as this one are flexible enough to convert just about 
 anything that resembles sexagesimal. Thee way they operate is to first separate the input string into 
 numeric "tokens", strings consisting only of the numerals 0-9, plus and minus, and period. All other 
 characters are considered delimiters. Once the input string is parsed into tokens they are converted to 
 numerics. </para>
		<para>If there are more than three numeric tokens, only the first three are considered, the remainder 
 are ignored. Left to right positionally, the tokens are assumed to represent units (degrees or hours), 
 minutes, and seconds. If only two tokens are present, they are assumed to be units and minutes, and if 
 only one token is present, it is assumed to be units. Any token can have a fractionsl part. </para>
		<para>Of course it would not be normal (for example) for both the minutes and seconds parts to have 
 fractional parts, but it would be legal. So 00:30.5:30 would convert to 1.0 unit. Note that plain units, 
 for example 23.128734523 are acceptable to the method. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HMSToDegrees(System.String)">
	<summary>
 Convert sexagesimal hours to binary double-precision hours
 </summary>
	<param name="HMS">The sexagesimal input string (hours)</param>
	<returns>The double-precision binary value (hours) represented by the sexagesimal input</returns>
	<remarks>
		<para>The sexagesimal to real conversion methods such as this one are flexible enough to convert just about 
 anything that resembles sexagesimal. Thee way they operate is to first separate the input string into 
 numeric "tokens", strings consisting only of the numerals 0-9, plus and minus, and period. All other 
 characters are considered delimiters. Once the input string is parsed into tokens they are converted to 
 numerics. </para>
		<para>If there are more than three numeric tokens, only the first three are considered, the remainder 
 are ignored. Left to right positionally, the tokens are assumed to represent units (degrees or hours), 
 minutes, and seconds. If only two tokens are present, they are assumed to be units and minutes, and if 
 only one token is present, it is assumed to be units. Any token can have a fractionsl part. </para>
		<para>Of course it would not be normal (for example) for both the minutes and seconds parts to have 
 fractional parts, but it would be legal. So 00:30.5:30 would convert to 1.0 unit. Note that plain units, 
 for example 23.128734523 are acceptable to the method. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToDMS(System.Double)">
	<summary>
 Convert degrees to sexagesimal degrees, minutes and seconds with default delimiters DD° MM' SS" 
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToDMS(System.Double,System.String)">
	<summary>
  Convert degrees to sexagesimal degrees, minutes and seconds with with default minute and second delimiters MM' SS" 
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees and minutes </param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToDMS(System.Double,System.String,System.String)">
	<summary>
  Convert degrees to sexagesimal degrees, minutes and seconds with default second delimiter SS" 
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees and minutes </param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToDMS(System.Double,System.String,System.String,System.String)">
	<summary>
  Convert degrees to sexagesimal degrees, minutes and seconds
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees and minutes </param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<param name="SecDelim">The delimiter string to append to the seconds part</param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToDMS(System.Double,System.String,System.String,System.String,System.Int32)">
	<summary>
  Convert degrees to sexagesimal degrees, minutes and seconds with specified second decimal places
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees and minutes </param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<param name="SecDelim">The delimiter string to append to the seconds part</param>
	<param name="SecDecimalDigits">The number of digits after the decimal point on the seconds part </param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HoursToHMS(System.Double)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds with default delimiters HH:MM:SS
 </summary>
	<param name="Hours">The hours value to convert</param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HoursToHMS(System.Double,System.String)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds with default minutes and seconds delimters MM:SS
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HoursToHMS(System.Double,System.String,System.String)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds with default second delimiter of null string
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<param name="MinDelim">The delimiter string separating minutes and seconds </param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HoursToHMS(System.Double,System.String,System.String,System.String)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<param name="MinDelim">The delimiter string separating minutes and seconds </param>
	<param name="SecDelim">The delimiter string to append to the seconds part </param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HoursToHMS(System.Double,System.String,System.String,System.String,System.Int32)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds with specified number of second decimal places
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<param name="MinDelim">The delimiter string separating minutes and seconds </param>
	<param name="SecDelim">The delimiter string to append to the seconds part </param>
	<param name="SecDecimalDigits">The number of digits after the decimal point on the seconds part </param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToDM(System.Double)">
	<summary>
 Convert degrees to sexagesimal degrees and minutes with default delimiters DD° MM'
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToDM(System.Double,System.String)">
	<summary>
 Convert degrees to sexagesimal degrees and minutes with the default minutes delimeter MM'
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees </param>
	<returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToDM(System.Double,System.String,System.String)">
	<summary>
 Convert degrees to sexagesimal degrees and minutes
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees </param>
	<param name="MinDelim">The delimiter string to append to the minutes </param>
	<returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToDM(System.Double,System.String,System.String,System.Int32)">
	<summary>
 Convert degrees to sexagesimal degrees and minutes with the specified number of minute decimal places
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees </param>
	<param name="MinDelim">The delimiter string to append to the minutes </param>
	<param name="MinDecimalDigits">The number of digits after the decimal point on the minutes part </param>
	<returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HoursToHM(System.Double)">
	<summary>
 Convert hours to sexagesimal hours and minutes with default delimiters HH:MM
 </summary>
	<param name="Hours">The hours value to convert</param>
	<returns>Sexagesimal representation of hours input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HoursToHM(System.Double,System.String)">
	<summary>
 Convert hours to sexagesimal hours and minutes with default minutes delimiter MM (null string)
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<returns>Sexagesimal representation of hours input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HoursToHM(System.Double,System.String,System.String)">
	<summary>
 Convert hours to sexagesimal hours and minutes
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<returns>Sexagesimal representation of hours input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.HoursToHM(System.Double,System.String,System.String,System.Int32)">
	<summary>
 Convert hours to sexagesimal hours and minutes with supplied number of minute decimal places
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours </param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<param name="MinDecimalDigits">The number of digits after the decimal point on the minutes part </param>
	<returns>Sexagesimal representation of hours input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToHMS(System.Double)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds with default delimters of HH:MM:SS
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToHMS(System.Double,System.String)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds with the default second and minute delimiters of MM:SS
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToHMS(System.Double,System.String,System.String)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds with the default second delimiter SS (null string)
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string separating minutes and seconds</param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToHMS(System.Double,System.String,System.String,System.String)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string separating minutes and seconds</param>
	<param name="SecDelim">The delimiter string to append to the seconds part </param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToHMS(System.Double,System.String,System.String,System.String,System.Int32)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds with the specified number of second decimal places
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string separating minutes and seconds</param>
	<param name="SecDelim">The delimiter string to append to the seconds part </param>
	<param name="SecDecimalDigits">The number of digits after the decimal point on the seconds part </param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToHM(System.Double)">
	<summary>
 Convert degrees to sexagesimal hours and minutes with default delimiters HH:MM
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToHM(System.Double,System.String)">
	<summary>
 Convert degrees to sexagesimal hours and minutes with default minute delimiter MM (null string)
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToHM(System.Double,System.String,System.String)">
	<summary>
 Convert degrees to sexagesimal hours and minutes
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DegreesToHM(System.Double,System.String,System.String,System.Int32)">
	<summary>
 Convert degrees to sexagesimal hours and minutes with supplied number of minute decimal places
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string to append to the minutes part</param>
	<param name="MinDecimalDigits">The number of minutes decimal places</param>
	<returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
	</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IUtil.PlatformVersion">
	<summary>
 Current Platform version in m.n form
 </summary>
	<returns>Current Platform version in m.n form</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IUtil.SerialTraceFile">
	<summary>
 Change the serial trace file (default C:\SerialTrace.txt)
 </summary>
	<value>Serial trace file name including fully qualified path e.g. C:\SerialTrace.txt</value>
	<returns>Serial trace file name </returns>
	<remarks>Change this before setting the SerialTrace property to True. </remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IUtil.SerialTrace">
	<summary>
 Enable/disable serial I/O tracing
 </summary>
	<value>Boolean - Enable/disable serial I/O tracing</value>
	<returns>Enabled - disabled state of serial tracing</returns>
	<remarks>If you want to change the serial trace file path, change the SerialTraceFile property before setting this to True. 
 After setting this to True, serial trace info will be written to the last-set serial trace file. </remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IUtil.TimeZoneName">
	<summary>
 The name of the computer's time zone
 </summary>
	<returns>The name of the computer's time zone</returns>
	<remarks>This will be in the local language of the operating system, and will reflect any daylight/summer time that may be in 
 effect. </remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IUtil.TimeZoneOffset">
	<summary>
 UTC offset (hours) for the computer's clock
 </summary>
	<returns>UTC offset (hours) for the computer's clock</returns>
	<remarks>The offset is in hours, such that UTC = local + offset. The offset includes any daylight/summer time that may be 
 in effect.</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IUtil.UTCDate">
	<summary>
 The current UTC Date
 </summary>
	<returns>The current UTC Date</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IUtil.JulianDate">
	<summary>
 Current Julian date
 </summary>
	<returns>Current Julian date</returns>
	<remarks>This is quantised to the second in the COM component but to a small decimal fraction in the .NET component</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DateLocalToJulian(System.DateTime)">
	<summary>
 Convert local-time Date to Julian date
 </summary>
	<param name="LocalDate">Date in local-time</param>
	<returns>Julian date</returns>
	<remarks>Julian dates are always in UTC </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DateJulianToLocal(System.Double)">
	<summary>
 Convert Julian date to local-time Date
 </summary>
	<param name="JD">Julian date to convert</param>
	<returns>Date in local-time for the given Julian date</returns>
	<remarks>Julian dates are always in UTC</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DateUTCToJulian(System.DateTime)">
	<summary>
 Convert UTC Date to Julian date
 </summary>
	<param name="UTCDate">UTC date to convert</param>
	<returns>Julian date</returns>
	<remarks>Julian dates are always in UTC </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DateJulianToUTC(System.Double)">
	<summary>
 Convert Julian date to UTC Date
 </summary>
	<param name="JD">Julian date</param>
	<returns>Date in UTC for the given Julian date</returns>
	<remarks>Julian dates are always in UTC </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DateUTCToLocal(System.DateTime)">
	<summary>
 Convert UTC Date to local-time Date
 </summary>
	<param name="UTCDate">Date in UTC</param>
	<returns>Date in local-time</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IUtil.DateLocalToUTC(System.DateTime)">
	<summary>
 Convert local-time Date to UTC Date
 </summary>
	<param name="LocalDate">Date in local-time</param>
	<returns> Date in UTC</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Interfaces.IUtil">
	<summary>
 Interface to the .NET Util component
 </summary>
	<remarks></remarks>
</member><member name="E:ASCOM.HelperNET.Interfaces.ITimer.Tick">
	<summary>
 Fired once per Interval when timer is Enabled.
 </summary>
	<remarks>To sink this event in Visual Basic, declare the object variable using the WithEvents keyword.</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITimer.Interval">
	<summary>
 The interval between Tick events when the timer is Enabled in milliseconds, (default = 1000)
 </summary>
	<value>The interval between Tick events when the timer is Enabled (milliseconds, default = 1000)</value>
	<returns>The interval between Tick events when the timer is Enabled in milliseconds</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITimer.Enabled">
	<summary>
 Enable the timer tick events
 </summary>
	<value>True means the timer is active and will deliver Tick events every Interval milliseconds.</value>
	<returns>Enabled state of timer tick events</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Interfaces.ITimer">
	<summary>
 Interface to the .NET Timer component
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IProfile.DeviceType">
	<summary>
 The type of ASCOM device for which profile data and registration services are provided 
 (String, default = "Telescope")
 </summary>
	<value>String describing the type of device being accessed</value>
	<returns>String describing the type of device being accessed</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IProfile.RegisteredDeviceTypes">
	<summary>
 List the device types registered in the Profile store
 </summary>
	<value>List of registered device types</value>
	<returns>A sorted string list of device types</returns>
	<remarks>Use this to find which types of device are registered in the Profile store.</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.IProfile.RegisteredDevices(System.String)">
	<summary>
 List the devices of a given device type that are registered in the Profile store
 </summary>
	<param name="DeviceType">Type of devices to list</param>
	<value>List of registered devices</value>
	<returns>A sorted list of installed devices and associated device descriptions</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Throw if the supplied DeviceType is empty string or 
 null value.</exception>
	<remarks>
 Use this to find all the registerd devices of a given type that are in the Profile store.
 <para>If a DeviceType is supplied, where no device of that type has been registered before on this system,
 an empty list will be returned</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.IsRegistered(System.String)">
	<summary>
 Confirms whether a specific driver is registered ort unregistered in the profile store
 </summary>
	<param name="DriverID">String reprsenting the device's ProgID</param>
	<returns>Boolean indicating registered or unregisteredstate of the supplied DriverID</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.Register(System.String,System.String)">
	<summary>
 Registers a supplied DriverID and associates a descriptive name with the device
 </summary>
	<param name="DriverID">ProgID of the device to register</param>
	<param name="DescriptiveName">Descriptive name of the device</param>
	<remarks>Does nothing if already registered, so safe to call on driver load.</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.Unregister(System.String)">
	<summary>
 Remove all data for the given DriverID from the registry.
 </summary>
	<param name="DriverID">ProgID of the device to unregister</param>
	<remarks>This deletes the entire device profile tree, including the DriverID root key.</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.GetValue(System.String,System.String)">
	<summary>
 Retrieve a string value from the profile for the given Driver ID and variable name
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<returns>Retrieved variable value</returns>
	<remarks>
		<para>Name may be an empty string for the unnamed value. The unnamed value is also known as the "default" value for a registry key.</para>
		<para>Does not provide access to other registry data types such as binary and doubleword. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.GetValue(System.String,System.String,System.String)">
	<summary>
 Retrieve a string value from the profile using the supplied subkey for the given Driver ID and variable name.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<param name="SubKey">Subkey from the profile root from which to read the value</param>
	<returns>Retrieved variable value</returns>
	<remarks>
		<para>Name may be an empty string for the unnamed value. The unnamed value is also known as the "default" value for a registry key.</para>
		<para>Does not provide access to other registry data types such as binary and doubleword. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.WriteValue(System.String,System.String,System.String)">
	<summary>
 Writes a string value to the profile using the given Driver ID and variable name.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<param name="Value">The string value to be written</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.WriteValue(System.String,System.String,System.String,System.String)">
	<summary>
 Writes a string value to the profile using the supplied subkey for the given Driver ID and variable name.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<param name="Value">The string value to be written</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.Values(System.String)">
	<summary>
 Return a list of the (unnamed and named variables) under the given DriverID.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<returns>Generic Sorted List of KeyValuePairs</returns>
	<remarks>The returned object contains entries for each value. For each entry, 
 the Key property is the value's name, and the Value property is the string value itself. Note that the unnamed (default) 
 value will be included if it has a value, even if the value is a blank string. The unnamed value will have its entry's 
 Key property set to an empty string. </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.Values(System.String,System.String)">
	<summary>
 Return a list of the (unnamed and named variables) under the given DriverID subkey
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<returns>Generic Sorted List of KeyValuePairs</returns>
	<remarks>The returned object contains entries for each value. For each entry, 
 the Key property is the value's name, and the Value property is the string value itself. Note that the unnamed (default) 
 value will be included if it has a value, even if the value is a blank string. The unnamed value will have its entry's 
 Key property set to an empty string. </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.DeleteValue(System.String,System.String)">
	<summary>
 Delete the value from the registry. Name may be an empty string for the unnamed value. 
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<remarks>Specify "" to delete the unnamed value which is also known as the "default" value for a registry key. </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.DeleteValue(System.String,System.String,System.String)">
	<summary>
 Delete the value from the registry. Name may be an empty string for the unnamed value. Value will be deleted from the subkey supplied.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<remarks>Specify "" to delete the unnamed value which is also known as the "default" value for a registry key. </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.CreateSubKey(System.String,System.String)">
	<summary>
 Create a registry key for the given DriverID.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<remarks>If the SubKey argument contains a \ separated path, the intermediate keys will be created if needed. </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.SubKeys(System.String)">
	<summary>
 Return a list of the sub-keys under the given DriverID.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<returns>Generic Sorted List of key-value pairs</returns>
	<remarks>The returned Generic.SortedList object contains entries for each sub-key. For each KeyValuePair in the list, 
 the Key property is the sub-key name, and the Value property is the value. The unnamed ("default") value for that key is also returned.</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.SubKeys(System.String,System.String)">
	<summary>
 Return a list of the sub-keys under the given DriverID and sub-key
 </summary>
	<param name="DriverID">ProgID of the driver</param>
	<param name="SubKey">Subkey from the profile root in which to search for subkeys</param>
	<returns>Generic Sorted List of key-value pairs</returns>
	<remarks>The return type uses generics in order to specify the types of the key and value which are both string.</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.IProfile.DeleteSubKey(System.String,System.String)">
	<summary>
 Delete a registry key for the given DriverID. SubKey may contain \ separated path to key to be deleted.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<remarks>The sub-key and all data and keys beneath it are deleted.</remarks>
</member><member name="T:ASCOM.HelperNET.Interfaces.IProfile">
	<summary>
 Interface to the .NET Profile component
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.AvailableComPorts">
	<summary>
 Returns a list of all available ASCOM serial ports with COMnnn ports sorted into ascending port number order
 </summary>
	<value>String array of available serial ports</value>
	<returns>A string array of available serial ports</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.DataBits">
	<summary>
 Gets or sets the number of data bits in each byte
 </summary>
	<value>The number of data bits in each byte, default is 8 data bits</value>
	<returns>Integer number of data bits in each byte</returns>
	<exception cref="T:System.ArgumentOutOfRangeException">The data bits value is less than 5 or more than 8</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.DTREnable">
	<summary>
 Gets or sets the state of the DTR line
 </summary>
	<value>The state of the DTR line, default is enabled</value>
	<returns>Boolean true/false indicating enabled/disabled</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.Parity">
	<summary>
 Gets or sets the type of parity check used over the serial link
 </summary>
	<value>The type of parity check used over the serial link, default none</value>
	<returns>One of the Ports.Parity enumeration values</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.StopBits">
	<summary>
 Gets or sets the number of stop bits used on the serial link
 </summary>
	<value>the number of stop bits used on the serial link, default 1</value>
	<returns>One of the Ports.StopBits enumeration values</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.Handshake">
	<summary>
 Gets or sets the type of serial handshake used on the serial line
 </summary>
	<value>The type of handshake used on the serial line, default is none</value>
	<returns>One of the Ports.Handshake enumeration values</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.Connected">
	<summary>
 Gets or sets the connected state of the ASCOM serial port.
 </summary>
	<value>Connected state of the serial port.</value>
	<returns><c>True</c> if the serial port is connected.</returns>
	<remarks>Set this property to True to connect to the serial (COM) port. You can read the property to determine if the object is connected. </remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.Port">
	<summary>
 Gets or sets the number of the ASCOM serial port (Default is 1, giving COM1 as the serial port name).
 </summary>
	<value>COM port number of the ASCOM serial port.</value>
	<returns>Integer, number of the ASCOM serial port</returns>
	<remarks>This works for serial port names of the form COMnnn. Use PortName if your COM port name does not fit the form COMnnn.</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.ReceiveTimeout">
	<summary>
 The maximum time that the ASCOM serial port will wait for incoming receive data (seconds, default = 5)
 </summary>
	<value>Integer, serial port timeout in seconds</value>
	<returns>Integer, serial port timeout in seconds.</returns>
	<remarks>The minimum delay timout that can be set through this command is 1 seconds. Use ReceiveTimeoutMs to set a timeout less than 1 second.</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.ReceiveTimeoutMs">
	<summary>
 The maximum time that the ASCOM serial port will wait for incoming receive data (milliseconds, default = 5000)
 </summary>
	<value>Integer, serial port timeout in milli-seconds</value>
	<returns>Integer, serial port timeout in milli-seconds</returns>
	<remarks>If a timeout occurs, an IO timeout error is raised. See ReceiveTimeout for an alternate form 
 using the timeout in seconds. </remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.PortName">
	<summary>
 Sets the ASCOM serial port name as a string
 </summary>
	<value>Serial port name to be used</value>
	<returns>Current serial port name</returns>
	<remarks>This property allows any serial port name to be used, even if it doesn't conform to a format of COMnnn
 If the required port name is of the form COMnnn then Serial.Port=nnn and Serial.PortName="COMnnn" are 
 equivalent.</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ISerial.Speed">
	<summary>
 Gets and sets the baud rate of the ASCOM serial port
 </summary>
	<value>Port speed using the PorSpeed enum</value>
	<returns>Port speed using the PortSpeed enum</returns>
	<remarks>This is modelled on the COM component with possible values enumerated in the PortSpeed enum.</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.ClearBuffers">
	<summary>
 Clears the ASCOM serial port receive and transmit buffers
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.Transmit(System.String)">
	<summary>
 Transmits a string through the ASCOM serial port
 </summary>
	<param name="Data">String to transmit</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.TransmitBinary(System.Byte[])">
	<summary>
 Transmit an array of binary bytes through the ASCOM serial port 
 </summary>
	<param name="Data">Byte array to transmit</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.LogMessage(System.String,System.String)">
	<summary>
 Adds a message to the ASCOM serial trace file
 </summary>
	<param name="Caller">String identifying the module logging the message</param>
	<param name="Message">Message text to be logged.</param>
	<remarks>
		<para>This can be called regardless of whether logging is enabled</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.Receive">
	<summary>
 Receive at least one text character from the ASCOM serial port
 </summary>
	<returns>The characters received</returns>
	<remarks>This method reads all of the characters currently in the serial receive buffer. It will not return 
 unless it reads at least one character. A timeout will cause a TimeoutException to be raised. Use this for 
 text data, as it returns a String. </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.ReceiveByte">
	<summary>
 Receive one binary byte from the ASCOM serial port
 </summary>
	<returns>The received byte</returns>
	<remarks>Use this for 8-bit (binary data). If a timeout occurs, a TimeoutException is raised. </remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.ReceiveCounted(System.Int32)">
	<summary>
 Receive exactly the given number of characters from the ASCOM serial port and return as a string
 </summary>
	<param name="Count">The number of characters to return</param>
	<returns>String of length "Count" characters</returns>
	<remarks>If a timeout occurs a TimeoutException is raised.</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.ReceiveCountedBinary(System.Int32)">
	<summary>
 Receive exactly the given number of characters from the ASCOM serial port and return as a byte array
 </summary>
	<param name="Count">The number of characters to return</param>
	<returns>Byte array of size "Count" elements</returns>
	<remarks>
		<para>If a timeout occurs, a TimeoutException is raised. </para>
		<para>This function exists in the COM component but is not documented in the help file.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.ReceiveTerminated(System.String)">
	<summary>
 Receive characters from the ASCOM serial port until the given terminator string is seen
 </summary>
	<param name="Terminator">The character string that indicates end of message</param>
	<returns>Received characters including the terminator string</returns>
	<remarks>If a timeout occurs, a TimeoutException is raised.</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ISerial.ReceiveTerminatedBinary(System.Byte[])">
	<summary>
 Receive characters from the ASCOM serial port until the given terminator bytes are seen, return as a byte array
 </summary>
	<param name="TerminatorBytes">Array of bytes that indicates end of message</param>
	<returns>Byte array of received characters</returns>
	<remarks>
		<para>If a timeout occurs, a TimeoutException is raised.</para>
		<para>This function exists in the COM component but is not documented in the help file.</para>
	</remarks>
</member><member name="T:ASCOM.HelperNET.Interfaces.ISerial">
	<summary>
 Interface to the .NET Serial component
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.SiteLatitude">
	<summary>
 Gets or sets the site latitude
 </summary>
	<value>Site latitude</value>
	<returns>Latitude in degrees</returns>
	<remarks>Positive numbers north of the equator, negative numbers south.</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.SiteLongitude">
	<summary>
 Gets or sets the site longitude
 </summary>
	<value>Site longitude</value>
	<returns>Longitude in degrees</returns>
	<remarks>Positive numbers east of the Greenwich meridian, negative numbes west of the Greenwich meridian.</remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.SiteElevation">
	<summary>
 Gets or sets the site elevation above sea level
 </summary>
	<value>Site elevation</value>
	<returns>Elevation in metres</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.SiteTemperature">
	<summary>
 Gets or sets the site ambient temperature
 </summary>
	<value>Site ambient temperature</value>
	<returns>Temperature in degrees Celsius</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.Refraction">
	<summary>
 Gets or sets a flag indicating whether refraction is calculated for topocentric co-ordinates
 </summary>
	<value>True / false flag indicating refaction is included / omitted from topocentric co-ordinates</value>
	<returns>Boolean flag</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITransform.Refresh">
	<summary>
 Causes the transform component to recalculate values derrived from the last Set command
 </summary>
	<remarks>Use this when you have set J2000 co-ordinates and wish to ensure that the mount points to the same 
 co-ordinates allowing for local effects that change with time such as refraction.</remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITransform.SetJ2000(System.Double,System.Double)">
	<summary>
 Sets the known J2000 Right Ascension and Declination coordinates that are to be transformed
 </summary>
	<param name="RA">RA in J2000 co-ordinates</param>
	<param name="DEC">DEC in J2000 co-ordinates</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITransform.SetApparent(System.Double,System.Double)">
	<summary>
 Sets the known apparent Right Ascension and Declination coordinates that are to be transformed
 </summary>
	<param name="RA">RA in apparent co-ordinates</param>
	<param name="DEC">DEC in apparent co-ordinates</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Interfaces.ITransform.SetTopocentric(System.Double,System.Double)">
	<summary>
 Sets the known local topocentric Right Ascension and Declination coordinates that are to be transformed
 </summary>
	<param name="RA">RA in local topocentric co-ordinates</param>
	<param name="DEC">DEC in local topocentric co-ordinates</param>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.RAJ2000">
	<summary>
 Returns the Right Ascension in J2000 co-ordinates
 </summary>
	<value>J2000 Right Ascension</value>
	<returns>Right Ascension in hours</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.DECJ2000">
	<summary>
 Returns the Declination in J2000 co-ordinates
 </summary>
	<value>J2000 Declination</value>
	<returns>J2000 Declination</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.RATopocentric">
	<summary>
 Returns the Right Ascension in local topocentric co-ordinates
 </summary>
	<value>Local topocentric Right Ascension</value>
	<returns>Local topocentric Right Ascension</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.DECTopocentric">
	<summary>
 Returns the Declination in local topocentric co-ordinates
 </summary>
	<value>Local topocentric Declination</value>
	<returns>Local topocentric Declination</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.RAApparent">
	<summary>
 Returns the Right Ascension in apparent co-ordinates
 </summary>
	<value>Apparent Right Ascension</value>
	<returns>Right Ascension in hours</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.DECApparent">
	<summary>
 Returns the Declination in apparent co-ordinates
 </summary>
	<value>Apparent Declination</value>
	<returns>Declination in degrees</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.AzimuthTopocentric">
	<summary>
 Returns the topocentric azimth angle of the target
 </summary>
	<value>Topocentric azimuth angle</value>
	<returns>Azimuth angle in degrees</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Interfaces.ITransform.ElevationTopocentric">
	<summary>
 Returns the topocentric elevation of the target
 </summary>
	<value>Topocentric elevation angle</value>
	<returns>Elevation angle in degrees</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Interfaces.ITransform">
	<summary>
 Interface to the coordinate transform component; J2000 - apparent - local topocentric
 </summary>
	<remarks>Use this component to transform between J2000, apparent and local topocentric (JNow) coordinates or 
 vice versa. To use the component, instantiate it, then use one of SetJ2000 or SetJNow or SetApparent to 
 initialise with known values. Now use the RAJ2000, DECJ200, RAJNow, DECJNow, RAApparent and DECApparent 
 properties to read off the required transformed values.
<para>The component can be reused simply by setting new co-ordinates with a Set command, there
 is no need to create a new component each time a transform is required.</para>
		<para>Transforms are effected through the ASCOM NOVAS-COM engine that encapsulates the USNO NOVAS2 library. 
 The USNO NOVAS reference web page is: 
 http://www.usno.navy.mil/USNO/astronomical-applications/software-products/novas/novas-fortran/novas-fortran 
 </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.HelperException.#ctor(System.String)">
	<summary>
 Create a new exception with message
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.HelperException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message and inner exception
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.HelperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.HelperException">
	<summary>
 Base exception for the HelperNET components
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ProfileNotFoundException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ProfileNotFoundException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ProfileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.ProfileNotFoundException">
	<summary>
 Exception thrown when the profile is not found. This is internally trapped and should not appear externally to an application.
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.InvalidValueException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.InvalidValueException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.InvalidValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.InvalidValueException">
	<summary>
 Exception thrown when an invalid value is passed to a HelperNET component
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.SerialPortInUseException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.SerialPortInUseException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.SerialPortInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">
	<summary>
 Exception thrown when a serial port method is already in progress and a second attempt is made to use the serial port.
 </summary>
	<remarks>This exception is only thrown after 5 attempts, each with a 1 second timeout, have been made to 
 acquire the serial port. It may indicate that you have more than one thread attempting to access the serial 
 port and that you have not synchronised these within your application. The serial port can only handle 
 one transaction at a time e.g. Serial.Receive or Serial.Transmit etc.</remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ProfilePersistenceException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ProfilePersistenceException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ProfilePersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.ProfilePersistenceException">
	<summary>
 Exception thrown if there is any problem in reading or writing the profile from or to the file system
 </summary>
	<remarks>This is an ifrastructural exception indicatig that there is a problem at the file access layer
 in the profile code. Possible underlying reasons are security access permissions, file system full and hardware failure.
 </remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">
	<summary>
 Exception thrown when a profile request is made for a driver that is not registered
 </summary>
	<remarks>Drivers must be registered before other profile commands are used to manipulate their 
 values.</remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.RestrictedAccessException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.RestrictedAccessException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.RestrictedAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.RestrictedAccessException">
	<summary>
 Exception thrown when an attempt is made to write to a protected part of the the Profile store that is 
 reserved for Platform use. An example is attempting to write to the the default value of a device driver 
 profile. This value is reserved for use by the Chooser to display the device description and is set by the 
 Profile.Register method.
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.TransformUninitialisedException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.TransformUninitialisedException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.TransformUninitialisedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">
	<summary>
 Exception thrown when an attempt is made to read from the transform component before it has had co-ordinates
 set once by SetJ2000 or SetJNow.
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.CompatibilityException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.CompatibilityException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.CompatibilityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.CompatibilityException">
	<summary>
 Exception thrown when an incompatible component is encountered that prevents HelperNET from funcitoning
 correctly.
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ValueNotSetException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ValueNotSetException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ValueNotSetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.ValueNotSetException">
	<summary>
 Exception thrown when an attempt is made to read a value that has not yet been set.
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ValueNotAvailableException.#ctor(System.String)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ValueNotAvailableException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.ValueNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.ValueNotAvailableException">
	<summary>
 Exception thrown when an attempt is made to read a value that has not yet been calculated.
 </summary>
	<remarks>This probably occurs because another variable has not been set or a required method has not been called.</remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.NOVASFunctionException.#ctor(System.String,System.String,System.Int16)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.NOVASFunctionException.#ctor(System.String,System.Exception)">
	<summary>
 Create a new exception with message 
 </summary>
	<param name="message">Message to be reported by the exception</param>
	<param name="inner">Exception to be reported as the inner exception</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Exceptions.NOVASFunctionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
	<summary>
 Serialise the exception
 </summary>
	<param name="info">Serialisation information</param>
	<param name="context">Serialisation context</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Exceptions.NOVASFunctionException">
	<summary>
 Exception thrown when a NOVAS.NET function returns a non-zero, error completion code.
 </summary>
	<remarks>This probably occurs because another variable has not been set or a required method has not been called.</remarks>
</member><member name="M:ASCOM.HelperNET.Util.Dispose(System.Boolean)">
	<summary>
 Disposes of resources used by the profile object - called by IDisposable interface
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Util.Dispose">
	<summary>
 Disposes of resources used by the profile object
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Util.WaitForMilliseconds(System.Int32)">
	<summary>
 Pauses for a given interval in milliseconds.
 </summary>
	<param name="Milliseconds">The number of milliseconds to wait</param>
	<remarks>Repeatedly puts the calling Win32 process to sleep, totally freezing it, for 10 milliseconds, 
 then pumps events so the script or program calling it will receive its normal flow of events, until the 
 pause interval elapses. If the pause interval is 20 milliseconds or less, the sleep interval is reduced 
 to 0, causing the calling Win32 process to give up control to the kernel scheduler and then immediately 
 become eligible for scheduling. </remarks>
</member><member name="M:ASCOM.HelperNET.Util.DMSToDegrees(System.String)">
	<summary>
 Convert sexagesimal degrees to binary double-precision degrees
 </summary>
	<param name="DMS">The sexagesimal input string (degrees)</param>
	<returns>The double-precision binary value (degrees) represented by the sexagesimal input</returns>
	<remarks><para>The sexagesimal to real conversion methods such as this one are flexible enough to convert just 
 about anything that resembles sexagesimal. Thee way they operate is to first separate the input string 
 into numeric "tokens", strings consisting only of the numerals 0-9, plus and minus, and period. All other 
 characters are considered delimiters. Once the input string is parsed into tokens they are converted to 
 numerics. </para>
		<para>If there are more than three numeric tokens, only the first three are considered, the remainder 
 are ignored. Left to right positionally, the tokens are assumed to represent units (degrees or hours), 
 minutes, and seconds. If only two tokens are present, they are assumed to be units and minutes, and if 
 only one token is present, it is assumed to be units. Any token can have a fractionsl part. Of course it 
 would not be normal (for example) for both the minutes and seconds parts to have fractional parts, but it 
 would be legal. So 00:30.5:30 would convert to 1.0 unit. </para>
		<para>Note that plain units, for example 23.128734523 are acceptable to the method. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HMSToHours(System.String)">
	<summary>
 Convert sexagesimal hours to binary double-precision hours
 </summary>
	<param name="HMS">The sexagesimal input string (hours)</param>
	<returns>The double-precision binary value (hours) represented by the sexagesimal input </returns>
	<remarks>
		<para>The sexagesimal to real conversion methods such as this one are flexible enough to convert just about 
 anything that resembles sexagesimal. Thee way they operate is to first separate the input string into 
 numeric "tokens", strings consisting only of the numerals 0-9, plus and minus, and period. All other 
 characters are considered delimiters. Once the input string is parsed into tokens they are converted to 
 numerics. </para>
		<para>If there are more than three numeric tokens, only the first three are considered, the remainder 
 are ignored. Left to right positionally, the tokens are assumed to represent units (degrees or hours), 
 minutes, and seconds. If only two tokens are present, they are assumed to be units and minutes, and if 
 only one token is present, it is assumed to be units. Any token can have a fractionsl part. </para>
		<para>Of course it would not be normal (for example) for both the minutes and seconds parts to have 
 fractional parts, but it would be legal. So 00:30.5:30 would convert to 1.0 unit. Note that plain units, 
 for example 23.128734523 are acceptable to the method. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HMSToDegrees(System.String)">
	<summary>
 Convert sexagesimal hours to binary double-precision hours
 </summary>
	<param name="HMS">The sexagesimal input string (hours)</param>
	<returns>The double-precision binary value (hours) represented by the sexagesimal input</returns>
	<remarks>
		<para>The sexagesimal to real conversion methods such as this one are flexible enough to convert just about 
 anything that resembles sexagesimal. Thee way they operate is to first separate the input string into 
 numeric "tokens", strings consisting only of the numerals 0-9, plus and minus, and period. All other 
 characters are considered delimiters. Once the input string is parsed into tokens they are converted to 
 numerics. </para>
		<para>If there are more than three numeric tokens, only the first three are considered, the remainder 
 are ignored. Left to right positionally, the tokens are assumed to represent units (degrees or hours), 
 minutes, and seconds. If only two tokens are present, they are assumed to be units and minutes, and if 
 only one token is present, it is assumed to be units. Any token can have a fractionsl part. </para>
		<para>Of course it would not be normal (for example) for both the minutes and seconds parts to have 
 fractional parts, but it would be legal. So 00:30.5:30 would convert to 1.0 unit. Note that plain units, 
 for example 23.128734523 are acceptable to the method. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToDMS(System.Double)">
	<summary>
 Convert degrees to sexagesimal degrees, minutes and seconds with default delimiters DD° MM' SS" 
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToDMS(System.Double,System.String)">
	<summary>
  Convert degrees to sexagesimal degrees, minutes and seconds with with default minute and second delimiters MM' SS" 
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees and minutes </param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToDMS(System.Double,System.String,System.String)">
	<summary>
  Convert degrees to sexagesimal degrees, minutes and seconds with default second delimiter SS" 
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees and minutes </param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToDMS(System.Double,System.String,System.String,System.String)">
	<summary>
  Convert degrees to sexagesimal degrees, minutes and seconds
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees and minutes </param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<param name="SecDelim">The delimiter string to append to the seconds part</param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToDMS(System.Double,System.String,System.String,System.String,System.Int32)">
	<summary>
  Convert degrees to sexagesimal degrees, minutes and seconds with specified second decimal places
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees and minutes </param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<param name="SecDelim">The delimiter string to append to the seconds part</param>
	<param name="SecDecimalDigits">The number of digits after the decimal point on the seconds part </param>
	<returns>Sexagesimal representation of degrees input value, degrees, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single 
 characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HoursToHMS(System.Double)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds with default delimiters HH:MM:SS
 </summary>
	<param name="Hours">The hours value to convert</param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HoursToHMS(System.Double,System.String)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds with default minutes and seconds delimters MM:SS
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HoursToHMS(System.Double,System.String,System.String)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds with default second delimiter of null string
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<param name="MinDelim">The delimiter string separating minutes and seconds </param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HoursToHMS(System.Double,System.String,System.String,System.String)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<param name="MinDelim">The delimiter string separating minutes and seconds </param>
	<param name="SecDelim">The delimiter string to append to the seconds part </param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HoursToHMS(System.Double,System.String,System.String,System.String,System.Int32)">
	<summary>
 Convert hours to sexagesimal hours, minutes, and seconds with specified number of second decimal places
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes </param>
	<param name="MinDelim">The delimiter string separating minutes and seconds </param>
	<param name="SecDelim">The delimiter string to append to the seconds part </param>
	<param name="SecDecimalDigits">The number of digits after the decimal point on the seconds part </param>
	<returns>Sexagesimal representation of hours input value, hours, minutes and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToHMS(System.Double)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds with default delimters of HH:MM:SS
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToHMS(System.Double,System.String)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds with the default second and minute delimiters of MM:SS
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToHMS(System.Double,System.String,System.String)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds with the default second delimiter SS (null string)
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string separating minutes and seconds</param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToHMS(System.Double,System.String,System.String,System.String)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string separating minutes and seconds</param>
	<param name="SecDelim">The delimiter string to append to the seconds part </param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToHMS(System.Double,System.String,System.String,System.String,System.Int32)">
	<summary>
 Convert degrees to sexagesimal hours, minutes, and seconds with the specified number of second decimal places
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string separating minutes and seconds</param>
	<param name="SecDelim">The delimiter string to append to the seconds part </param>
	<param name="SecDecimalDigits">The number of digits after the decimal point on the seconds part </param>
	<returns>Sexagesimal representation of degrees input value, as hours, minutes, and seconds</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToDM(System.Double)">
	<summary>
 Convert degrees to sexagesimal degrees and minutes with default delimiters DD° MM'
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToDM(System.Double,System.String)">
	<summary>
 Convert degrees to sexagesimal degrees and minutes with the default minutes delimeter MM'
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees </param>
	<returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToDM(System.Double,System.String,System.String)">
	<summary>
 Convert degrees to sexagesimal degrees and minutes
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees </param>
	<param name="MinDelim">The delimiter string to append to the minutes </param>
	<returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToDM(System.Double,System.String,System.String,System.Int32)">
	<summary>
 Convert degrees to sexagesimal degrees and minutes with the specified number of minute decimal places
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="DegDelim">The delimiter string separating degrees </param>
	<param name="MinDelim">The delimiter string to append to the minutes </param>
	<param name="MinDecimalDigits">The number of digits after the decimal point on the minutes part </param>
	<returns>Sexagesimal representation of degrees input value, as degrees and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HoursToHM(System.Double)">
	<summary>
 Convert hours to sexagesimal hours and minutes with default delimiters HH:MM
 </summary>
	<param name="Hours">The hours value to convert</param>
	<returns>Sexagesimal representation of hours input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HoursToHM(System.Double,System.String)">
	<summary>
 Convert hours to sexagesimal hours and minutes with default minutes delimiter MM (null string)
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<returns>Sexagesimal representation of hours input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HoursToHM(System.Double,System.String,System.String)">
	<summary>
 Convert hours to sexagesimal hours and minutes
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<returns>Sexagesimal representation of hours input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.HoursToHM(System.Double,System.String,System.String,System.Int32)">
	<summary>
 Convert hours to sexagesimal hours and minutes with supplied number of minute decimal places
 </summary>
	<param name="Hours">The hours value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours </param>
	<param name="MinDelim">The delimiter string to append to the minutes part </param>
	<param name="MinDecimalDigits">The number of digits after the decimal point on the minutes part </param>
	<returns>Sexagesimal representation of hours input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToHM(System.Double)">
	<summary>
 Convert degrees to sexagesimal hours and minutes with default delimiters HH:MM
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToHM(System.Double,System.String)">
	<summary>
 Convert degrees to sexagesimal hours and minutes with default minute delimiter MM (null string)
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToHM(System.Double,System.String,System.String)">
	<summary>
 Convert degrees to sexagesimal hours and minutes
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string to append to the minutes part</param>
	<returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DegreesToHM(System.Double,System.String,System.String,System.Int32)">
	<summary>
 Convert degrees to sexagesimal hours and minutes with supplied number of minute decimal places
 </summary>
	<param name="Degrees">The degrees value to convert</param>
	<param name="HrsDelim">The delimiter string separating hours and minutes</param>
	<param name="MinDelim">The delimiter string to append to the minutes part</param>
	<param name="MinDecimalDigits">Number of minutes decimal places</param>
	<returns>Sexagesimal representation of degrees input value as hours and minutes</returns>
	<remarks>
		<para>If you need a leading plus sign, you must prepend it yourself. The delimiters are not restricted to single characters</para>
	</remarks>
</member><member name="P:ASCOM.HelperNET.Util.PlatformVersion">
	<summary>
 Current Platform version in m.n form
 </summary>
	<returns>Current Platform version in m.n form</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Util.SerialTraceFile">
	<summary>
 Change the serial trace file (default C:\SerialTrace.txt)
 </summary>
	<value>Serial trace file name including fully qualified path e.g. C:\SerialTrace.txt</value>
	<returns>Serial trace file name </returns>
	<remarks>Change this before setting the SerialTrace property to True. </remarks>
</member><member name="P:ASCOM.HelperNET.Util.SerialTrace">
	<summary>
 Enable/disable serial I/O tracing
 </summary>
	<value>Boolean - Enable/disable serial I/O tracing</value>
	<returns>Enabled - disabled state of serial tracing</returns>
	<remarks>If you want to change the serial trace file path, change the SerialTraceFile property before setting this to True. 
 After setting this to True, serial trace info will be written to the last-set serial trace file. </remarks>
</member><member name="P:ASCOM.HelperNET.Util.TimeZoneName">
	<summary>
 The name of the computer's time zone
 </summary>
	<returns>The name of the computer's time zone</returns>
	<remarks>This will be in the local language of the operating system, and will reflect any daylight/summer time that may be in 
 effect. </remarks>
</member><member name="P:ASCOM.HelperNET.Util.TimeZoneOffset">
	<summary>
 UTC offset (hours) for the computer's clock
 </summary>
	<returns>UTC offset (hours) for the computer's clock</returns>
	<remarks>The offset is in hours, such that UTC = local + offset. The offset includes any daylight/summer time that may be 
 in effect.</remarks>
</member><member name="P:ASCOM.HelperNET.Util.UTCDate">
	<summary>
 The current UTC Date
 </summary>
	<returns>The current UTC Date</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Util.JulianDate">
	<summary>
 Current Julian date
 </summary>
	<returns>Current Julian date</returns>
	<remarks>This is quantised to the second in the COM component but to a small decimal fraction in the .NET component</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DateLocalToJulian(System.DateTime)">
	<summary>
 Convert local-time Date to Julian date
 </summary>
	<param name="LocalDate">Date in local-time</param>
	<returns>Julian date</returns>
	<remarks>Julian dates are always in UTC </remarks>
</member><member name="M:ASCOM.HelperNET.Util.DateJulianToLocal(System.Double)">
	<summary>
 Convert Julian date to local-time Date
 </summary>
	<param name="JD">Julian date to convert</param>
	<returns>Date in local-time for the given Julian date</returns>
	<remarks>Julian dates are always in UTC</remarks>
</member><member name="M:ASCOM.HelperNET.Util.DateUTCToJulian(System.DateTime)">
	<summary>
 Convert UTC Date to Julian date
 </summary>
	<param name="UTCDate">UTC date to convert</param>
	<returns>Julian date</returns>
	<remarks>Julian dates are always in UTC </remarks>
</member><member name="M:ASCOM.HelperNET.Util.DateJulianToUTC(System.Double)">
	<summary>
 Convert Julian date to UTC Date
 </summary>
	<param name="JD">Julian date</param>
	<returns>Date in UTC for the given Julian date</returns>
	<remarks>Julian dates are always in UTC </remarks>
</member><member name="M:ASCOM.HelperNET.Util.DateUTCToLocal(System.DateTime)">
	<summary>
 Convert UTC Date to local-time Date
 </summary>
	<param name="UTCDate">Date in UTC</param>
	<returns>Date in local-time</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Util.DateLocalToUTC(System.DateTime)">
	<summary>
 Convert local-time Date to UTC Date
 </summary>
	<param name="LocalDate">Date in local-time</param>
	<returns> Date in UTC</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Util">
	<summary>
 Provides a set of utility functions for ASCOM clients and drivers
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.BodyType.nvMajorPlanet">
	<summary>
 Major planet
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.BodyType.nvMinorPlanet">
	<summary>
 Minor planet
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.BodyType.nvComet">
	<summary>
 Comet
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.BodyType">
	<summary>
 Types of bidy
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.OriginType.nvBarycentric">
	<summary>
 Centre of mass of the solar system
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.OriginType.nvHeliocentric">
	<summary>
 Centre of mass of the Sun
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.OriginType">
	<summary>
 Co-ordinate origin
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvMercury">
	<summary>
 Mercury
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvVenus">
	<summary>
 Venus
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvEarth">
	<summary>
 Earth
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvMars">
	<summary>
 Mars
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvJupiter">
	<summary>
 Jupiter
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvSaturn">
	<summary>
 Saturn
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvUranus">
	<summary>
 Uranus
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvNeptune">
	<summary>
 Neptune
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvPluto">
	<summary>
 Pluto
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvSun">
	<summary>
 Sun
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVASCOM.PlanetNumber.nvMoon">
	<summary>
 Moon
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.PlanetNumber">
	<summary>
 Planet number
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IEarth.SetForTime(System.Double)">
	<summary>
 Initialize the Earth object for given terrestrial Julian date
 </summary>
	<param name="tjd">Terrestrial Julian date</param>
	<returns>True if successful, else throws an exception</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.BarycentricPosition">
	<summary>
 Earth barycentric position
 </summary>
	<value>Barycentric position vector</value>
	<returns>AU (Ref J2000)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.BarycentricTime">
	<summary>
 Earth barycentric time 
 </summary>
	<value>Barycentric dynamical time for given Terrestrial Julian Date</value>
	<returns>Julian date</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.BarycentricVelocity">
	<summary>
 Earth barycentric velocity 
 </summary>
	<value>Barycentric velocity vector</value>
	<returns>AU/day (ref J2000)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.EarthEphemeris">
	<summary>
 Ephemeris object used to provide the position of the Earth.
 </summary>
	<value>Earth ephemeris object </value>
	<returns>Earth ephemeris object</returns>
	<remarks>
 Setting this is optional, if not set, the internal Kepler engine will be used.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.EquationOfEquinoxes">
	<summary>
 Earth equation of equinoxes 
 </summary>
	<value>Equation of the equinoxes</value>
	<returns>Seconds</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.HeliocentricPosition">
	<summary>
 Earth heliocentric position
 </summary>
	<value>Heliocentric position vector</value>
	<returns>AU (ref J2000)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.HeliocentricVelocity">
	<summary>
 Earth heliocentric velocity 
 </summary>
	<value>Heliocentric velocity</value>
	<returns>Velocity vector, AU/day (ref J2000)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.MeanObliquity">
	<summary>
 Earth mean objiquity
 </summary>
	<value>Mean obliquity of the ecliptic</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.NutationInLongitude">
	<summary>
 Earth nutation in longitude 
 </summary>
	<value>Nutation in longitude</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.NutationInObliquity">
	<summary>
 Earth nutation in obliquity 
 </summary>
	<value>Nutation in obliquity</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IEarth.TrueObliquity">
	<summary>
 Earth true obliquity 
 </summary>
	<value>True obliquity of the ecliptic</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.IEarth">
	<summary>
 Represents the "state" of the Earth at a given Terrestrial Julian date
 </summary>
	<remarks>Objects of class Earth represent the "state" of the Earth at a given Terrestrial Julian date. 
 The state includes barycentric and heliocentric position vectors for the earth, plus obliquity, 
 nutation and the equation of the equinoxes. Unless set by the client, the Earth ephemeris used is 
 computed using an internal approximation. The client may optionally attach an ephemeris object for 
 increased accuracy. 
 <para><b>Ephemeris Generator</b><br/>
 The ephemeris generator object used with NOVAS-COM must support a single 
 method GetPositionAndVelocity(tjd). This method must take a terrestrial Julian date (like the 
 NOVAS-COM methods) as its single parameter, and return an array of Double 
 containing the rectangular (x/y/z) heliocentric J2000 equatorial coordinates of position (AU) and velocity 
 (KM/sec.). In addition, it must support three read/write properties BodyType, Name, and Number, 
 which correspond to the Type, Name, and Number properties of Novas.Planet. 
 </para></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPlanet.GetApparentPosition(System.Double)">
	<summary>
 Get an apparent position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the apparent place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPlanet.GetAstrometricPosition(System.Double)">
	<summary>
 Get an astrometric position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the astrometric place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPlanet.GetLocalPosition(System.Double,ASCOM.HelperNET.NOVASCOM.Site)">
	<summary>
 Get an local position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<param name="site">The observing site</param>
	<returns>PositionVector for the local place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPlanet.GetTopocentricPosition(System.Double,ASCOM.HelperNET.NOVASCOM.Site,System.Boolean)">
	<summary>
 Get a topocentric position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<param name="site">The observing site</param>
	<param name="Refract">Apply refraction correction</param>
	<returns>PositionVector for the topocentric place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPlanet.GetVirtualPosition(System.Double)">
	<summary>
 Get a virtual position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the virtual place.</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPlanet.DeltaT">
	<summary>
 Planet delta-T
 </summary>
	<value>The value of delta-T (TT - UT1) to use for reductions</value>
	<returns>Seconds</returns>
	<remarks>Setting this value is optional. If no value is set, an internal delta-T generator is used.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPlanet.EarthEphemeris">
	<summary>
 Ephemeris object used to provide the position of the Earth.
 </summary>
	<value>Earth ephemeris object</value>
	<returns>Earth ephemeris object</returns>
	<remarks>
 Setting this is optional, if not set, the internal Kepler engine will be used.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPlanet.Ephemeris">
	<summary>
 The Ephemeris object used to provide positions of solar system bodies.
 </summary>
	<value>Body ephemeris object</value>
	<returns>Body ephemeris object</returns>
	<remarks>
 Setting this is optional, if not set, the internal Kepler engine will be used.
 </remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPlanet.Name">
	<summary>
 Planet name
 </summary>
	<value>For unnumbered minor planets, (Type=nvMinorPlanet and Number=0), the packed designation 
 for the minor planet. For other types, this is not significant, but may be used to store 
 a name.</value>
	<returns>Name of planet</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPlanet.Number">
	<summary>
 Planet number
 </summary>
	<value>For major planets (Type=nvMajorPlanet), a PlanetNumber value. For minor planets 
 (Type=nvMinorPlanet), the number of the minor planet or 0 for unnumbered minor planet.</value>
	<returns>Planet number</returns>
	<remarks>The major planet number is its number out from the sun starting with Mercury = 1</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPlanet.Type">
	<summary>
 The type of solar system body
 </summary>
	<value>The type of solar system body</value>
	<returns>Value from the BodyType enum</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.IPlanet">
	<summary>
 Provide characteristics of a solar system body
 </summary>
	<remarks>Objects of class Planet hold the characteristics of a solar system body. Properties are 
 type (major or minor planet), number (for major and numbered minor planets), name (for unnumbered 
 minor planets and comets), the ephemeris object to be used for orbital calculations, an optional 
 ephemeris object to use for barycenter calculations, and an optional value for delta-T. 
 <para>The high-level NOVAS astrometric functions are implemented as methods of Planet: 
 GetTopocentricPosition(), GetLocalPosition(), GetApparentPosition(), GetVirtualPosition(), 
 and GetAstrometricPosition(). These methods operate on the properties of the Planet, and produce 
 a PositionVector object. For example, to get the topocentric coordinates of a planet, create and 
 initialize a planet, create initialize and attach an ephemeris object, then call 
 Planet.GetTopocentricPosition(). The resulting PositionVector's right ascension and declination 
 properties are the topocentric equatorial coordinates, at the same time, the (optionally 
 refracted) alt-az coordinates are calculated, and are also contained within the returned 
 PositionVector. <b>Note that Alt/Az is available in PositionVectors returned from calling 
 GetTopocentricPosition().</b> The accuracy of these calculations is typically dominated by the accuracy 
 of the attached ephemeris generator. </para>
		<para><b>Ephemeris Generator</b><br/>
 By default, Kepler instances are attached for both Earth and Planet objects so it is
 not necessary to create and attach these in order to get Kepler accuracy from this
 component</para>
		<para>The ephemeris generator object used with NOVAS-COM must support a single 
 method GetPositionAndVelocity(tjd). This method must take a terrestrial Julian date (like the 
 NOVAS-COM methods) as its single parameter, and return an array of Double 
 containing the rectangular (x/y/z) heliocentric J2000 equatorial coordinates of position (AU) and velocity 
 (KM/sec.). In addition, it must support three read/write properties BodyType, Name, and Number, 
 which correspond to the Type, Name, and Number properties of Novas.Planet. 
 </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPositionVector.Aberration(ASCOM.HelperNET.NOVASCOM.VelocityVector)">
	<summary>
 Adjust the position vector of an object for aberration of light
 </summary>
	<param name="vel">The velocity vector of the observer</param>
	<remarks>The algorithm includes relativistic terms</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPositionVector.Precess(System.Double,System.Double)">
	<summary>
 Adjust the position vector for precession of equinoxes between two given epochs
 </summary>
	<param name="tjd">The first epoch (Terrestrial Julian Date)</param>
	<param name="tjd2">The second epoch (Terrestrial Julian Date)</param>
	<remarks>The coordinates are referred to the mean equator and equinox of the two respective epochs.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPositionVector.ProperMotion(ASCOM.HelperNET.NOVASCOM.VelocityVector,System.Double,System.Double)">
	<summary>
 Adjust the position vector for proper motion (including foreshortening effects)
 </summary>
	<param name="vel">The velocity vector of the object</param>
	<param name="tjd1">The first epoch (Terrestrial Julian Date)</param>
	<param name="tjd2">The second epoch (Terrestrial Julian Date)</param>
	<returns>True if successful or throws an exception.</returns>
	<remarks></remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotSetException">If the position vector x, y or z values has not been set</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotAvailableException">If the supplied velocity vector does not have valid x, y and z components</exception>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPositionVector.SetFromSite(ASCOM.HelperNET.NOVASCOM.Site,System.Double)">
	<summary>
 Initialize the PositionVector from a Site object and Greenwich apparent sidereal time.
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="gast">Greenwich Apparent Sidereal Time</param>
	<returns>True if successful or throws an exception</returns>
	<remarks>The GAST parameter must be for Greenwich, not local. The time is rotated through the 
 site longitude. See SetFromSiteJD() for an equivalent method that takes UTC Julian Date and 
 Delta-T (eliminating the need for calculating hyper-accurate GAST yourself).</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPositionVector.SetFromSiteJD(ASCOM.HelperNET.NOVASCOM.Site,System.Double)">
	<summary>
 Initialize the PositionVector from a Site object using UTC Julian date
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="ujd">UTC Julian Date</param>
	<returns>True if successful or throws an exception</returns>
	<remarks>The Julian date must be UTC Julian date, not terrestrial. Calculations will use the internal delta-T tables and estimator to get 
 delta-T. </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPositionVector.SetFromSiteJD(ASCOM.HelperNET.NOVASCOM.Site,System.Double,System.Double)">
	<summary>
 Initialize the PositionVector from a Site object using UTC Julian date and Delta-T
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="ujd">UTC Julian Date</param>
	<param name="delta_t">The value of Delta-T (TT - UT1) to use for reductions (seconds)</param>
	<returns>True if successful or throws an exception</returns>
	<remarks>The Julian date must be UTC Julian date, not terrestrial.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IPositionVector.SetFromStar(ASCOM.HelperNET.NOVASCOM.Star)">
	<summary>
 Initialize the PositionVector from a Star object.
 </summary>
	<param name="star">The Star object from which to initialize</param>
	<returns>True if successful or throws an exception</returns>
	<remarks></remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotAvailableException">If Parallax, RightAScension or Declination is not available in the supplied star object.</exception>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPositionVector.Azimuth">
	<summary>
 The azimuth coordinate (degrees, + east)
 </summary>
	<value>The azimuth coordinate</value>
	<returns>Degrees, + East</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPositionVector.Declination">
	<summary>
 Declination coordinate
 </summary>
	<value>Declination coordinate</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPositionVector.Distance">
	<summary>
 Distance/Radius coordinate
 </summary>
	<value>Distance/Radius coordinate</value>
	<returns>AU</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPositionVector.Elevation">
	<summary>
 The elevation (altitude) coordinate (degrees, + up)
 </summary>
	<value>The elevation (altitude) coordinate (degrees, + up)</value>
	<returns>(Degrees, + up</returns>
	<remarks>Elevation is available only in PositionVectors returned from calls to 
 Star.GetTopocentricPosition() and/or Planet.GetTopocentricPosition(). </remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotAvailableException">When the position vector has not been 
 initialised from Star.GetTopoCentricPosition and Planet.GetTopocentricPosition</exception>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPositionVector.LightTime">
	<summary>
 Light time from body to origin, days.
 </summary>
	<value>Light time from body to origin</value>
	<returns>Days</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPositionVector.RightAscension">
	<summary>
 RightAscension coordinate, hours
 </summary>
	<value>RightAscension coordinate</value>
	<returns>Hours</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPositionVector.x">
	<summary>
 Position cartesian x component
 </summary>
	<value>Cartesian x component</value>
	<returns>Cartesian x component</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPositionVector.y">
	<summary>
 Position cartesian y component
 </summary>
	<value>Cartesian y component</value>
	<returns>Cartesian y component</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IPositionVector.z">
	<summary>
 Position cartesian z component
 </summary>
	<value>Cartesian z component</value>
	<returns>Cartesian z component</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.IPositionVector">
	<summary>
 NOVAS-COM PositionVector Class
 </summary>
	<remarks>Objects of class PositionVector contain vectors used for positions (earth, sites, 
 stars and planets) throughout NOVAS-COM. Of course, its properties include the x, y, and z 
 components of the position. Additional properties are right ascension and declination, distance, 
 and light time (applicable to star positions), and Alt/Az (available only in PositionVectors 
 returned by Star or Planet methods GetTopocentricPosition()). You can initialize a PositionVector 
 from a Star object (essentially an FK5 or HIP catalog entry) or a Site (lat/long/height). 
 PositionVector has methods that can adjust the coordinates for precession, aberration and 
 proper motion. Thus, a PositionVector object gives access to some of the lower-level NOVAS functions. 
 <para><b>Note:</b> The equatorial coordinate properties of this object are dependent variables, and thus are read-only. Changing any cartesian coordinate will cause the equatorial coordinates to be recalculated. 
 </para></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.ISite.Set(System.Double,System.Double,System.Double)">
	<summary>
 Set all site properties in one method call
 </summary>
	<param name="Latitude">The geodetic latitude (degrees, + north)</param>
	<param name="Longitude">The geodetic longitude (degrees, +east)</param>
	<param name="Height">Height above sea level (meters)</param>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.ISite.Height">
	<summary>
 Height above mean sea level
 </summary>
	<value>Height above mean sea level</value>
	<returns>Meters</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.ISite.Latitude">
	<summary>
 Geodetic latitude (degrees, + north)
 </summary>
	<value>Geodetic latitude</value>
	<returns>Degrees, + north</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.ISite.Longitude">
	<summary>
 Geodetic longitude (degrees, + east)
 </summary>
	<value>Geodetic longitude</value>
	<returns>Degrees, + east</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.ISite.Pressure">
	<summary>
 Barometric pressure (millibars)
 </summary>
	<value>Barometric pressure</value>
	<returns>Millibars</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.ISite.Temperature">
	<summary>
 Ambient temperature (deg. Celsius)
 </summary>
	<value>Ambient temperature</value>
	<returns>Degrees Celsius)</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.ISite">
	<summary>
 NOVAS-COM Site Class
 </summary>
	<remarks>Objects of class Site contain the specifications for an observer's location on the Earth 
 ellipsoid. Properties are latitude, longitude, height above mean sea level, the ambient temperature 
 and the sea-level barmetric pressure. The latter two are used only for optional refraction corrections. 
 Latitude and longitude are (common) geodetic, not geocentric. </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IStar.Set(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Initialize all star properties with one call
 </summary>
	<param name="RA">Catalog mean right ascension (hours)</param>
	<param name="Dec">Catalog mean declination (degrees)</param>
	<param name="ProMoRA">Catalog mean J2000 proper motion in right ascension (sec/century)</param>
	<param name="ProMoDec">Catalog mean J2000 proper motion in declination (arcsec/century)</param>
	<param name="Parallax">Catalog mean J2000 parallax (arcsec)</param>
	<param name="RadVel">Catalog mean J2000 radial velocity (km/sec)</param>
	<remarks>Assumes positions are FK5. If Parallax is set to zero, NOVAS-COM assumes the object 
 is on the "celestial sphere", which has a distance of 10 megaparsecs. </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IStar.SetHipparcos(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Initialise all star properties in one call using Hipparcos data. Transforms to FK5 standard used by NOVAS.
 </summary>
	<param name="RA">Catalog mean right ascension (hours)</param>
	<param name="Dec">Catalog mean declination (degrees)</param>
	<param name="ProMoRA">Catalog mean J2000 proper motion in right ascension (sec/century)</param>
	<param name="ProMoDec">Catalog mean J2000 proper motion in declination (arcsec/century)</param>
	<param name="Parallax">Catalog mean J2000 parallax (arcsec)</param>
	<param name="RadVel">Catalog mean J2000 radial velocity (km/sec)</param>
	<remarks>Assumes positions are Hipparcos standard and transforms to FK5 standard used by NOVAS. 
 <para>If Parallax is set to zero, NOVAS-COM assumes the object is on the "celestial sphere", 
 which has a distance of 10 megaparsecs.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IStar.GetApparentPosition(System.Double)">
	<summary>
 Get an apparent position for a given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the apparent place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IStar.GetAstrometricPosition(System.Double)">
	<summary>
 Get an astrometric position for a given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the astrometric place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IStar.GetLocalPosition(System.Double,ASCOM.HelperNET.NOVASCOM.Site)">
	<summary>
 Get a local position for a given site and time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<param name="site">A Site object representing the observing site</param>
	<returns>PositionVector for the local place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IStar.GetTopocentricPosition(System.Double,ASCOM.HelperNET.NOVASCOM.Site,System.Boolean)">
	<summary>
 Get a topocentric position for a given site and time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<param name="site">A Site object representing the observing site</param>
	<param name="Refract">True to apply atmospheric refraction corrections</param>
	<returns>PositionVector for the topocentric place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IStar.GetVirtualPosition(System.Double)">
	<summary>
 Get a virtual position at a given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the virtual place.</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.Catalog">
	<summary>
 Three character catalog code for the star's data
 </summary>
	<value>Three character catalog code for the star's data</value>
	<returns>Three character catalog code for the star's data</returns>
	<remarks>Typically "FK5" but may be "HIP". For information only.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.Declination">
	<summary>
 Mean catalog J2000 declination coordinate (degrees)
 </summary>
	<value>Mean catalog J2000 declination coordinate</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.DeltaT">
	<summary>
 The value of delta-T (TT - UT1) to use for reductions.
 </summary>
	<value>The value of delta-T (TT - UT1) to use for reductions.</value>
	<returns>Seconds</returns>
	<remarks>If this property is not set, calculations will use an internal function to estimate delta-T.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.EarthEphemeris">
	<summary>
 Ephemeris object used to provide the position of the Earth.
 </summary>
	<value>Ephemeris object used to provide the position of the Earth.</value>
	<returns>Ephemeris object</returns>
	<remarks>If this value is not set, an internal Kepler object will be used to determine 
 Earth ephemeris</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.Name">
	<summary>
 The catalog name of the star (50 char max)
 </summary>
	<value>The catalog name of the star</value>
	<returns>Name (50 char max)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.Number">
	<summary>
 The catalog number of the star
 </summary>
	<value>The catalog number of the star</value>
	<returns>The catalog number of the star</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.Parallax">
	<summary>
 Catalog mean J2000 parallax (arcsec)
 </summary>
	<value>Catalog mean J2000 parallax</value>
	<returns>Arc seconds</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.ProperMotionDec">
	<summary>
 Catalog mean J2000 proper motion in declination (arcsec/century)
 </summary>
	<value>Catalog mean J2000 proper motion in declination</value>
	<returns>Arc seconds per century</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.ProperMotionRA">
	<summary>
 Catalog mean J2000 proper motion in right ascension (sec/century)
 </summary>
	<value>Catalog mean J2000 proper motion in right ascension</value>
	<returns>Seconds per century</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.RadialVelocity">
	<summary>
 Catalog mean J2000 radial velocity (km/sec)
 </summary>
	<value>Catalog mean J2000 radial velocity</value>
	<returns>Kilometers per second</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IStar.RightAscension">
	<summary>
 Catalog mean J2000 right ascension coordinate (hours)
 </summary>
	<value>Catalog mean J2000 right ascension coordinate</value>
	<returns>Hours</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.IStar">
	<summary>
 NOVAS-COM Star Class
 </summary>
	<remarks>Objects of class Site contain the specifications for a star's catalog position in either FK5 or Hipparcos units (both must be J2000). Properties are right ascension and declination, proper motions, parallax, radial velocity, catalog type (FK5 or HIP), catalog number, optional ephemeris engine to use for barycenter calculations, and an optional value for delta-T. Unless you specifically set the DeltaT property, calculations performed by this class which require the value of delta-T (TT - UT1) rely on an internal function to estimate delta-T. 
<para>The high-level NOVAS astrometric functions are implemented as methods of Star: 
 GetTopocentricPosition(), GetLocalPosition(), GetApparentPosition(), GetVirtualPosition(), 
 and GetAstrometricPosition(). These methods operate on the properties of the Star, and produce 
 a PositionVector object. For example, to get the topocentric coordinates of a star, simply create 
 and initialize a Star, then call Star.GetTopocentricPosition(). The resulting vaPositionVector's 
 right ascension and declination properties are the topocentric equatorial coordinates, at the same 
 time, the (optionally refracted) alt-az coordinates are calculated, and are also contained within 
 the returned PositionVector. <b>Note that Alt/Az is available in PositionVectors returned from calling 
 GetTopocentricPosition().</b></para></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IVelocityVector.SetFromSite(ASCOM.HelperNET.NOVASCOM.Site,System.Double)">
	<summary>
 Initialize the VelocityVector from a Site object and Greenwich Apparent Sdereal Time.
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="gast">Greenwich Apparent Sidereal Time</param>
	<returns>True if OK or throws an exception</returns>
	<remarks>The velocity vector is that of the observer with respect to the Earth's center 
 of mass. The GAST parameter must be for Greenwich, not local. The time is rotated through 
 the site longitude. See SetFromSiteJD() for an equivalent method that takes UTC Julian 
 Date and optionally Delta-T (eliminating the need for calculating hyper-accurate GAST yourself). </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IVelocityVector.SetFromSiteJD(ASCOM.HelperNET.NOVASCOM.Site,System.Double)">
	<summary>
 Initialize the VelocityVector from a Site object using UTC Julian Date
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="ujd">UTC Julian Date</param>
	<returns>True if OK otherwise throws an exception</returns>
	<remarks>The velocity vector is that of the observer with respect to the Earth's center 
 of mass. The Julian date must be UTC Julian date, not terrestrial. This call will use 
 the internal tables and estimator to get delta-T. </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IVelocityVector.SetFromSiteJD(ASCOM.HelperNET.NOVASCOM.Site,System.Double,System.Double)">
	<summary>
 Initialize the VelocityVector from a Site object using UTC Julian Date and Delta-T
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="ujd">UTC Julian Date</param>
	<param name="delta_t">The optional value of Delta-T (TT - UT1) to use for reductions (seconds)</param>
	<returns>True if OK otherwise throws an exception</returns>
	<remarks>The velocity vector is that of the observer with respect to the Earth's center 
 of mass. The Julian date must be UTC Julian date, not terrestrial.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.IVelocityVector.SetFromStar(ASCOM.HelperNET.NOVASCOM.Star)">
	<summary>
 Initialize the VelocityVector from a Star object.
 </summary>
	<param name="star">The Star object from which to initialize</param>
	<returns>True if OK otherwise throws an exception</returns>
	<remarks>The proper motions, distance and radial velocity are used in the velocity calculation. </remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotAvailableException">If any of: Parallax, RightAscension, Declination, 
 ProperMotionRA, ProperMotionDec or RadialVelocity are not available in the star object</exception>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IVelocityVector.DecVelocity">
	<summary>
  Linear velocity along the declination direction (AU/day)
 </summary>
	<value>Linear velocity along the declination direction</value>
	<returns>AU/day</returns>
	<remarks>This is not the proper motion (which is an angular rate and is dependent on the distance to the object).</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IVelocityVector.RadialVelocity">
	<summary>
 Linear velocity along the radial direction (AU/day)
 </summary>
	<value>Linear velocity along the radial direction</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IVelocityVector.RAVelocity">
	<summary>
 Linear velocity along the right ascension direction (AU/day)
 </summary>
	<value>Linear velocity along the right ascension direction</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IVelocityVector.x">
	<summary>
 Cartesian x component of velocity (AU/day)
 </summary>
	<value>Cartesian x component of velocity</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IVelocityVector.y">
	<summary>
 Cartesian y component of velocity (AU/day)
 </summary>
	<value>Cartesian y component of velocity</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.IVelocityVector.z">
	<summary>
 Cartesian z component of velocity (AU/day)
 </summary>
	<value>Cartesian z component of velocity</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.IVelocityVector">
	<summary>
 NOVAS_COM VelocityVector Class
 </summary>
	<remarks>Objects of class VelocityVector contain vectors used for velocities (earth, sites, 
 planets, and stars) throughout NOVAS-COM. Of course, its properties include the x, y, and z 
 components of the velocity. Additional properties are the velocity in equatorial coordinates of 
 right ascension dot, declination dot and radial velocity. You can initialize a PositionVector from 
 a Star object (essentially an FK5 or HIP catalog entry) or a Site (lat/long/height). For the star 
 object the proper motions, distance and radial velocity are used, for a site, the velocity is that 
 of the observer with respect to the Earth's center of mass. </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Earth.#ctor">
	<summary>
 Create a new instance of the Earth object
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.BarycentricPosition">
	<summary>
 Earth barycentric position
 </summary>
	<value>Barycentric position vector</value>
	<returns>AU (Ref J2000)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.BarycentricTime">
	<summary>
 Earth barycentric time 
 </summary>
	<value>Barycentric dynamical time for given Terrestrial Julian Date</value>
	<returns>Julian date</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.BarycentricVelocity">
	<summary>
 Earth barycentric velocity 
 </summary>
	<value>Barycentric velocity vector</value>
	<returns>AU/day (ref J2000)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.EarthEphemeris">
	<summary>
 Ephemeris object used to provide the position of the Earth.
 </summary>
	<value>Earth ephemeris object </value>
	<returns>Earth ephemeris object</returns>
	<remarks>
 Setting this is optional, if not set, the internal Kepler engine will be used.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.EquationOfEquinoxes">
	<summary>
 Earth equation of equinoxes 
 </summary>
	<value>Equation of the equinoxes</value>
	<returns>Seconds</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.HeliocentricPosition">
	<summary>
 Earth heliocentric position
 </summary>
	<value>Heliocentric position vector</value>
	<returns>AU (ref J2000)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.HeliocentricVelocity">
	<summary>
 Earth heliocentric velocity 
 </summary>
	<value>Heliocentric velocity</value>
	<returns>Velocity vector, AU/day (ref J2000)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.MeanObliquity">
	<summary>
 Earth mean objiquity
 </summary>
	<value>Mean obliquity of the ecliptic</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.NutationInLongitude">
	<summary>
 Earth nutation in longitude 
 </summary>
	<value>Nutation in longitude</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.NutationInObliquity">
	<summary>
 Earth nutation in obliquity 
 </summary>
	<value>Nutation in obliquity</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Earth.SetForTime(System.Double)">
	<summary>
 Initialize the Earth object for given terrestrial Julian date
 </summary>
	<param name="tjd">Terrestrial Julian date</param>
	<returns>True if successful, else throws an exception</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Earth.TrueObliquity">
	<summary>
 Earth true obliquity 
 </summary>
	<value>True obliquity of the ecliptic</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.Earth">
	<summary>
 Represents the "state" of the Earth at a given Terrestrial Julian date
 </summary>
	<remarks>Objects of class Earth represent the "state" of the Earth at a given Terrestrial Julian date. 
 The state includes barycentric and heliocentric position vectors for the earth, plus obliquity, 
 nutation and the equation of the equinoxes. Unless set by the client, the Earth ephemeris used is 
 computed using an internal approximation. The client may optionally attach an ephemeris object for 
 increased accuracy. 
 <para><b>Ephemeris Generator</b><br/>
 The ephemeris generator object used with NOVAS-COM must support a single 
 method GetPositionAndVelocity(tjd). This method must take a terrestrial Julian date (like the 
 NOVAS-COM methods) as its single parameter, and return an array of Double 
 containing the rectangular (x/y/z) heliocentric J2000 equatorial coordinates of position (AU) and velocity 
 (KM/sec.). In addition, it must support three read/write properties BodyType, Name, and Number, 
 which correspond to the Type, Name, and Number properties of Novas.Planet. 
 </para></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Planet.#ctor">
	<summary>
 Create a new instance of the Plant class
 </summary>
	<remarks>This assigns default Kepler instances for the Earth and Planet objects so it is
 not necessary to create and attach Kepler objects in order to get Kepler accuracy from this
 component</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Planet.DeltaT">
	<summary>
 Planet delta-T
 </summary>
	<value>The value of delta-T (TT - UT1) to use for reductions</value>
	<returns>Seconds</returns>
	<remarks>Setting this value is optional. If no value is set, an internal delta-T generator is used.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Planet.EarthEphemeris">
	<summary>
 Ephemeris object used to provide the position of the Earth.
 </summary>
	<value>Earth ephemeris object</value>
	<returns>Earth ephemeris object</returns>
	<remarks>
 Setting this is optional, if not set, the internal Kepler engine will be used.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Planet.Ephemeris">
	<summary>
 The Ephemeris object used to provide positions of solar system bodies.
 </summary>
	<value>Body ephemeris object</value>
	<returns>Body ephemeris object</returns>
	<remarks>
 Setting this is optional, if not set, the internal Kepler engine will be used.
 </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Planet.GetApparentPosition(System.Double)">
	<summary>
 Get an apparent position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the apparent place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Planet.GetAstrometricPosition(System.Double)">
	<summary>
 Get an astrometric position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the astrometric place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Planet.GetLocalPosition(System.Double,ASCOM.HelperNET.NOVASCOM.Site)">
	<summary>
 Get an local position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<param name="site">The observing site</param>
	<returns>PositionVector for the local place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Planet.GetTopocentricPosition(System.Double,ASCOM.HelperNET.NOVASCOM.Site,System.Boolean)">
	<summary>
 Get a topocentric position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<param name="site">The observing site</param>
	<param name="Refract">Apply refraction correction</param>
	<returns>PositionVector for the topocentric place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Planet.GetVirtualPosition(System.Double)">
	<summary>
 Get a virtual position for given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the virtual place.</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Planet.Name">
	<summary>
 Planet name
 </summary>
	<value>For unnumbered minor planets, (Type=nvMinorPlanet and Number=0), the packed designation 
 for the minor planet. For other types, this is not significant, but may be used to store 
 a name.</value>
	<returns>Name of planet</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Planet.Number">
	<summary>
 Planet number
 </summary>
	<value>For major planets (Type=nvMajorPlanet), a PlanetNumber value. For minor planets 
 (Type=nvMinorPlanet), the number of the minor planet or 0 for unnumbered minor planet.</value>
	<returns>Planet number</returns>
	<remarks>The major planet number is its number out from the sun starting with Mercury = 1</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Planet.Type">
	<summary>
 The type of solar system body
 </summary>
	<value>The type of solar system body</value>
	<returns>Value from the BodyType enum</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.Planet">
	<summary>
 Provide characteristics of a solar system body
 </summary>
	<remarks>Objects of class Planet hold the characteristics of a solar system body. Properties are 
 type (major or minor planet), number (for major and numbered minor planets), name (for unnumbered 
 minor planets and comets), the ephemeris object to be used for orbital calculations, an optional 
 ephemeris object to use for barycenter calculations, and an optional value for delta-T. 
 <para>The high-level NOVAS astrometric functions are implemented as methods of Planet: 
 GetTopocentricPosition(), GetLocalPosition(), GetApparentPosition(), GetVirtualPosition(), 
 and GetAstrometricPosition(). These methods operate on the properties of the Planet, and produce 
 a PositionVector object. For example, to get the topocentric coordinates of a planet, create and 
 initialize a planet, create initialize and attach an ephemeris object, then call 
 Planet.GetTopocentricPosition(). The resulting PositionVector's right ascension and declination 
 properties are the topocentric equatorial coordinates, at the same time, the (optionally 
 refracted) alt-az coordinates are calculated, and are also contained within the returned 
 PositionVector. <b>Note that Alt/Az is available in PositionVectors returned from calling 
 GetTopocentricPosition().</b> The accuracy of these calculations is typically dominated by the accuracy 
 of the attached ephemeris generator. </para>
		<para><b>Ephemeris Generator</b><br/>
 By default, Kepler instances are attached for both Earth and Planet objects so it is
 not necessary to create and attach these in order to get Kepler accuracy from this
 component</para>
		<para>The ephemeris generator object used with NOVAS-COM must support a single 
 method GetPositionAndVelocity(tjd). This method must take a terrestrial Julian date (like the 
 NOVAS-COM methods) as its single parameter, and return an array of Double 
 containing the rectangular (x/y/z) heliocentric J2000 equatorial coordinates of position (AU) and velocity 
 (KM/sec.). In addition, it must support three read/write properties BodyType, Name, and Number, 
 which correspond to the Type, Name, and Number properties of Novas.Planet. 
 </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.PositionVector.#ctor">
	<summary>
 Create a new, uninitialised position vector
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.PositionVector.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
  Create a new position vector with supplied initial values
 </summary>
	<param name="x">Position vector x co-ordinate</param>
	<param name="y">Position vector y co-ordinate</param>
	<param name="z">Position vector z co-ordinate</param>
	<param name="RA">Right ascension (hours)</param>
	<param name="DEC">Declination (degrees)</param>
	<param name="Distance">Distance to object</param>
	<param name="Light">Light-time to object</param>
	<param name="Azimuth">Object azimuth</param>
	<param name="Altitude">Object altitude</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.PositionVector.Aberration(ASCOM.HelperNET.NOVASCOM.VelocityVector)">
	<summary>
 Adjust the position vector of an object for aberration of light
 </summary>
	<param name="vel">The velocity vector of the observer</param>
	<remarks>The algorithm includes relativistic terms</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.PositionVector.Azimuth">
	<summary>
 The azimuth coordinate (degrees, + east)
 </summary>
	<value>The azimuth coordinate</value>
	<returns>Degrees, + East</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.PositionVector.Declination">
	<summary>
 Declination coordinate
 </summary>
	<value>Declination coordinate</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.PositionVector.Distance">
	<summary>
 Distance/Radius coordinate
 </summary>
	<value>Distance/Radius coordinate</value>
	<returns>AU</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.PositionVector.Elevation">
	<summary>
 The elevation (altitude) coordinate (degrees, + up)
 </summary>
	<value>The elevation (altitude) coordinate (degrees, + up)</value>
	<returns>(Degrees, + up</returns>
	<remarks>Elevation is available only in PositionVectors returned from calls to 
 Star.GetTopocentricPosition() and/or Planet.GetTopocentricPosition(). </remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotAvailableException">When the position vector has not been 
 initialised from Star.GetTopoCentricPosition and Planet.GetTopocentricPosition</exception>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.PositionVector.LightTime">
	<summary>
 Light time from body to origin, days.
 </summary>
	<value>Light time from body to origin</value>
	<returns>Days</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.PositionVector.Precess(System.Double,System.Double)">
	<summary>
 Adjust the position vector for precession of equinoxes between two given epochs
 </summary>
	<param name="tjd">The first epoch (Terrestrial Julian Date)</param>
	<param name="tjd2">The second epoch (Terrestrial Julian Date)</param>
	<remarks>The coordinates are referred to the mean equator and equinox of the two respective epochs.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.PositionVector.ProperMotion(ASCOM.HelperNET.NOVASCOM.VelocityVector,System.Double,System.Double)">
	<summary>
 Adjust the position vector for proper motion (including foreshortening effects)
 </summary>
	<param name="vel">The velocity vector of the object</param>
	<param name="tjd1">The first epoch (Terrestrial Julian Date)</param>
	<param name="tjd2">The second epoch (Terrestrial Julian Date)</param>
	<returns>True if successful or throws an exception.</returns>
	<remarks></remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotSetException">If the position vector x, y or z values has not been set</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotAvailableException">If the supplied velocity vector does not have valid x, y and z components</exception>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.PositionVector.RightAscension">
	<summary>
 RightAscension coordinate, hours
 </summary>
	<value>RightAscension coordinate</value>
	<returns>Hours</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.PositionVector.SetFromSite(ASCOM.HelperNET.NOVASCOM.Site,System.Double)">
	<summary>
 Initialize the PositionVector from a Site object and Greenwich apparent sidereal time.
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="gast">Greenwich Apparent Sidereal Time</param>
	<returns>True if successful or throws an exception</returns>
	<remarks>The GAST parameter must be for Greenwich, not local. The time is rotated through the 
 site longitude. See SetFromSiteJD() for an equivalent method that takes UTC Julian Date and 
 Delta-T (eliminating the need for calculating hyper-accurate GAST yourself).</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.PositionVector.SetFromSiteJD(ASCOM.HelperNET.NOVASCOM.Site,System.Double)">
	<summary>
 Initialize the PositionVector from a Site object using UTC Julian date
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="ujd">UTC Julian Date</param>
	<returns>True if successful or throws an exception</returns>
	<remarks>The Julian date must be UTC Julian date, not terrestrial. Calculations will use the internal delta-T tables and estimator to get 
 delta-T. </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.PositionVector.SetFromSiteJD(ASCOM.HelperNET.NOVASCOM.Site,System.Double,System.Double)">
	<summary>
 Initialize the PositionVector from a Site object using UTC Julian date and Delta-T
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="ujd">UTC Julian Date</param>
	<param name="delta_t">The value of Delta-T (TT - UT1) to use for reductions (seconds)</param>
	<returns>True if successful or throws an exception</returns>
	<remarks>The Julian date must be UTC Julian date, not terrestrial.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.PositionVector.SetFromStar(ASCOM.HelperNET.NOVASCOM.Star)">
	<summary>
 Initialize the PositionVector from a Star object.
 </summary>
	<param name="star">The Star object from which to initialize</param>
	<returns>True if successful or throws an exception</returns>
	<remarks></remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotAvailableException">If Parallax, RightAScension or Declination is not available in the supplied star object.</exception>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.PositionVector.x">
	<summary>
 Position cartesian x component
 </summary>
	<value>Cartesian x component</value>
	<returns>Cartesian x component</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.PositionVector.y">
	<summary>
 Position cartesian y component
 </summary>
	<value>Cartesian y component</value>
	<returns>Cartesian y component</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.PositionVector.z">
	<summary>
 Position cartesian z component
 </summary>
	<value>Cartesian z component</value>
	<returns>Cartesian z component</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.PositionVector">
	<summary>
 NOVAS-COM PositionVector Class
 </summary>
	<remarks>Objects of class PositionVector contain vectors used for positions (earth, sites, 
 stars and planets) throughout NOVAS-COM. Of course, its properties include the x, y, and z 
 components of the position. Additional properties are right ascension and declination, distance, 
 and light time (applicable to star positions), and Alt/Az (available only in PositionVectors 
 returned by Star or Planet methods GetTopocentricPosition()). You can initialize a PositionVector 
 from a Star object (essentially an FK5 or HIP catalog entry) or a Site (lat/long/height). 
 PositionVector has methods that can adjust the coordinates for precession, aberration and 
 proper motion. Thus, a PositionVector object gives access to some of the lower-level NOVAS functions. 
 <para><b>Note:</b> The equatorial coordinate properties of this object are dependent variables, and thus are read-only. Changing any cartesian coordinate will cause the equatorial coordinates to be recalculated. 
 </para></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Site.#ctor">
	<summary>
 Initialises a new site object
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Site.Height">
	<summary>
 Height above mean sea level
 </summary>
	<value>Height above mean sea level</value>
	<returns>Meters</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Site.Latitude">
	<summary>
 Geodetic latitude (degrees, + north)
 </summary>
	<value>Geodetic latitude</value>
	<returns>Degrees, + north</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Site.Longitude">
	<summary>
 Geodetic longitude (degrees, + east)
 </summary>
	<value>Geodetic longitude</value>
	<returns>Degrees, + east</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Site.Pressure">
	<summary>
 Barometric pressure (millibars)
 </summary>
	<value>Barometric pressure</value>
	<returns>Millibars</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Site.Set(System.Double,System.Double,System.Double)">
	<summary>
 Set all site properties in one method call
 </summary>
	<param name="Latitude">The geodetic latitude (degrees, + north)</param>
	<param name="Longitude">The geodetic longitude (degrees, +east)</param>
	<param name="Height">Height above sea level (meters)</param>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Site.Temperature">
	<summary>
 Ambient temperature (deg. Celsius)
 </summary>
	<value>Ambient temperature</value>
	<returns>Degrees Celsius)</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.Site">
	<summary>
 NOVAS-COM Site Class
 </summary>
	<remarks>Objects of class Site contain the specifications for an observer's location on the Earth 
 ellipsoid. Properties are latitude, longitude, height above mean sea level, the ambient temperature 
 and the sea-level barmetric pressure. The latter two are used only for optional refraction corrections. 
 Latitude and longitude are (common) geodetic, not geocentric. </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Star.#ctor">
	<summary>
 Initialise a new instance of the star class
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.Catalog">
	<summary>
 Three character catalog code for the star's data
 </summary>
	<value>Three character catalog code for the star's data</value>
	<returns>Three character catalog code for the star's data</returns>
	<remarks>Typically "FK5" but may be "HIP". For information only.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.Declination">
	<summary>
 Mean catalog J2000 declination coordinate (degrees)
 </summary>
	<value>Mean catalog J2000 declination coordinate</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.DeltaT">
	<summary>
 The value of delta-T (TT - UT1) to use for reductions.
 </summary>
	<value>The value of delta-T (TT - UT1) to use for reductions.</value>
	<returns>Seconds</returns>
	<remarks>If this property is not set, calculations will use an internal function to estimate delta-T.</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.EarthEphemeris">
	<summary>
 Ephemeris object used to provide the position of the Earth.
 </summary>
	<value>Ephemeris object used to provide the position of the Earth.</value>
	<returns>Ephemeris object</returns>
	<remarks>If this value is not set, an internal Kepler object will be used to determine 
 Earth ephemeris</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Star.GetApparentPosition(System.Double)">
	<summary>
 Get an apparent position for a given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the apparent place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Star.GetAstrometricPosition(System.Double)">
	<summary>
 Get an astrometric position for a given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the astrometric place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Star.GetLocalPosition(System.Double,ASCOM.HelperNET.NOVASCOM.Site)">
	<summary>
 Get a local position for a given site and time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<param name="site">A Site object representing the observing site</param>
	<returns>PositionVector for the local place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Star.GetTopocentricPosition(System.Double,ASCOM.HelperNET.NOVASCOM.Site,System.Boolean)">
	<summary>
 Get a topocentric position for a given site and time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<param name="site">A Site object representing the observing site</param>
	<param name="Refract">True to apply atmospheric refraction corrections</param>
	<returns>PositionVector for the topocentric place.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Star.GetVirtualPosition(System.Double)">
	<summary>
 Get a virtual position at a given time
 </summary>
	<param name="tjd">Terrestrial Julian Date for the position</param>
	<returns>PositionVector for the virtual place.</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.Name">
	<summary>
 The catalog name of the star (50 char max)
 </summary>
	<value>The catalog name of the star</value>
	<returns>Name (50 char max)</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.Number">
	<summary>
 The catalog number of the star
 </summary>
	<value>The catalog number of the star</value>
	<returns>The catalog number of the star</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.Parallax">
	<summary>
 Catalog mean J2000 parallax (arcsec)
 </summary>
	<value>Catalog mean J2000 parallax</value>
	<returns>Arc seconds</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.ProperMotionDec">
	<summary>
 Catalog mean J2000 proper motion in declination (arcsec/century)
 </summary>
	<value>Catalog mean J2000 proper motion in declination</value>
	<returns>Arc seconds per century</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.ProperMotionRA">
	<summary>
 Catalog mean J2000 proper motion in right ascension (sec/century)
 </summary>
	<value>Catalog mean J2000 proper motion in right ascension</value>
	<returns>Seconds per century</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.RadialVelocity">
	<summary>
 Catalog mean J2000 radial velocity (km/sec)
 </summary>
	<value>Catalog mean J2000 radial velocity</value>
	<returns>Kilometers per second</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.Star.RightAscension">
	<summary>
 Catalog mean J2000 right ascension coordinate (hours)
 </summary>
	<value>Catalog mean J2000 right ascension coordinate</value>
	<returns>Hours</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Star.Set(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Initialize all star properties with one call
 </summary>
	<param name="RA">Catalog mean right ascension (hours)</param>
	<param name="Dec">Catalog mean declination (degrees)</param>
	<param name="ProMoRA">Catalog mean J2000 proper motion in right ascension (sec/century)</param>
	<param name="ProMoDec">Catalog mean J2000 proper motion in declination (arcsec/century)</param>
	<param name="Parallax">Catalog mean J2000 parallax (arcsec)</param>
	<param name="RadVel">Catalog mean J2000 radial velocity (km/sec)</param>
	<remarks>Assumes positions are FK5. If Parallax is set to zero, NOVAS-COM assumes the object 
 is on the "celestial sphere", which has a distance of 10 megaparsecs. </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.Star.SetHipparcos(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Initialise all star properties in one call using Hipparcos data. Transforms to FK5 standard used by NOVAS.
 </summary>
	<param name="RA">Catalog mean right ascension (hours)</param>
	<param name="Dec">Catalog mean declination (degrees)</param>
	<param name="ProMoRA">Catalog mean J2000 proper motion in right ascension (sec/century)</param>
	<param name="ProMoDec">Catalog mean J2000 proper motion in declination (arcsec/century)</param>
	<param name="Parallax">Catalog mean J2000 parallax (arcsec)</param>
	<param name="RadVel">Catalog mean J2000 radial velocity (km/sec)</param>
	<remarks>Assumes positions are Hipparcos standard and transforms to FK5 standard used by NOVAS. 
 <para>If Parallax is set to zero, NOVAS-COM assumes the object is on the "celestial sphere", 
 which has a distance of 10 megaparsecs.</para>
	</remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.Star">
	<summary>
 NOVAS-COM Star Class
 </summary>
	<remarks>Objects of class Site contain the specifications for a star's catalog position in either FK5 or Hipparcos units (both must be J2000). Properties are right ascension and declination, proper motions, parallax, radial velocity, catalog type (FK5 or HIP), catalog number, optional ephemeris engine to use for barycenter calculations, and an optional value for delta-T. Unless you specifically set the DeltaT property, calculations performed by this class which require the value of delta-T (TT - UT1) rely on an internal function to estimate delta-T. 
<para>The high-level NOVAS astrometric functions are implemented as methods of Star: 
 GetTopocentricPosition(), GetLocalPosition(), GetApparentPosition(), GetVirtualPosition(), 
 and GetAstrometricPosition(). These methods operate on the properties of the Star, and produce 
 a PositionVector object. For example, to get the topocentric coordinates of a star, simply create 
 and initialize a Star, then call Star.GetTopocentricPosition(). The resulting vaPositionVector's 
 right ascension and declination properties are the topocentric equatorial coordinates, at the same 
 time, the (optionally refracted) alt-az coordinates are calculated, and are also contained within 
 the returned PositionVector. <b>Note that Alt/Az is available in PositionVectors returned from calling 
 GetTopocentricPosition().</b></para></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.VelocityVector.#ctor">
	<summary>
 Creates a new velocity vector object
 </summary>
	<remarks>
	</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.VelocityVector.DecVelocity">
	<summary>
  Linear velocity along the declination direction (AU/day)
 </summary>
	<value>Linear velocity along the declination direction</value>
	<returns>AU/day</returns>
	<remarks>This is not the proper motion (which is an angular rate and is dependent on the distance to the object).</remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.VelocityVector.RadialVelocity">
	<summary>
 Linear velocity along the radial direction (AU/day)
 </summary>
	<value>Linear velocity along the radial direction</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.VelocityVector.RAVelocity">
	<summary>
 Linear velocity along the right ascension direction (AU/day)
 </summary>
	<value>Linear velocity along the right ascension direction</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.VelocityVector.SetFromSite(ASCOM.HelperNET.NOVASCOM.Site,System.Double)">
	<summary>
 Initialize the VelocityVector from a Site object and Greenwich Apparent Sdereal Time.
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="gast">Greenwich Apparent Sidereal Time</param>
	<returns>True if OK or throws an exception</returns>
	<remarks>The velocity vector is that of the observer with respect to the Earth's center 
 of mass. The GAST parameter must be for Greenwich, not local. The time is rotated through 
 the site longitude. See SetFromSiteJD() for an equivalent method that takes UTC Julian 
 Date and optionally Delta-T (eliminating the need for calculating hyper-accurate GAST yourself). </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.VelocityVector.SetFromSiteJD(ASCOM.HelperNET.NOVASCOM.Site,System.Double)">
	<summary>
 Initialize the VelocityVector from a Site object using UTC Julian Date
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="ujd">UTC Julian Date</param>
	<returns>True if OK otherwise throws an exception</returns>
	<remarks>The velocity vector is that of the observer with respect to the Earth's center 
 of mass. The Julian date must be UTC Julian date, not terrestrial. This call will use 
 the internal tables and estimator to get delta-T. </remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.VelocityVector.SetFromSiteJD(ASCOM.HelperNET.NOVASCOM.Site,System.Double,System.Double)">
	<summary>
 Initialize the VelocityVector from a Site object using UTC Julian Date and Delta-T
 </summary>
	<param name="site">The Site object from which to initialize</param>
	<param name="ujd">UTC Julian Date</param>
	<param name="delta_t">The optional value of Delta-T (TT - UT1) to use for reductions (seconds)</param>
	<returns>True if OK otherwise throws an exception</returns>
	<remarks>The velocity vector is that of the observer with respect to the Earth's center 
 of mass. The Julian date must be UTC Julian date, not terrestrial.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVASCOM.VelocityVector.SetFromStar(ASCOM.HelperNET.NOVASCOM.Star)">
	<summary>
 Initialize the VelocityVector from a Star object.
 </summary>
	<param name="star">The Star object from which to initialize</param>
	<returns>True if OK otherwise throws an exception</returns>
	<remarks>The proper motions, distance and radial velocity are used in the velocity calculation. </remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.ValueNotAvailableException">If any of: Parallax, RightAscension, Declination, 
 ProperMotionRA, ProperMotionDec or RadialVelocity are not available in the star object</exception>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.VelocityVector.x">
	<summary>
 Cartesian x component of velocity (AU/day)
 </summary>
	<value>Cartesian x component of velocity</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.VelocityVector.y">
	<summary>
 Cartesian y component of velocity (AU/day)
 </summary>
	<value>Cartesian y component of velocity</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.NOVASCOM.VelocityVector.z">
	<summary>
 Cartesian z component of velocity (AU/day)
 </summary>
	<value>Cartesian z component of velocity</value>
	<returns>AU/day</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVASCOM.VelocityVector">
	<summary>
 NOVAS_COM VelocityVector Class
 </summary>
	<remarks>Objects of class VelocityVector contain vectors used for velocities (earth, sites, 
 planets, and stars) throughout NOVAS-COM. Of course, its properties include the x, y, and z 
 components of the velocity. Additional properties are the velocity in equatorial coordinates of 
 right ascension dot, declination dot and radial velocity. You can initialize a PositionVector from 
 a Star object (essentially an FK5 or HIP catalog entry) or a Site (lat/long/height). For the star 
 object the proper motions, distance and radial velocity are used, for a site, the velocity is that 
 of the observer with respect to the Earth's center of mass. </remarks>
</member><member name="T:ASCOM.HelperNET.Serial.PortSpeed">
	<summary>
 Enumeration of serial port speeds for use with the Serial port
 </summary>
	<remarks>This contains an additional speed 230,400 baud that the COM component doesn't support.</remarks>
</member><member name="M:ASCOM.HelperNET.Serial.Dispose">
	<summary>
 Disposes of resources used by the profile object
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Serial.Dispose(System.Boolean)">
	<summary>
 Disposes of resources used by the profile object - called by IDisposable interface
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Serial.DataBits">
	<summary>
 Gets or sets the number of data bits in each byte
 </summary>
	<value>The number of data bits in each byte, default is 8 data bits</value>
	<returns>Integer number of data bits in each byte</returns>
	<exception cref="T:System.ArgumentOutOfRangeException">The data bits value is less than 5 or more than 8</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Serial.DTREnable">
	<summary>
 Gets or sets the state of the DTR line
 </summary>
	<value>The state of the DTR line, default is enabled</value>
	<returns>Boolean true/false indicating enabled/disabled</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Serial.Handshake">
	<summary>
 Gets or sets the type of serial handshake used on the serial link
 </summary>
	<value>The type of handshake used on the serial line, default is none</value>
	<returns>One of the Ports.Handshake enumeration values</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Serial.Parity">
	<summary>
 Gets or sets the type of parity check used over the serial link
 </summary>
	<value>The type of parity check used over the serial link, default none</value>
	<returns>One of the Ports.Parity enumeration values</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Serial.StopBits">
	<summary>
 Gets or sets the number of stop bits used on the serial link
 </summary>
	<value>the number of stop bits used on the serial link, default 1</value>
	<returns>One of the Ports.StopBits enumeration values</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Serial.Connected">
	<summary>
 Gets or sets the connected state of the ASCOM serial port.
 </summary>
	<value>Connected state of the serial port.</value>
	<returns><c>True</c> if the serial port is connected.</returns>
	<remarks>Set this property to True to connect to the serial (COM) port. You can read the property to determine if the object is connected. </remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Throws this exception if the requested 
 COM port does not exist.</exception>
</member><member name="P:ASCOM.HelperNET.Serial.Port">
	<summary>
 Gets or sets the number of the ASCOM serial port (Default is 1, giving COM1 as the serial port name).
 </summary>
	<value>COM port number of the ASCOM serial port.</value>
	<returns>Integer, number of the ASCOM serial port</returns>
	<remarks>This works for serial port names of the form COMnnn. Use PortName if your COM port name does not fit the form COMnnn.</remarks>
</member><member name="P:ASCOM.HelperNET.Serial.ReceiveTimeout">
	<summary>
 The maximum time that the ASCOM serial port will wait for incoming receive data (seconds, default = 5)
 </summary>
	<value>Integer, serial port timeout in seconds</value>
	<returns>Integer, serial port timeout in seconds.</returns>
	<remarks>The minimum delay timout that can be set through this command is 1 seconds. Use ReceiveTimeoutMs to set a timeout less than 1 second.</remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown when <paramref name="value"><c>=0</c></paramref> is invalid.</exception>
</member><member name="P:ASCOM.HelperNET.Serial.ReceiveTimeoutMs">
	<summary>
 The maximum time that the ASCOM serial port will wait for incoming receive data (milliseconds, default = 5000)
 </summary>
	<value>Integer, serial port timeout in milli-seconds</value>
	<returns>Integer, serial port timeout in milli-seconds</returns>
	<remarks>If a timeout occurs, an IO timeout error is raised. See ReceiveTimeout for an alternate form 
 using the timeout in seconds. </remarks>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown when <paramref name="value"><c>=0</c></paramref> is invalid.</exception>
</member><member name="P:ASCOM.HelperNET.Serial.Speed">
	<summary>
 Gets and sets the baud rate of the ASCOM serial port
 </summary>
	<value>Port speed using the PortSpeed enum</value>
	<returns>Port speed using the PortSpeed enum</returns>
	<remarks>This is modelled on the COM component with possible values enumerated in the PortSpeed enum.</remarks>
</member><member name="M:ASCOM.HelperNET.Serial.ClearBuffers">
	<summary>
 Clears the ASCOM serial port receive and transmit buffers
 </summary>
	<exception cref="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">Thrown when unable to acquire the serial port</exception>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Serial.Receive">
	<summary>
 Receive at least one text character from the ASCOM serial port
 </summary>
	<returns>The characters received</returns>
	<exception cref="T:System.TimeoutException">Thrown when a receive timeout occurs.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">Thrown when unable to acquire the serial port</exception>
	<remarks>This method reads all of the characters currently in the serial receive buffer. It will not return 
 unless it reads at least one character. A timeout will cause a TimeoutException to be raised. Use this for 
 text data, as it returns a String. </remarks>
</member><member name="M:ASCOM.HelperNET.Serial.ReceiveByte">
	<summary>
 Receive one binary byte from the ASCOM serial port
 </summary>
	<returns>The received byte</returns>
	<exception cref="T:System.TimeoutException">Thrown when a receive timeout occurs.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">Thrown when unable to acquire the serial port</exception>
	<remarks>Use this for 8-bit (binary data). If a timeout occurs, a TimeoutException is raised. </remarks>
</member><member name="M:ASCOM.HelperNET.Serial.ReceiveCounted(System.Int32)">
	<summary>
 Receive exactly the given number of characters from the ASCOM serial port and return as a string
 </summary>
	<param name="Count">The number of characters to return</param>
	<returns>String of length "Count" characters</returns>
	<exception cref="T:System.TimeoutException">Thrown when a receive timeout occurs.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">Thrown when unable to acquire the serial port</exception>
	<remarks>If a timeout occurs a TimeoutException is raised.</remarks>
</member><member name="M:ASCOM.HelperNET.Serial.ReceiveCountedBinary(System.Int32)">
	<summary>
 Receive exactly the given number of characters from the ASCOM serial port and return as a byte array
 </summary>
	<param name="Count">The number of characters to return</param>
	<returns>Byte array of size "Count" elements</returns>
	<exception cref="T:System.TimeoutException">Thrown when a receive timeout occurs.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">Thrown when unable to acquire the serial port</exception>
	<remarks>
		<para>If a timeout occurs, a TimeoutException is raised. </para>
		<para>This function exists in the COM component but is not documented in the help file.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Serial.ReceiveTerminated(System.String)">
	<summary>
 Receive characters from the ASCOM serial port until the given terminator string is seen
 </summary>
	<param name="Terminator">The character string that indicates end of message</param>
	<returns>Received characters including the terminator string</returns>
	<exception cref="T:System.TimeoutException">Thrown when a receive timeout occurs.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">Thrown when unable to acquire the serial port</exception>
	<remarks>If a timeout occurs, a TimeoutException is raised.</remarks>
</member><member name="M:ASCOM.HelperNET.Serial.ReceiveTerminatedBinary(System.Byte[])">
	<summary>
 Receive characters from the ASCOM serial port until the given terminator bytes are seen, return as a byte array
 </summary>
	<param name="TerminatorBytes">Array of bytes that indicates end of message</param>
	<returns>Byte array of received characters</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">Thrown when unable to acquire the serial port</exception>
	<remarks>
		<para>If a timeout occurs, a TimeoutException is raised.</para>
		<para>This function exists in the COM component but is not documented in the help file.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Serial.Transmit(System.String)">
	<summary>
 Transmits a string through the ASCOM serial port
 </summary>
	<param name="Data">String to transmit</param>
	<exception cref="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">Thrown when unable to acquire the serial port</exception>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Serial.TransmitBinary(System.Byte[])">
	<summary>
 Transmit an array of binary bytes through the ASCOM serial port 
 </summary>
	<param name="Data">Byte array to transmit</param>
	<exception cref="T:ASCOM.HelperNET.Exceptions.SerialPortInUseException">Thrown when unable to acquire the serial port</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Serial.PortName">
	<summary>
 Sets the ASCOM serial port name as a string
 </summary>
	<value>Serial port name to be used</value>
	<returns>Current serial port name</returns>
	<remarks>This property allows any serial port name to be used, even if it doesn't conform to a format of COMnnn
 If the required port name is of the form COMnnn then Serial.Port=nnn and Serial.PortName="COMnnn" are 
 equivalent.</remarks>
</member><member name="P:ASCOM.HelperNET.Serial.AvailableCOMPorts">
	<summary>
 Returns a list of all available ASCOM serial ports with COMnnn ports sorted into ascending port number order
 </summary>
	<value>String array of available serial ports</value>
	<returns>A string array of available serial ports</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Serial.LogMessage(System.String,System.String)">
	<summary>
 Adds a message to the ASCOM serial trace file
 </summary>
	<param name="Caller">String identifying the module logging the message</param>
	<param name="Message">Message text to be logged.</param>
	<remarks>
		<para>This can be called regardless of whether logging is enabled</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Serial.MakeHex(System.String)">
	<summary>
 Translates a supplied string into hex characters
 </summary>
	<param name="p_Msg">The string to convert</param>
	<returns>A string with each character represented as [xx]</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Serial">
	<summary>
 Creates a .NET serial port and provides a simple set of commands to use it.
 </summary>
	<remarks>This object provides an easy to use interface to a serial (COM) port. 
 It provides ASCII and binary I/O with controllable timeout. It is limited to 8 bit, no parity, 
 one stop-bit modes. The interface is callable from any .NET client.</remarks>
	<example>
 Example of how to create and use an ASCOM serial port.
 <code lang="vbnet" title="ASCOM Serial Port Example" source="..\..\HelperNET Samples\HelperNET Samples\SerialExamples.vb"/>
	</example>
</member><member name="M:ASCOM.HelperNET.Profile.Dispose(System.Boolean)">
	<summary>
 Disposes of resources used by the profile object - called by IDisposable interface
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Profile.Dispose">
	<summary>
 Disposes of resources used by the profile object
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Profile.DeviceType">
	<summary>
 The type of ASCOM device for which profile data and registration services are provided 
 (String, default = "Telescope")
 </summary>
	<value>String describing the type of device being accessed</value>
	<returns>String describing the type of device being accessed</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown on setting the device type to empty string</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Profile.RegisteredDeviceTypes">
	<summary>
 List the device types registered in the Profile store
 </summary>
	<value>List of registered device types</value>
	<returns>A sorted string array of device types</returns>
	<remarks>Use this to find the types of device that are registered in the Profile store.
 <para>Device types are returned without the suffix " Devices" that is used in key names within the 
 profile store; this allows direct use of returned device types inside For Each loops as shown in 
 the Profile code example.</para>
	</remarks>
</member><member name="P:ASCOM.HelperNET.Profile.RegisteredDevices(System.String)">
	<summary>
 List the devices of a given device type that are registered in the Profile store
 </summary>
	<param name="DeviceType">Type of devices to list</param>
	<value>List of registered devices</value>
	<returns>A sorted list of installed devices and associated device descriptions</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Throw if the supplied DeviceType is empty string or 
 null value.</exception>
	<remarks>
 Use this to find all the registerd devices of a given type that are in the Profile store
 <para>If a DeviceType is supplied, where no device of that type has been registered before on this system,
 an empty list will be returned</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Profile.IsRegistered(System.String)">
	<summary>
 Confirms whether a specific driver is registered ort unregistered in the profile store
 </summary>
	<param name="DriverID">String reprsenting the device's ProgID</param>
	<returns>Boolean indicating registered or unregisteredstate of the supplied DriverID</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Profile.Register(System.String,System.String)">
	<summary>
 Registers a supplied DriverID and associates a descriptive name with the device
 </summary>
	<param name="DriverID">ProgID of the device to register</param>
	<param name="DescriptiveName">Descriptive name of the device</param>
	<remarks>Does nothing if already registered, so safe to call on driver load.</remarks>
</member><member name="M:ASCOM.HelperNET.Profile.Unregister(System.String)">
	<summary>
 Remove all data for the given DriverID from the registry.
 </summary>
	<param name="DriverID">ProgID of the device to unregister</param>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks><para>This deletes the entire device profile tree, including the DriverID root key.</para>
		<para>Unregister must only be called if the driver has already been registered. If you are not sure 
 use the IsRegistered function to check the status and only unregister if the driver is registered.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Profile.GetValue(System.String,System.String)">
	<summary>
 Retrieve a string value from the profile for the given Driver ID and variable name
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<returns>Retrieved variable value</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks>
		<para>Name may be an empty string for the unnamed value. The unnamed value is also known as the "default" value for a registry key.</para>
		<para>Does not provide access to other registry data types such as binary and doubleword. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Profile.GetValue(System.String,System.String,System.String)">
	<summary>
 Retrieve a string value from the profile using the supplied subkey for the given Driver ID and variable name.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<param name="SubKey">Subkey from the profile root from which to read the value</param>
	<returns>Retrieved variable value</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks>
		<para>Name may be an empty string for the unnamed value. The unnamed value is also known as the "default" value for a registry key.</para>
		<para>Does not provide access to other registry data types such as binary and doubleword. </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Profile.WriteValue(System.String,System.String,System.String)">
	<summary>
 Writes a string value to the profile using the given Driver ID and variable name.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<param name="Value">The string value to be written</param>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Profile.WriteValue(System.String,System.String,System.String,System.String)">
	<summary>
 Writes a string value to the profile using the supplied subkey for the given Driver ID and variable name.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<param name="Value">The string value to be written</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.RestrictedAccessException">Thrown if Name and SubKey are both empty strings. This 
 value is reserved for the device description as it appears in Chooser and is set by Profile.Register</exception>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Profile.Values(System.String)">
	<summary>
 Return a list of the (unnamed and named variables) under the given DriverID.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<returns>Generic Sorted List of KeyValuePairs</returns>
	<remarks>The returned object contains entries for each value. For each entry, 
 the Key property is the value's name, and the Value property is the string value itself. Note that the unnamed (default) 
 value will be included if it has a value, even if the value is a blank string. The unnamed value will have its entry's 
 Key property set to an empty string. </remarks>
</member><member name="M:ASCOM.HelperNET.Profile.Values(System.String,System.String)">
	<summary>
 Return a list of the (unnamed and named variables) under the given DriverID subkey
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<returns>Generic Sorted List of KeyValuePairs</returns>
	<remarks>The returned object contains entries for each value. For each entry, 
 the Key property is the value's name, and the Value property is the string value itself. Note that the unnamed (default) 
 value will be included if it has a value, even if the value is a blank string. The unnamed value will have its entry's 
 Key property set to an empty string. </remarks>
</member><member name="M:ASCOM.HelperNET.Profile.DeleteValue(System.String,System.String)">
	<summary>
 Delete the value from the registry. Name may be an empty string for the unnamed value. 
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks>Specify "" to delete the unnamed value which is also known as the "default" value for a registry key. </remarks>
</member><member name="M:ASCOM.HelperNET.Profile.DeleteValue(System.String,System.String,System.String)">
	<summary>
 Delete the value from the registry. Name may be an empty string for the unnamed value. Value will be deleted from the subkey supplied.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="Name">Name of the variable whose value is retrieved</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks>Specify "" to delete the unnamed value which is also known as the "default" value for a registry key. </remarks>
</member><member name="M:ASCOM.HelperNET.Profile.CreateSubKey(System.String,System.String)">
	<summary>
 Create a registry key for the given DriverID.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks>If the SubKey argument contains a \ separated path, the intermediate keys will be created if needed. </remarks>
</member><member name="M:ASCOM.HelperNET.Profile.SubKeys(System.String)">
	<summary>
 Return a list of the sub-keys and their default values under the given DriverID.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<returns>Generic Sorted List of key-value pairs</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks>The returned Generic.SortedList object contains entries for each sub-key. For each KeyValuePair 
 in the list, the Key property is the sub-key name, and the Value property is the value. The unnamed 
 ("default") value for that key is also returned.</remarks>
</member><member name="M:ASCOM.HelperNET.Profile.SubKeys(System.String,System.String)">
	<summary>
 Return a list of the sub-keys and their default values under the given DriverID and sub-key
 </summary>
	<param name="DriverID">ProgID of the driver</param>
	<param name="SubKey">Subkey from the profile root in which to search for subkeys</param>
	<returns>Generic Sorted List of key-value pairs</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks>The returned Generic.SortedList object contains entries for each sub-key. For each KeyValuePair 
 in the list, the Key property is the sub-key name, and the Value property is the value. The unnamed 
 ("default") value for that key is also returned.</remarks>
</member><member name="M:ASCOM.HelperNET.Profile.DeleteSubKey(System.String,System.String)">
	<summary>
 Delete a registry key for the given DriverID. SubKey may contain \ separated path to key to be deleted.
 </summary>
	<param name="DriverID">ProgID of the device to read from</param>
	<param name="SubKey">Subkey from the profile root in which to write the value</param>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown if DriverID is an empty string.</exception>
	<exception cref="T:ASCOM.HelperNET.Exceptions.DriverNotRegisteredException">Thrown if the driver is not registered,</exception>
	<remarks>The sub-key and all data and keys beneath it are deleted.</remarks>
</member><member name="T:ASCOM.HelperNET.Profile">
	<summary>
 ASCOM Scope Driver Helper Registry Profile Object
 </summary>
	<remarks>
		<para>This object provides facilities for registering ASCOM drivers with the Chooser, and for storing 
 persistence information in a shared area of the file system.</para>
		<para>Please code to the IProfile interface</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.#ctor(System.String,System.String)">
	<summary>
 Creates a new TraceLogger instance
 </summary>
	<param name="p_LogFileName">Fully qualified trace file name or null string to use automatic file naming (recommended)</param>
	<param name="p_LogFileType">String identifying the type of log e,g, Focuser, LX200, GEMINI, MoonLite, G11</param>
	<remarks>The LogFileType is used in the file name to allow you to quickly identify which of several logs contains the information of interest.</remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.Dispose(System.Boolean)">
	<summary>
 Disposes of the TraceLogger object
 </summary>
	<param name="disposing">True if being disposed by the application, False if disposed by the finalizer.</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.Dispose">
	<summary>
 Disposes of the TraceLogger object
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.Finalize">
	<summary>
 Finalizes the TraceLogger object
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.LogIssue(System.String,System.String)">
	<summary>
 Logs an issue, closing any open line and opening a continuation line if necessary after the 
 issue message.
 </summary>
	<param name="Identifier">Identifies the meaning of the the message e.g. name of modeule or method logging the message.</param>
	<param name="Message">Message to log</param>
	<remarks>Use this for reporting issues that you don't want to appear on a line already opened 
 with StartLine</remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.LogMessage(System.String,System.String)">
	<summary>
 Logs a complete message in one call
 </summary>
	<param name="Identifier">Identifies the meaning of the the message e.g. name of modeule or method logging the message.</param>
	<param name="Message">Message to log</param>
	<remarks>
		<para>Use this for straightforward logging requrements. Writes all information in one command.</para>
		<para>Will create a LOGISSUE message in the log if called before a line started by LogStart has been closed with LogFinish. 
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.LogMessage(System.String,System.String,System.Boolean)">
	<summary>
 Logs a complete message in one call, including a hex translation of the message
 </summary>
	<param name="Identifier">Identifies the meaning of the the message e.g. name of modeule or method logging the message.</param>
	<param name="Message">Message to log</param>
	<param name="HexDump">True to append a hex translation of the message at the end of the message</param>
	<remarks>
		<para>Use this for straightforward logging requrements. Writes all information in one command.</para>
		<para>Will create a LOGISSUE message in the log if called before a line started by LogStart has been closed with LogFinish. 
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.LogStart(System.String,System.String)">
	<summary>
 Writes the time and identifier to the log, leaving the line ready for further content through LogContinue and LogFinish
 </summary>
	<param name="Identifier">Identifies the meaning of the the message e.g. name of modeule or method logging the message.</param>
	<param name="Message">Message to log</param>
	<remarks><para>Use this to start a log line where you want to write further information on the line at a later time.</para>
		<para>E.g. You might want to use this to record that an action has started and then append the word OK if all went well.
  You would then end up with just one line to record the whole transaction even though you didn't know that it would be 
 successful when you started. If you just used LogMsg you would have ended up with two log lines, one showing 
 the start of the transaction and the next the outcome.</para>
		<para>Will create a LOGISSUE message in the log if called before a line started by LogStart has been closed with LogFinish. 
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.LogContinue(System.String)">
	<summary>
 Appends further message to a line started by LogStart, does not terminate the line.
 </summary>
	<param name="Message">The additional message to appear in the line</param>
	<remarks>
		<para>This can be called multiple times to build up a complex log line if required.</para>
		<para>Will create a LOGISSUE message in the log if called before a line has been started with LogStart. 
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.LogContinue(System.String,System.Boolean)">
	<summary>
 Appends further message to a line started by LogStart, appends a hex translation of the message to the line, does not terminate the line.
 </summary>
	<param name="Message">The additional message to appear in the line</param>
	<param name="HexDump">True to append a hex translation of the message at the end of the message</param>
	<remarks>
		<para>This can be called multiple times to build up a complex log line if required.</para>
		<para>Will create a LOGISSUE message in the log if called before a line has been started with LogStart. 
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.LogFinish(System.String)">
	<summary>
 Closes a line started by LogStart with the supplied message
 </summary>
	<param name="Message">The final message to terminate the line</param>
	<remarks>
		<para>Can only be called once for each line started by LogStart.</para>
		<para>Will create a LOGISSUE message in the log if called before a line has been started with LogStart.  
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.TraceLogger.LogFinish(System.String,System.Boolean)">
	<summary>
 Closes a line started by LogStart with the supplied message and a hex translation of the message
 </summary>
	<param name="Message">The final message to terminate the line</param>
	<param name="HexDump">True to append a hex translation of the message at the end of the message</param>
	<remarks>
		<para>Will create a LOGISSUE message in the log if called before a line has been started with LogStart.  
 Posible reasons for this are exceptions causing the normal flow of code to be bypassed or logic errors.</para>
	</remarks>
</member><member name="P:ASCOM.HelperNET.TraceLogger.Enabled">
	<summary>
 Enables or disables logging to the file.
 </summary>
	<value>True to enable logging</value>
	<returns>Boolean, current logging status (enabled/disabled).</returns>
	<remarks>If this property is false then calls to LogMsg, LogStart, LogContinue and LogFinish do nothing. If True, 
 supplied messages are written to the log file.</remarks>
</member><member name="T:ASCOM.HelperNET.TraceLogger">
	<summary>
 Creates a log file for a driver or application. Uses a similar file name and internal format to the serial logger. Multiple logs can be created simultaneously if needed.
 </summary>
	<remarks>
		<para>In automatic mode the file will be stored in an ASCOM folder within XP's My Documents folder or equivalent places 
 in other operating systems. Within the ASCOM folder will be a folder named Logs yyyy-mm-dd where yyyy, mm and dd are 
 today's year, month and day numbers. The trace file will appear within the day folder with the name 
 ASCOM.Identifier.hhmm.ssffff where hh, mm, ss and ffff are the current hour, minute, second and fraction of second 
 numbers at the time of file creation.
 </para>
		<para>Within the file the format of each line is hh:mm:ss.fff Identifier Message where hh, mm, ss and fff are the hour, minute, second 
 and fractional second at the time that the message was logged, Identifier is the supplied identifier (usually the subroutine, 
 function, property or method from which the message is sent) and Message is the message to be logged.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.KEPLER.Ephemeris.#ctor">
	<summary>
 Create a new Ephemeris component and initialise it
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.a">
	<summary>
 Semi-major axis (AU)
 </summary>
	<value>Semi-major axis in AU</value>
	<returns>Semi-major axis in AU</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.BodyType">
	<summary>
 The type of solar system body represented by this instance of the ephemeris engine (enum)
 </summary>
	<value>The type of solar system body represented by this instance of the ephemeris engine (enum)</value>
	<returns>0 for major planet, 1 for minot planet and 2 for comet</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.e">
	<summary>
 Orbital eccentricity
 </summary>
	<value>Orbital eccentricity </value>
	<returns>Orbital eccentricity </returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.Epoch">
	<summary>
 Epoch of osculation of the orbital elements (terrestrial Julian date)
 </summary>
	<value>Epoch of osculation of the orbital elements</value>
	<returns>Terrestrial Julian date</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.G">
	<summary>
 Slope parameter for magnitude
 </summary>
	<value>Slope parameter for magnitude</value>
	<returns>Slope parameter for magnitude</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.KEPLER.Ephemeris.GetPositionAndVelocity(System.Double)">
	<summary>
 Compute rectangular (x/y/z) heliocentric J2000 equatorial coordinates of position (AU) and 
 velocity (KM/sec.).
 </summary>
	<param name="tjd">Terrestrial Julian date/time for which position and velocity is to be computed</param>
	<returns>Array of 6 values containing rectangular (x/y/z) heliocentric J2000 equatorial 
 coordinates of position (AU) and velocity (KM/sec.) for the body.</returns>
	<remarks>The TJD parameter is the date/time as a Terrestrial Time Julian date. See below for 
 more info. If you are using ACP, there are functions available to convert between UTC and 
 Terrestrial time, and for estimating the current value of delta-T. See the Overview page for 
 the Kepler.Ephemeris class for more information on time keeping systems.</remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.H">
	<summary>
 Absolute visual magnitude
 </summary>
	<value>Absolute visual magnitude</value>
	<returns>Absolute visual magnitude</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.Incl">
	<summary>
 The J2000.0 inclination (deg.)
 </summary>
	<value>The J2000.0 inclination</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.M">
	<summary>
 Mean anomaly at the epoch
 </summary>
	<value>Mean anomaly at the epoch</value>
	<returns>Mean anomaly at the epoch</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.n">
	<summary>
 Mean daily motion (deg/day)
 </summary>
	<value>Mean daily motion</value>
	<returns>Degrees per day</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.Name">
	<summary>
 The name of the body.
 </summary>
	<value>The name of the body or packed MPC designation</value>
	<returns>The name of the body or packed MPC designation</returns>
	<remarks>If this instance represents an unnumbered minor planet, Ephemeris.Name must be the 
 packed MPC designation. For other types, this is for display only.</remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.Node">
	<summary>
 The J2000.0 longitude of the ascending node (deg.)
 </summary>
	<value>The J2000.0 longitude of the ascending node</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.Number">
	<summary>
 The major or minor planet number
 </summary>
	<value>The major or minor planet number</value>
	<returns>Number or zero if not numbered</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.P">
	<summary>
 Orbital period (years)
 </summary>
	<value>Orbital period</value>
	<returns>Years</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.Peri">
	<summary>
 The J2000.0 argument of perihelion (deg.)
 </summary>
	<value>The J2000.0 argument of perihelion</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.q">
	<summary>
 Perihelion distance (AU)
 </summary>
	<value>Perihelion distance</value>
	<returns>AU</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.Ephemeris.z">
	<summary>
 Reciprocal semi-major axis (1/AU)
 </summary>
	<value>Reciprocal semi-major axis</value>
	<returns>1/AU</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.KEPLER.Ephemeris">
	<summary>
 Kepler Ephemeris Object
 </summary>
	<remarks>
 The Ephemeris object contains an orbit engine which takes the orbital parameters of a solar system 
 body, plus a a terrestrial date/time, and produces the heliocentric equatorial position and 
 velocity vectors of the body in Cartesian coordinates. Orbital parameters are not required for 
 the major planets, Kepler contains an ephemeris generator for these bodies that is within 0.05 
 arc seconds of the JPL DE404 over a wide range of times, Perturbations from major planets are applied 
 to ephemerides for minor planets. 
 <para>The results are passed back as an array containing the two vectors. 
 Note that this is the format expected for the ephemeris generator used by the NOVAS-COM vector 
 astrometry engine. For more information see the description of Ephemeris.GetPositionAndVelocity().</para>
		<para>
			<b>Ephemeris Calculations</b><br/>
 The ephemeris calculations in Kepler draw heavily from the work of 
 Stephen Moshier moshier@world.std.com. kepler is released as a free software package, further 
 extending the work of Mr. Moshier.</para>
		<para>Kepler does not integrate orbits to the current epoch. If you want the accuracy resulting from 
 an integrated orbit, you must integrate separately and supply Kepler with elements of the current 
 epoch. Orbit integration is on the list of things for the next major version.</para>
		<para>Kepler uses polynomial approximations for the major planet ephemerides. The tables 
 of coefficients were derived by a least squares fit of periodic terms to JPL's DE404 ephemerides. 
 The periodic frequencies used were determined by spectral analysis and comparison with VSOP87 and 
 other analytical planetary theories. The least squares fit to DE404 covers the interval from -3000 
 to +3000 for the outer planets, and -1350 to +3000 for the inner planets. For details on the 
 accuracy of the major planet ephemerides, see the Accuracy Tables page. </para>
		<para>
			<b>Date and Time Systems</b><br/><br/>
 For a detailed explanation of astronomical timekeeping systems, see A Time Tutorial on the NASA 
 Goddard Spaceflight Center site, and the USNO Systems of Time site. 
 <br/><br/><i>ActiveX Date values </i><br/>
 These are the Windows standard "date serial" numbers, and are expressed in local time or 
 UTC (see below). The fractional part of these numbers represents time within a day. 
 They are used throughout applications such as Excel, Visual Basic, VBScript, and other 
 ActiveX capable environments. 
 <br/><br/><i>Julian dates </i><br/>
 These are standard Julian "date serial" numbers, and are expressed in UTC time or Terrestrial 
 time. The fractional part of these numbers represents time within a day. The standard ActiveX 
 "Double" precision of 15 digits gives a resolution of about one millisecond in a full Julian date. 
 This is sufficient for the purposes of this program. 
 <br/><br/><i>Hourly Time Values </i><br/>
 These are typically used to represent sidereal time and right ascension. They are simple real 
 numbers in units of hours. 
 <br/><br/><i>UTC Time Scale </i><br/>
 Most of the ASCOM methods and properties that accept date/time values (either Date or Julian) 
 assume that the date/time is in Coordinated Universal Time (UTC). Where necessary, this time 
 is converted internally to other scales. Note that UTC seconds are based on the Cesium atom, 
 not planetary motions. In order to keep UTC in sync with planetary motion, leap seconds are 
 inserted periodically. The error is at most 900 milliseconds.
 <br/><br/><i>UT1 Time Scale </i><br/>
 The UT1 time scale is the planetary equivalent of UTC. It it runs smoothly and varies a bit 
 with time, but it is never more than 900 milliseconds different from UTC. 
 <br/><br/><i>TT Time Scale </i><br/>
 The Terrestrial Dynamical Time (TT) scale is used in solar system orbital calculations. 
 It is based completely on planetary motions; you can think of the solar system as a giant 
 TT clock. It differs from UT1 by an amount called "delta-t", which slowly increases with time, 
 and is about 60 seconds right now (2001). </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Chooser.#ctor">
	<summary>
 Creates a new Chooser object
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Chooser.Dispose(System.Boolean)">
	<summary>
 Does the work of cleaning up objects used by Chooser
 </summary>
	<param name="disposing">True if called by the user, false if called by the system</param>
	<remarks>You can't call this directly, use Dispose with no arguments instead.</remarks>
</member><member name="M:ASCOM.HelperNET.Chooser.Dispose">
	<summary>
 Cleans up and disposes objects used by Chooser
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Chooser.DeviceType">
	<summary>
 The type of device for which the Chooser will select a driver. (String, default = "Telescope")
 </summary>
	<value>The type of device for which the Chooser will select a driver. (String, default = "Telescope") 
</value>
	<returns>The device type that has been set</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.InvalidValueException">Thrown on setting the device type to empty string</exception>
	<remarks>This property changes the "personality" of the Chooser, allowing it to be used to select a driver for any arbitrary 
 ASCOM device type. The default value for this is "Telescope", but it could be "Focuser", "Camera", etc. 
 <para>This property is independent of the Profile object's DeviceType property. Setting Chooser's DeviceType 
 property doesn't set the DeviceType property in Profile, you must set that also when needed.</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Chooser.Choose">
	<summary>
 Select ASCOM driver to use without pre-selecting in the dropdown list
 </summary>
	<returns>Driver ID of chosen driver</returns>
	<remarks>No driver will be pre-selected in the Chooser's list when the chooser window is first opened. 
 </remarks>
</member><member name="M:ASCOM.HelperNET.Chooser.Choose(System.String)">
	<summary>
 Select ASCOM driver to use including pre-selecting one in the dropdown list
 </summary>
	<param name="DriverProgID">Driver to preselect in the chooser dialogue</param>
	<returns>Driver ID of chosen driver</returns>
	<remarks>The supplied driver will be pre-selected in the Chooser's list when the chooser window is first opened.
 </remarks>
</member><member name="T:ASCOM.HelperNET.Chooser">
	<summary>
 The Chooser object provides a way for your application to let your user select the telescope to use.
 </summary>
	<remarks>
		<para>Calling Chooser.Choose() causes a chooser window to appear, with a drop down selector list containing all of the registered Telescope 
 drivers, listed by the driver's friendly/display name. The user sees a list of telescope types and selects one. 
 Before the OK button will light up, however, the user must click the Setup button, causing the selected driver's setup dialog to appear 
 (it calls the driver's Telescope.SetupDialog() method). When the setup dialog is closed, the OK button will light and allow the user 
 to close the Chooser itself.</para>
		<para>The Choose() method returns the DriverID of the selected driver. Choose() allows you to optionally pass the DriverID of a "current" 
 driver (you probably save this in the registry), and the corresponding telescope type is pre-selected in the Chooser's list. In this case, 
 the OK button starts out enabled (lit-up); the assumption is that the pre-selected driver has already been configured. </para>
	</remarks>
</member><member name="E:ASCOM.HelperNET.Timer.Tick">
	<summary>
 Fired once per Interval when timer is Enabled.
 </summary>
	<remarks>To sink this event in Visual Basic, declare the object variable using the WithEvents keyword.</remarks>
</member><member name="M:ASCOM.HelperNET.Timer.Dispose(System.Boolean)">
	<summary>
 Disposes of resources used by the profile object - called by IDisposable interface
 </summary>
	<param name="disposing"></param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Timer.Dispose">
	<summary>
 Disposes of resources used by the profile object
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Timer.Interval">
	<summary>
 The interval between Tick events when the timer is Enabled in milliseconds, (default = 1000)
 </summary>
	<value>The interval between Tick events when the timer is Enabled (milliseconds, default = 1000)</value>
	<returns>The interval between Tick events when the timer is Enabled in milliseconds</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Timer.Enabled">
	<summary>
 Enable the timer tick events
 </summary>
	<value>True means the timer is active and will deliver Tick events every Interval milliseconds.</value>
	<returns>Enabled state of timer tick events</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Timer">
	<summary>
 Provides a repeating timer with associated tick event.
 </summary>
	<remarks>
		<para>The interval resolution is about 20ms.If you need beter than this, you could use the WaitForMilliseconds 
 method to create your own solution.</para>
		<para>You can create multiple instances of this object. When enabled, the Timer delivers Tick events periodically 
 (determined by setting the Interval property).</para>
	</remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.BodyType.MajorPlanet">
	<summary>
 One of the major planets (includes Pluto)
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.BodyType.Moon">
	<summary>
 Luna
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.BodyType.Sun">
	<summary>
 The Sun
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.BodyType.MinorPlanet">
	<summary>
 One of the minor planets
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.BodyType">
	<summary>
 Type of body, Major Planet, Moon, Sun or Minor Planet
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.Body">
	<summary>
 Body number starting with Mercury=1
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.RefractionOption">
	<summary>
 Type of refraction correction
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.TransformationOption">
	<summary>
 Type of transformation: Epoch, Equator and Equinox or all three
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.Origin.SolarSystemBarycentre">
	<summary>
 Centre of mass of the solar system
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.Origin.CentreOfMassOfSun">
	<summary>
 Centre of mass of the Sun
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.Origin">
	<summary>
 Origin to be used: centre of Sun or solar system barycentre
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.NutationDirection">
	<summary>
 Direction of nutation correction
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.BodyStruct.Type">
	<summary>
 Type of body
 </summary>
	<remarks>
 0 = Major planet, Sun, or Moon
 1 = Minor planet
 </remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.BodyStruct.Number">
	<summary>
 body number
 </summary>
	<remarks><pre>
 For 'type' = 0: Mercury = 1, ..., Pluto = 9, Sun = 10, Moon = 11
 For 'type' = 1: minor planet number
 </pre></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.BodyStruct.Name">
	<summary>
 Name of the body (limited to 99 characters)
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.BodyStruct">
	<summary>
 Structure to hold body type, number and name
 </summary>
	<remarks>Designates a celestial object.
 </remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.CatEntryStruct.Catalog">
	<summary>
 3-character catalog designator. 
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.CatEntryStruct.StarName">
	<summary>
 Name of star.
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.CatEntryStruct.StarNumber">
	<summary>
 Integer identifier assigned to star.
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.CatEntryStruct.RA">
	<summary>
 Mean right ascension [hours].
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.CatEntryStruct.Dec">
	<summary>
 Mean declination [degrees].
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.CatEntryStruct.ProMoRA">
	<summary>
 Proper motion in RA [seconds of time per century].
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.CatEntryStruct.ProMoDec">
	<summary>
 Proper motion in declination [arcseconds per century].
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.CatEntryStruct.Parallax">
	<summary>
 Parallax [arcseconds].
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.CatEntryStruct.RadialVelocity">
	<summary>
 Radial velocity [kilometers per second]
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.CatEntryStruct">
	<summary>
 Structure to hold astrometric catalogue data
 </summary>
	<remarks>
 The astrometric catalog data for a star; equator and equinox and units will depend on the catalog. 
 While this structure can be used as a generic container for catalog data, all high-level 
 NOVAS-C functions require J2000.0 catalog data with FK5-type units (shown in square brackets below).
 </remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.SiteInfoStruct.Latitude">
	<summary>
 Geodetic latitude in degrees; north positive.
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.SiteInfoStruct.Longitude">
	<summary>
 Geodetic longitude in degrees; east positive.
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.SiteInfoStruct.Height">
	<summary>
 Height of the observer in meters.
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.SiteInfoStruct.Temperature">
	<summary>
 Temperature (degrees Celsius).
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.SiteInfoStruct.Pressure">
	<summary>
 Atmospheric pressure (millibars)
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.SiteInfoStruct">
	<summary>
 Structure to hold site information
 </summary>
	<remarks>
 Data for the observer's location.  The atmospheric parameters are used only by the refraction 
 function called from function 'equ_to_hor'. Additional parameters can be added to this 
 structure if a more sophisticated refraction model is employed.
 </remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.PosVector.x">
	<summary>
 x co-ordinate
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.PosVector.y">
	<summary>
 y co-ordinate
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.PosVector.z">
	<summary>
 z co-ordinate
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.PosVector">
	<summary>
 Structure to hold a position vector
 </summary>
	<remarks>Object position vector
 </remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.VelVector.x">
	<summary>
 x velocity component 
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.VelVector.y">
	<summary>
 y velocity component
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.VelVector.z">
	<summary>
 z velocity component
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.VelVector">
	<summary>
 Structure to hold a velocity vector
 </summary>
	<remarks>Object velicity vector
 </remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.FundamentalArgsStruct.l">
	<summary>
 l (mean anomaly of the Moon)
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.FundamentalArgsStruct.ldash">
	<summary>
 l' (mean anomaly of the Sun)
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.FundamentalArgsStruct.F">
	<summary>
 F (L - omega; L = mean longitude of the Moon)
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.FundamentalArgsStruct.D">
	<summary>
 D (mean elongation of the Moon from the Sun)
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.NOVAS2.FundamentalArgsStruct.Omega">
	<summary>
 Omega (mean longitude of the Moon's ascending node)
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.FundamentalArgsStruct">
	<summary>
 Structure to hold Sun and Moon fundamental arguments
 </summary>
	<remarks>Fundamental arguments, in radians
</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.AppStar(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,ASCOM.HelperNET.NOVAS2.CatEntryStruct@,System.Double@,System.Double@)">
	<summary>
 Computes the apparent place of a star 
 </summary>
	<param name="tjd">TT (or TDT) Julian date for apparent place.</param>
	<param name="earth">Structure containing the body designation for the earth</param>
	<param name="star">Catalog entry structure containing J2000.0 catalog data with FK5-style units (defined in novas.h).</param>
	<param name="ra">OUT: Apparent right ascension in hours, referred to true equator and equinox of date 'tjd'.</param>
	<param name="dec">OUT: Apparent declination in degrees, referred to true equator and equinox of date 'tjd'.</param>
	<returns><pre>
  0...Everything OK
 &gt;0...Error code from function 'solarsystem'.</pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.TopoStar(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,System.Double,ASCOM.HelperNET.NOVAS2.CatEntryStruct@,ASCOM.HelperNET.NOVAS2.SiteInfoStruct@,System.Double@,System.Double@)">
	<summary>
 Computes the topocentric place of a star
 </summary>
	<param name="tjd"> TT (or TDT) Julian date for topocentric place.</param>
	<param name="earth">Structure containing the body designation for the Earth.</param>
	<param name="deltat">Difference TT (or TDT)-UT1 at 'tjd', in seconds.</param>
	<param name="star">Catalog entry structure containing J2000.0 catalog data with FK5-style units.</param>
	<param name="location">Structure containing observer's location</param>
	<param name="ra">OUT: Topocentric right ascension in hours, referred to true equator and equinox of date 'tjd'.</param>
	<param name="dec">OUT: Topocentric declination in degrees, referred to true equator and equinox of date 'tjd'.</param>
	<returns><pre>
  0...Everything OK.
 &gt;0...Error code from function 'solarsystem'.</pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.AppPlanet(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,ASCOM.HelperNET.NOVAS2.BodyStruct@,System.Double@,System.Double@,System.Double@)">
	<summary>
 Compute the apparent place of a planet or other solar system body.
 </summary>
	<param name="tjd">TT (or TDT) Julian date for apparent place.</param>
	<param name="ss_object">Structure containing the body designation for the solar system body</param>
	<param name="earth">Structure containing the body designation for the Earth</param>
	<param name="ra">OUT: Apparent right ascension in hours, referred to true equator and equinox of date 'tjd'.</param>
	<param name="dec">OUT: Apparent declination in degrees, referred to true equator and equinox of date 'tjd'.</param>
	<param name="dis">OUT: True distance from Earth to planet at 'tjd' in AU.</param>
	<returns><pre>
  0...Everything OK.
 &gt;0...See error description in function 'ephemeris'.
 </pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.TopoPlanet(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,ASCOM.HelperNET.NOVAS2.BodyStruct@,System.Double,ASCOM.HelperNET.NOVAS2.SiteInfoStruct@,System.Double@,System.Double@,System.Double@)">
	<summary>
 Computes the topocentric place of a planet, given the location of the observer.
 </summary>
	<param name="tjd">TT (or TDT) Julian date for topocentric place.</param>
	<param name="ss_object">structure containing the body designation for the solar system body</param>
	<param name="earth">structure containing the body designation for the Earth</param>
	<param name="deltat">Difference TT(or TDT)-UT1 at 'tjd', in seconds.</param>
	<param name="location">structure containing observer's location</param>
	<param name="ra">OUT: Apparent right ascension in hours, referred to true equator and equinox of date 'tjd'.</param>
	<param name="dec">OUT: Apparent declination in degrees, referred to true equator and equinox of date 'tjd'.</param>
	<param name="dis">OUT: True distance from Earth to planet at 'tjd' in AU.</param>
	<returns>
		<pre>
  0...Everything OK.
 &gt;0...See error description in function 'ephemeris'.
 </pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.VirtualStar(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,ASCOM.HelperNET.NOVAS2.CatEntryStruct@,System.Double@,System.Double@)">
	<summary>
  Computes the virtual place of a star
 </summary>
	<param name="tjd">TT (or TDT) Julian date for virtual place.</param>
	<param name="earth">Pointer to structure containing the body designation for the Earth.</param>
	<param name="star">Pointer to catalog entry structure containing J2000.0 catalog data with FK5-style units</param>
	<param name="ra">OUT: Virtual right ascension in hours, referred to mean equator and equinox of J2000.</param>
	<param name="dec">OUT: Virtual declination in degrees, referred to mean equator and equinox of J2000.</param>
	<returns><pre>
  0...Everything OK.
 &gt;0...Error code from function 'solarsystem'
 </pre></returns>
	<remarks>
 Computes the virtual place of a star at date 'tjd', given its 
 mean place, proper motion, parallax, and radial velocity for J2000.0.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.LocalStar(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,System.Double,ASCOM.HelperNET.NOVAS2.CatEntryStruct@,ASCOM.HelperNET.NOVAS2.SiteInfoStruct@,System.Double@,System.Double@)">
	<summary>
  Computes the local place of a star
 </summary>
	<param name="tjd">TT (or TDT) Julian date for local place.</param>
	<param name="earth">Pointer to structure containing the body designation for the Earth</param>
	<param name="deltat">Difference TT(or TDT)-UT1 at 'tjd', in seconds.</param>
	<param name="star">Pointer to catalog entry structure containing J2000.0 catalog data with FK5-style units</param>
	<param name="location">Pointer to structure containing observer's location</param>
	<param name="ra">OUT: Local right ascension in hours, referred to mean equator and equinox of J2000.</param>
	<param name="dec">OUT: Local declination in degrees, referred to mean equator and equinox of J2000.</param>
	<returns><pre>
  0...Everything OK.
 &gt;0...Error code from function 'solarsystem'.
</pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.VirtualPlanet(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,ASCOM.HelperNET.NOVAS2.BodyStruct@,System.Double@,System.Double@,System.Double@)">
	<summary>
 Computes the virtual place of a planet or other solar system body.
 </summary>
	<param name="tjd">TT (or TDT) Julian date for virtual place.</param>
	<param name="ss_object">Pointer to structure containing the body designation for the solar system body</param>
	<param name="earth">Pointer to structure containing the body designation for the Earth</param>
	<param name="ra">OUT: Virtual right ascension in hours, referred to mean equator and equinox of J2000.</param>
	<param name="dec">OUT: Virtual declination in degrees, referred to mean equator and equinox of J2000.</param>
	<param name="dis">OUT: True distance from Earth to planet in AU.</param>
	<returns><pre>
  0...Everything OK.
 &gt;0...See error description in function 'ephemeris'.
 </pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.LocalPlanet(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,ASCOM.HelperNET.NOVAS2.BodyStruct@,System.Double,ASCOM.HelperNET.NOVAS2.SiteInfoStruct@,System.Double@,System.Double@,System.Double@)">
	<summary>
  Computes the local place of a planet or other solar system body, given the location of the observer.
 </summary>
	<param name="tjd">TT (or TDT) Julian date for local place.</param>
	<param name="ss_object"> Pointer to structure containing the body designation for the solar system body</param>
	<param name="earth"> Pointer to structure containing the body designation for the Earth</param>
	<param name="deltat">Difference TT(or TDT)-UT1 at 'tjd', in seconds.</param>
	<param name="location"> Pointer to structure containing observer's location</param>
	<param name="ra">OUT: Local right ascension in hours, referred to mean equator and equinox of J2000.</param>
	<param name="dec">OUT: Local declination in degrees, referred to mean equator and equinox of J2000.</param>
	<param name="dis">OUT: True distance from Earth to planet in AU.</param>
	<returns><pre>
  0...Everything OK.
 &gt;0...See error description in function 'ephemeris'.
 </pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.AstroStar(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,ASCOM.HelperNET.NOVAS2.CatEntryStruct@,System.Double@,System.Double@)">
	<summary>
 Computes the astrometric place of a star
 </summary>
	<param name="tjd">  TT (or TDT) Julian date for astrometric place.</param>
	<param name="earth"> Pointer to structure containing the body designation for the Earth</param>
	<param name="star"> Pointer to catalog entry structure containing J2000.0 catalog data with FK5-style units</param>
	<param name="ra">OUT:  Astrometric right ascension in hours, referred to mean equator and equinox of J2000.</param>
	<param name="dec">OUT:  Astrometric declination in degrees, referred to mean equator and equinox of J2000.</param>
	<returns><pre>
  0...Everything OK.
 &gt;0...Error code from function 'solarsystem'.
 </pre></returns>
	<remarks>     Computes the astrometric place of a star, given its mean place, proper motion, parallax, and radial velocity for J2000.0.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.AstroPlanet(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,ASCOM.HelperNET.NOVAS2.BodyStruct@,System.Double@,System.Double@,System.Double@)">
	<summary>
 Computes the astrometric place of a planet or other solar system body.
 </summary>
	<param name="tjd">TT (or TDT) Julian date for calculation.</param>
	<param name="ss_object">Pointer to structure containing the body designation for the solar system body</param>
	<param name="earth">Pointer to structure containing the body designation for the Earth</param>
	<param name="ra">OUT: Astrometric right ascension in hours, referred to mean equator and equinox of J2000.</param>
	<param name="dec">OUT:  Astrometric declination in degrees, referred to mean equator and equinox of J2000.</param>
	<param name="dis">OUT: True distance from Earth to planet in AU.</param>
	<returns><pre>
  0...Everything OK.
 &gt;0...See error description in function 'ephemeris'.</pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Equ2Hor(System.Double,System.Double,System.Double,System.Double,ASCOM.HelperNET.NOVAS2.SiteInfoStruct@,System.Double,System.Double,ASCOM.HelperNET.NOVAS2.RefractionOption,System.Double@,System.Double@,System.Double@,System.Double@)">
	<summary>
 Transform apparent equatorial coordinates to horizon coordinates
 </summary>
	<param name="tjd">TT (or TDT) Julian date.</param>
	<param name="deltat">Difference TT (or TDT)-UT1 at 'tjd', in seconds.</param>
	<param name="x">Conventionally-defined x coordinate of celestial ephemeris  pole with respect to IERS reference pole, in arcseconds. </param>
	<param name="y">Conventionally-defined y coordinate of celestial ephemeris  pole with respect to IERS reference pole, in arcseconds.</param>
	<param name="location">structure containing observer's location</param>
	<param name="ra"> Topocentric right ascension of object of interest, in hours, referred to true equator and equinox of date.</param>
	<param name="dec">Topocentric declination of object of interest, in degrees,  referred to true equator and equinox of date.</param>
	<param name="ref_option">Refraction option</param>
	<param name="zd">OUT: Topocentric zenith distance in degrees, affected by  refraction if 'ref_option' is non-zero.</param>
	<param name="az">OUT: Topocentric azimuth (measured east from north) in degrees.</param>
	<param name="rar">OUT: Topocentric right ascension of object of interest, in hours, referred to true equator and equinox of date, affected by refraction if 'ref_option' is non-zero.</param>
	<param name="decr">OUT: Topocentric declination of object of interest, in degrees, referred to true equator and equinox of date, affected by  refraction if 'ref_option' is non-zero.</param>
	<remarks>This function transforms apparent equatorial coordinates (right 
 ascension and declination) to horizon coordinates (zenith 
 distance and azimuth).  It uses a method that properly accounts 
 for polar motion, which is significant at the sub-arcsecond 
 level.  This function can also adjust coordinates for atmospheric 
 refraction.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.TransformHip(ASCOM.HelperNET.NOVAS2.CatEntryStruct@,ASCOM.HelperNET.NOVAS2.CatEntryStruct@)">
	<summary>
  To convert Hipparcos data at epoch J1991.25 to epoch J2000.0 and FK5-style units.
 </summary>
	<param name="hipparcos">An entry from the Hipparcos catalog, at epoch J1991.25, with all members having Hipparcos catalog units.  See Note 1 below</param>
	<param name="fk5">The transformed input entry, at epoch J2000.0, with all  members having FK5 catalog units.  See Note 2 below</param>
	<remarks>To be used only for Hipparcos or Tycho stars  with linear space motion.
 <para><pre>
 1. Hipparcos epoch and units:
    Epoch: J1991.25
    Right ascension (RA): degrees
    Declination (Dec): degrees
    Proper motion in RA * cos (Dec): milliarcseconds per year
    Proper motion in Dec: milliarcseconds per year
    Parallax: milliarcseconds
    Radial velocity: kilometers per second (not in catalog)
 
 2. FK5 epoch and units:
    Epoch: J2000.0
    Right ascension: hours
    Declination: degrees
    Proper motion in RA: seconds of time per Julian century
    Proper motion in Dec: arcseconds per Julian century
    Parallax: arcseconds
    Radial velocity: kilometers per second
</pre></para></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.TransformCat(ASCOM.HelperNET.NOVAS2.TransformationOption,System.Double,ASCOM.HelperNET.NOVAS2.CatEntryStruct@,System.Double,System.Byte[]@,ASCOM.HelperNET.NOVAS2.CatEntryStruct@)">
	<summary>
 To transform a star's catalog quantities for a change of epoch and/or equator and equinox.
 </summary>
	<param name="option">Transformation option<pre>
    = 1 ... change epoch; same equator and equinox
    = 2 ... change equator and equinox; same epoch
    = 3 ... change equator and equinox and epoch
</pre></param>
	<param name="date_incat">TT Julian date, or year, of input catalog data.</param>
	<param name="incat">An entry from the input catalog</param>
	<param name="date_newcat">TT Julian date, or year, of transformed catalog data.</param>
	<param name="newcat_id">Three-character abbreviated name of the transformed catalog.</param>
	<param name="newcat">OUT: The transformed catalog entry</param>
	<remarks><pre>
 1. 'date_incat' and 'date_newcat' may be specified either as a 
    Julian date (e.g., 2433282.5) or a Julian year and fraction 
    (e.g., 1950.0).  Values less than 10000 are assumed to be years.
 
 2. option = 1 updates the star's data to account for the star's space motion between 
               the first and second dates, within a fixed reference frame.
    option = 2 applies a rotation of the reference frame corresponding to precession 
               between the first and second dates, but leaves the star fixed in space.
    option = 3 provides both transformations.
 
 3. This subroutine cannot be properly used to bring data from 
    old (pre-FK5) star catalogs into the modern system, because old 
    catalogs were compiled using a set of constants that are 
    incompatible with the IAU (1976) system.
 
 4. This function uses TDB Julian dates internally, but no 
    distinction between TDB and TT is necessary.
</pre></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.SiderealTime(System.Double,System.Double,System.Double,System.Double@)">
	<summary>
  Computes the Greenwich apparent sidereal time, at Julian date 'jd_high' + 'jd_low'.
 </summary>
	<param name="jd_high">Julian date, integral part.</param>
	<param name="jd_low">Julian date, fractional part.</param>
	<param name="ee"> Equation of the equinoxes (seconds of time). [Note: this  quantity is computed by function 'earthtilt'.]</param>
	<param name="gst">Greenwich apparent sidereal time, in hours.</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Precession(System.Double,System.Double[],System.Double,System.Double[]@)">
	<summary>
 Precesses equatorial rectangular coordinates from one epoch to another.
 </summary>
	<param name="tjd1">TDB Julian date of first epoch.</param>
	<param name="pos">Position vector, geocentric equatorial rectangular coordinates, referred to mean equator and equinox of first epoch.</param>
	<param name="tjd2">TDB Julian date of second epoch.</param>
	<param name="pos2">OUT: Position vector, geocentric equatorial rectangular coordinates, referred to mean equator and equinox of second epoch.</param>
	<remarks>The coordinates are referred to the mean equator and equinox of the two respective epochs.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.EarthTilt(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
	<summary>
  Computes quantities related to the orientation of the Earth's rotation axis at Julian date 'tjd'.
 </summary>
	<param name="tjd">TDB Julian date of the desired time</param>
	<param name="mobl">OUT:  Mean obliquity of the ecliptic in degrees at 'tjd'.</param>
	<param name="tobl">OUT: True obliquity of the ecliptic in degrees at 'tjd'.</param>
	<param name="eq">OUT: Equation of the equinoxes in seconds of time at 'tjd'.</param>
	<param name="dpsi">OUT: Nutation in longitude in arcseconds at 'tjd'.</param>
	<param name="deps">OUT: Nutation in obliquity in arcseconds at 'tjd'.</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.CelPole(System.Double,System.Double)">
	<summary>
 This function allows for the specification of celestial pole offsets for high-precision applications.  
 </summary>
	<param name="del_dpsi">Value of offset in delta psi (dpsi) in arcseconds.</param>
	<param name="del_deps">Value of offset in delta epsilon (deps) in arcseconds.</param>
	<remarks>These are added to the nutation parameters delta psi and delta epsilon.
 <para>1. This function sets the values of global variables 'PSI_COR'and 'EPS_COR' declared at the top of file 'novas.c'.  These global variables are used only in NOVAS function 'earthtilt'.</para>
		<para>2. This function, if used, should be called before any other NOVAS functions for a given date.  Values of the pole offsets specified via a call to this function will be used until explicitly changed.</para>
		<para>3. Daily values of the offsets are published, for example, in IERS Bulletins A and B.</para>
		<para>4. This function is the "C" version of Fortran NOVAS routine "celpol".</para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Ephemeris(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,ASCOM.HelperNET.NOVAS2.Origin,System.Double[]@,System.Double[]@)">
	<summary>
 Retrieves the position and velocity of a body from a fundamental ephemeris.
 </summary>
	<param name="tjd">TDB Julian date.</param>
	<param name="cel_obj">Structure containing the designation of the body of interest</param>
	<param name="origin">Origin point (solar system barycentre or centre of mass of the Sun</param>
	<param name="pos">OUT: Position vector of 'body' at tjd; equatorial rectangular coordinates in AU referred to the mean equator and equinox of J2000.0.</param>
	<param name="vel">OUT: Velocity vector of 'body' at tjd; equatorial rectangular system referred to the mean equator and equinox of J2000.0, in AU/Day.</param>
	<returns><pre>
 0    ... Everything OK.
 1    ... Invalid value of 'origin'.
 2    ... Invalid value of 'type' in 'cel_obj'.
 3    ... Unable to allocate memory.
 10+n ... where n is the error code from 'solarsystem'.
 20+n ... where n is the error code from 'readeph'.</pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.SolarSystem(System.Double,ASCOM.HelperNET.NOVAS2.Body,ASCOM.HelperNET.NOVAS2.Origin,System.Double[]@,System.Double[]@)">
	<summary>
 Provides the position and velocity of the Earth
 </summary>
	<param name="tjd">TDB Julian date.</param>
	<param name="body">Body identification number.
 <pre>
 Set 'body' = 0 or 'body' = 1 or 'body' = 10 for the Sun.
 Set 'body' = 2 or 'body' = 3 for the Earth.
</pre></param>
	<param name="origin">Required origin: solar system barycenter or center of mass of the Sun</param>
	<param name="pos">OUT: Position vector of 'body' at 'tjd'; equatorial rectangular coordinates in AU referred to the mean equator and equinox of J2000.0.</param>
	<param name="vel">OUT: Velocity vector of 'body' at 'tjd'; equatorial rectangular system referred to the mean equator and equinox of J2000.0, in AU/Day.</param>
	<returns><pre>
 0...Everything OK.
 1...Input Julian date ('tjd') out of range.
 2...Invalid value of 'body'.
</pre></returns>
	<remarks> Provides the position and velocity of the Earth at epoch 'tjd' by evaluating a closed-form theory without reference to an  external file.  This function can also provide the position and velocity of the Sun.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Vector2RADec(System.Double[],System.Double@,System.Double@)">
	<summary>
 Converts an vector in equatorial rectangular coordinates to equatorial spherical coordinates.
 </summary>
	<param name="pos">Position vector, equatorial rectangular coordinates.</param>
	<param name="ra">OUT: Right ascension in hours.</param>
	<param name="dec">OUT: Declination in degrees.</param>
	<returns><pre>
 0...Everything OK.
 1...All vector components are zero; 'ra' and 'dec' are indeterminate.
 2...Both vec[0] and vec[1] are zero, but vec[2] is nonzero; 'ra' is indeterminate.</pre>
	</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.StarVectors(ASCOM.HelperNET.NOVAS2.CatEntryStruct,System.Double[]@,System.Double[]@)">
	<summary>
 Converts angular quanities for stars to vectors.
 </summary>
	<param name="star">Catalog entry structure containing J2000.0 catalog data with FK5-style units </param>
	<param name="pos">Position vector, equatorial rectangular coordinates, components in AU.</param>
	<param name="vel">Velocity vector, equatorial rectangular coordinates, components in AU/Day.</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.RADec2Vector(System.Double,System.Double,System.Double,System.Double[]@)">
	<summary>
 Converts equatorial spherical coordinates to a vector (equatorial rectangular coordinates).
 </summary>
	<param name="ra">Right ascension (hours).</param>
	<param name="dec">Declination (degrees).</param>
	<param name="dist">Distance</param>
	<param name="pos">Position vector, equatorial rectangular coordinates (AU).</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.GetEarth(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,System.Double@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)">
	<summary>
 Obtains the barycentric and heliocentric positions and velocities of the Earth from the solar system ephemeris.
 </summary>
	<param name="tjd">TT (or TDT) Julian date.</param>
	<param name="earth">Structure containing the body designation for the Earth.</param>
	<param name="tdb">OUT: TDB Julian date corresponding to 'tjd'.</param>
	<param name="bary_earthp">OUT: Barycentric position vector of Earth at 'tjd'; equatorial rectangular coordinates in AU referred to the mean equator and equinox of J2000.0.</param>
	<param name="bary_earthv">OUT: Barycentric velocity vector of Earth at 'tjd'; equatorial rectangular system referred to the mean equator and equinox  of J2000.0, in AU/Day.</param>
	<param name="helio_earthp">OUT: Heliocentric position vector of Earth at 'tjd'; equatorial rectangular coordinates in AU referred to the mean equator and equinox of J2000.0.</param>
	<param name="helio_earthv">OUT: Heliocentric velocity vector of Earth at 'tjd'; equatorial rectangular system referred to the mean equator and equinox of J2000.0, in AU/Day.</param>
	<returns><pre>
  0...Everything OK.
 &gt;0...Error code from function 'solarsystem'.</pre>
	</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.MeanStar(System.Double,ASCOM.HelperNET.NOVAS2.BodyStruct@,System.Double,System.Double,System.Double@,System.Double@)">
	<summary>
 Computes the mean place of a star for J2000.0
 </summary>
	<param name="tjd">TT (or TDT) Julian date of apparent place.</param>
	<param name="earth">Pointer to structure containing the body designation for the Earth</param>
	<param name="ra">Apparent right ascension in hours, referred to true equator and equinox of date 'tjd'.</param>
	<param name="dec"> Apparent declination in degrees, referred to true equator and equinox of date 'tjd'.</param>
	<param name="mra">OUT: Mean right ascension J2000.0 in hours.</param>
	<param name="mdec">OUT: Mean declination J2000.0 in degrees.</param>
	<returns><pre>
   0...Everything OK.
   1...Iterative process did not converge after 20 iterations.
 &gt;10...Error from function 'app_star'.</pre></returns>
	<remarks>Computes the mean place of a star for J2000.0, given its apparent 
 place at date 'tjd'.  Proper motion, parallax and radial velocity 
 are assumed to be zero.
</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Pnsw(System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[]@)">
	<summary>
 Transforms a vector from an Earth-fixed geographic system to a space-fixed system
 </summary>
	<param name="tjd">TT (or TDT) Julian date</param>
	<param name="gast">Greenwich apparent sidereal time, in hours.</param>
	<param name="x"> Conventionally-defined X coordinate of rotational pole with respect to CIO, in arcseconds.</param>
	<param name="y">Conventionally-defined Y coordinate of rotational pole with respect to CIO, in arcseconds.</param>
	<param name="vece"> Vector in geocentric rectangular Earth-fixed system, referred to geographic equator and Greenwich meridian.</param>
	<param name="vecs">OUT: Vector in geocentric rectangular space-fixed system, referred to mean equator and equinox of J2000.0.</param>
	<remarks>Transforms a vector from an Earth-fixed geographic system to a space-fixed system based on mean equator and equinox of J2000.0; applies rotations for wobble, spin, nutation, and precession.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Spin(System.Double,System.Double[],System.Double[]@)">
	<summary>
 Transforms geocentric rectangular coordinates from rotating system to non-rotating system
 </summary>
	<param name="st">Local apparent sidereal time at reference meridian, in hours.</param>
	<param name="pos1">Vector in geocentric rectangular rotating system, referred to rotational equator and orthogonal reference meridian.</param>
	<param name="pos2">OUT: Vector in geocentric rectangular non-rotating system, referred to true equator and equinox of date.</param>
	<remarks>Transforms geocentric rectangular coordinates from rotating system based on rotational equator and orthogonal reference meridian to  non-rotating system based on true equator and equinox of date.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Wobble(System.Double,System.Double,System.Double[],System.Double[]@)">
	<summary>
 Corrects Earth-fixed geocentric rectangular coordinates for polar motion.
 </summary>
	<param name="x"> Conventionally-defined X coordinate of rotational pole with respect to CIO, in arcseconds.</param>
	<param name="y">Conventionally-defined Y coordinate of rotational pole with respect to CIO, in arcseconds.</param>
	<param name="pos1">Vector in geocentric rectangular Earth-fixed system, referred to geographic equator and Greenwich meridian.</param>
	<param name="pos2">OUT: Vector in geocentric rectangular rotating system, referred to rotational equator and orthogonal Greenwich meridian</param>
	<remarks>Corrects Earth-fixed geocentric rectangular coordinates for polar motion.  Transforms a vector from Earth-fixed geographic system to rotating system based on rotational equator and orthogonal Greenwich meridian through axis of rotation.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Terra(ASCOM.HelperNET.NOVAS2.SiteInfoStruct@,System.Double,System.Double[]@,System.Double[]@)">
	<summary>
 Computes the position and velocity vectors of a terrestrial observer with respect to the center of the Earth.
 </summary>
	<param name="locale">Longitude, latitude and height of the observer (in a SiteInfoStruct)</param>
	<param name="st">Local apparent sidereal time at reference meridian in hours.</param>
	<param name="pos"> Position vector of observer with respect to center of Earth, equatorial rectangular coordinates, referred to true equator and equinox of date, components in AU.</param>
	<param name="vel"> Velocity vector of observer with respect to center of Earth, equatorial rectangular coordinates, referred to true equator and equinox of date, components in AU/Day.</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.ProperMotion(System.Double,System.Double[],System.Double[],System.Double,System.Double[]@)">
	<summary>
 Applies proper motion, including foreshortening effects, to a star's position.
 </summary>
	<param name="tjd1">TDB Julian date of first epoch.</param>
	<param name="pos">Position vector at first epoch.</param>
	<param name="vel">Velocity vector at first epoch.</param>
	<param name="tjd2">TDB Julian date of second epoch.</param>
	<param name="pos2">OUT: Position vector at second epoch.</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.BaryToGeo(System.Double[],System.Double[],System.Double[]@,System.Double@)">
	<summary>
 Moves the origin of coordinates from the barycenter of the solar system to the center of mass of the Earth
 </summary>
	<param name="pos">Position vector, referred to origin at solar system barycenter, components in AU.</param>
	<param name="earthvector">Position vector of center of mass of the Earth, referred to origin at solar system barycenter, components in AU.</param>
	<param name="pos2">OUT: Position vector, referred to origin at center of mass of the Earth, components in AU.</param>
	<param name="lighttime">OUT: Light time from body to Earth in days.</param>
	<remarks>This corrects for parallax.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.SunField(System.Double[],System.Double[],System.Double[]@)">
	<summary>
 Corrects position vector for the deflection of light in the gravitational field of the Sun. 
 </summary>
	<param name="pos">Position vector, referred to origin at center of mass of the Earth, components in AU.</param>
	<param name="earthvector">Position vector of center of mass of the Earth, referred to origin at center of mass of the Sun, components in AU.</param>
	<param name="pos2">Position vector, referred to origin at center of mass of the Earth, corrected for gravitational deflection, components in AU.</param>
	<returns>0...Everything OK.</returns>
	<remarks>This function is valid for bodies within the solar system as well as for stars.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Aberration(System.Double[],System.Double[],System.Double,System.Double[]@)">
	<summary>
 Corrects position vector for aberration of light.
 </summary>
	<param name="pos">Position vector, referred to origin at center of mass of the Earth, components in AU.</param>
	<param name="vel">Velocity vector of center of mass of the Earth, referred to origin at solar system barycenter, components in AU/day.</param>
	<param name="lighttime">Light time from body to Earth in days.</param>
	<param name="pos2">OUT: Position vector, referred to origin at center of mass of the Earth, corrected for aberration, components in AU</param>
	<returns>0...Everything OK.</returns>
	<remarks>Algorithm includes relativistic terms.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Nutate(System.Double,ASCOM.HelperNET.NOVAS2.NutationDirection,System.Double[],System.Double[]@)">
	<summary>
 Nutates equatorial rectangular coordinates from mean equator and equinox of epoch to true equator and equinox of epoch.
 </summary>
	<param name="tjd">TDB julian date of epoch.</param>
	<param name="fn">Flag determining 'direction' of transformation;<pre>
    fn  = 0 transformation applied, mean to true.
    fn != 0 inverse transformation applied, true to mean.</pre></param>
	<param name="pos">Position vector, geocentric equatorial rectangular coordinates, referred to mean equator and equinox of epoch.</param>
	<param name="pos2">OUT: Position vector, geocentric equatorial rectangular coordinates, referred to true equator and equinox of epoch.</param>
	<returns>0...Everything OK.</returns>
	<remarks>Inverse transformation may be applied by setting flag 'fn'.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.NutationAngles(System.Double,System.Double@,System.Double@)">
	<summary>
 Provides fast evaluation of the nutation components according to the 1980 IAU Theory of Nutation.
 </summary>
	<param name="tdbtime">TDB time in Julian centuries since J2000.0</param>
	<param name="longnutation">OUT: Nutation in longitude in arcseconds.</param>
	<param name="obliqnutation">OUT: Nutation in obliquity in arcseconds.</param>
	<returns>0...Everything OK.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.FundArgs(System.Double,System.Double[]@)">
	<summary>
 To compute the fundamental arguments.
 </summary>
	<param name="t">TDB time in Julian centuries since J2000.0</param>
	<param name="a">OUT: FundamentalArgsStruct containing: <pre>
   a[0] = l (mean anomaly of the Moon)
   a[1] = l' (mean anomaly of the Sun)
   a[2] = F (L - omega; L = mean longitude of the Moon)
   a[3] = D (mean elongation of the Moon from the Sun)
   a[4] = omega (mean longitude of the Moon's ascending node)</pre></param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Tdb2Tdt(System.Double,System.Double@,System.Double@)">
	<summary>
 Converts TDB to TT or TDT
 </summary>
	<param name="tdb">TDB Julian date.</param>
	<param name="tdtjd">OUT: TT (or TDT) Julian date.</param>
	<param name="secdiff">OUT: Difference tdbjd-tdtjd, in seconds.</param>
	<remarks>Computes the terrestrial time (TT) or terrestrial dynamical time (TDT) Julian date corresponding to a barycentric dynamical time (TDB) Julian date.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.SetBody(ASCOM.HelperNET.NOVAS2.BodyType,ASCOM.HelperNET.NOVAS2.Body,System.String,ASCOM.HelperNET.NOVAS2.BodyStruct@)">
	<summary>
 Sets up a structure of type 'body' - defining a celestial object- based on the input parameters.
 </summary>
	<param name="type">Type of body</param>
	<param name="number">Body number</param>
	<param name="name">Name of the body.</param>
	<param name="cel_obj">OUT: Structure containg the body definition </param>
	<returns><pre>
 = 0 ... everything OK
 = 1 ... invalid value of 'type'
 = 2 ... 'number' out of range
</pre></returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.MakeCatEntry(System.String,System.String,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,ASCOM.HelperNET.NOVAS2.CatEntryStruct@)">
	<summary>
 To create a structure of type 'cat_entry' containing catalog data for a star or "star-like" object.
 </summary>
	<param name="catalog">Three-character catalog identifier (e.g. HIP = Hipparcos, FK5 = FK5).  This identifier also specifies the reference system and units of the data; i.e. they are the same as the specified catalog.</param>
	<param name="star_name">Object name (50 characters maximum).</param>
	<param name="star_num">Object number in the catalog.</param>
	<param name="ra">Right ascension of the object.</param>
	<param name="dec">Declination of the object.</param>
	<param name="pm_ra">Proper motion in right ascension.</param>
	<param name="pm_dec">Proper motion in declination.</param>
	<param name="parallax">Parallax.</param>
	<param name="rad_vel">Radial velocity.</param>
	<param name="star">OUT: Structure containing the input data</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.Refract(ASCOM.HelperNET.NOVAS2.SiteInfoStruct@,System.Int16,System.Double)">
	<summary>
 Computes atmospheric refraction in zenith distance.
 </summary>
	<param name="location">structure containing observer's location</param>
	<param name="ref_option">refraction option</param>
	<param name="zd_obs">bserved zenith distance, in degrees.</param>
	<returns>Atmospheric refraction, in degrees.</returns>
	<remarks>This version computes approximate refraction for optical wavelengths.</remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.JulianDate(System.Int16,System.Int16,System.Int16,System.Double)">
	<summary>
 This function will compute the Julian date for a given calendar date (year, month, day, hour).
 </summary>
	<param name="year">Year number</param>
	<param name="month">Month number.</param>
	<param name="day">Day number</param>
	<param name="hour">Time in hours</param>
	<returns>OUT: Julian date.</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.CalDate(System.Double,System.Int16@,System.Int16@,System.Int16@,System.Double@)">
	<summary>
 Compute a date on the Gregorian calendar given the Julian date.
 </summary>
	<param name="tjd">Julian date.</param>
	<param name="year">OUT: Year number</param>
	<param name="month">OUT: Month number.</param>
	<param name="day">OUT: Day number</param>
	<param name="hour">OUT: Time in hours</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.NOVAS2.NOVAS.SunEph(System.Double,System.Double@,System.Double@,System.Double@)">
	<summary>
 Compute equatorial spherical coordinates of Sun referred to the mean equator and equinox of date.
 </summary>
	<param name="jd">Julian date on TDT or ET time scale.</param>
	<param name="ra">OUT: Right ascension referred to mean equator and equinox of date (hours).</param>
	<param name="dec">OUT: Declination referred to mean equator and equinox of date  (degrees).</param>
	<param name="dis">OUT: Geocentric distance (AU).</param>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.NOVAS2.NOVAS">
	<summary>
 Class presenting the contents of the NOVAS 2 library. 
 NOVAS was developed by the Astronomical Applications department of the United States Naval 
 Observatory. The C language version of NOVAS was developed by John Bangert at USNO/AA.
 </summary>
	<remarks>
 The NOVAS class is a STATIC class. This means that you do not have to create an instance of the 
 class in order to access its members. Instead you reference them directly from the class. So, this works:
 <code>rc = ASCOM.HelperNET.NOVAS2.app_star(tjd,earth,star,ra,dec)</code> 
 while this does not work: 
 <code>
 Dim Nov as New ASCOM.HelperNET.NOVAS2
 rc = Nov.app_star(tjd,earth,star,ra,dec)
 </code>
		<para>Method names are identical to those used in NOVAS2, as are almost all paramaters. There are a few 
 changes that introduce some new structures but these should be self explanatory. One significant difference 
 is that position and velocity vectors are returned as structures rather than double arrays. This was done 
 to make type checking more effective.</para>
		<para>Testing of the high level supervisory functions has been carried out using real-time star data from
 the USNO web site. Values provided by this NOVAS2 implementation agree on average to about 50 milli 
 arc-seconds with current USNO web site values.</para>
		<para>This class is implemented using a thin layer of .NET code that calls functions in 
 either a 32 or 64 bit compiled version of the unmodified C code from ther USNO web site. The .NET code
 does not carry out calculations itself, it simply handles any interface presentation differences
 and calls the relevant 32 or 64bit code according to its environment.</para>
	</remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.BodyType.kepComet">
	<summary>
 Comet
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.BodyType.kepMajorPlanet">
	<summary>
 Major planet
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.BodyType.kepMinorPlanet">
	<summary>
 Minor planet
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.KEPLER.BodyType">
	<summary>
 TYpe of body for which ephemeris is required
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.PlanetNumber.kepMercury">
	<summary>
 Mercury
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.PlanetNumber.kepVenus">
	<summary>
 Venus
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.PlanetNumber.kepEarth">
	<summary>
 Earth
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.PlanetNumber.kepMars">
	<summary>
 Mars
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.PlanetNumber.kepjupiter">
	<summary>
 Jupiter
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.PlanetNumber.kepSaturn">
	<summary>
 Saturn
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.PlanetNumber.kepUranus">
	<summary>
 Uranus
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.PlanetNumber.kepNeptune">
	<summary>
 Neptune
 </summary>
	<remarks></remarks>
</member><member name="F:ASCOM.HelperNET.KEPLER.PlanetNumber.kepPluto">
	<summary>
 Pluto
 </summary>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.KEPLER.PlanetNumber">
	<summary>
 Major planet number
 </summary>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.KEPLER.IEphemeris.GetPositionAndVelocity(System.Double)">
	<summary>
 Compute rectangular (x/y/z) heliocentric J2000 equatorial coordinates of position (AU) and 
 velocity (KM/sec.).
 </summary>
	<param name="tjd">Terrestrial Julian date/time for which position and velocity is to be computed</param>
	<returns>Array of 6 values containing rectangular (x/y/z) heliocentric J2000 equatorial 
 coordinates of position (AU) and velocity (KM/sec.) for the body.</returns>
	<remarks>The TJD parameter is the date/time as a Terrestrial Time Julian date. See below for 
 more info. If you are using ACP, there are functions available to convert between UTC and 
 Terrestrial time, and for estimating the current value of delta-T. See the Overview page for 
 the Kepler.Ephemeris class for more information on time keeping systems.</remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.a">
	<summary>
 Semi-major axis (AU)
 </summary>
	<value>Semi-major axis in AU</value>
	<returns>Semi-major axis in AU</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.BodyType">
	<summary>
 The type of solar system body represented by this instance of the ephemeris engine (enum)
 </summary>
	<value>The type of solar system body represented by this instance of the ephemeris engine (enum)</value>
	<returns>0 for major planet, 1 for minot planet and 2 for comet</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.e">
	<summary>
 Orbital eccentricity
 </summary>
	<value>Orbital eccentricity </value>
	<returns>Orbital eccentricity </returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.Epoch">
	<summary>
 Epoch of osculation of the orbital elements (terrestrial Julian date)
 </summary>
	<value>Epoch of osculation of the orbital elements</value>
	<returns>Terrestrial Julian date</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.G">
	<summary>
 Slope parameter for magnitude
 </summary>
	<value>Slope parameter for magnitude</value>
	<returns>Slope parameter for magnitude</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.H">
	<summary>
 Absolute visual magnitude
 </summary>
	<value>Absolute visual magnitude</value>
	<returns>Absolute visual magnitude</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.Incl">
	<summary>
 The J2000.0 inclination (deg.)
 </summary>
	<value>The J2000.0 inclination</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.M">
	<summary>
 Mean anomaly at the epoch
 </summary>
	<value>Mean anomaly at the epoch</value>
	<returns>Mean anomaly at the epoch</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.n">
	<summary>
 Mean daily motion (deg/day)
 </summary>
	<value>Mean daily motion</value>
	<returns>Degrees per day</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.Name">
	<summary>
 The name of the body.
 </summary>
	<value>The name of the body or packed MPC designation</value>
	<returns>The name of the body or packed MPC designation</returns>
	<remarks>If this instance represents an unnumbered minor planet, Ephemeris.Name must be the 
 packed MPC designation. For other types, this is for display only.</remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.Node">
	<summary>
 The J2000.0 longitude of the ascending node (deg.)
 </summary>
	<value>The J2000.0 longitude of the ascending node</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.Number">
	<summary>
 The major or minor planet number
 </summary>
	<value>The major or minor planet number</value>
	<returns>Number or zero if not numbered</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.P">
	<summary>
 Orbital period (years)
 </summary>
	<value>Orbital period</value>
	<returns>Years</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.Peri">
	<summary>
 The J2000.0 argument of perihelion (deg.)
 </summary>
	<value>The J2000.0 argument of perihelion</value>
	<returns>Degrees</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.q">
	<summary>
 Perihelion distance (AU)
 </summary>
	<value>Perihelion distance</value>
	<returns>AU</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.KEPLER.IEphemeris.z">
	<summary>
 Reciprocal semi-major axis (1/AU)
 </summary>
	<value>Reciprocal semi-major axis</value>
	<returns>1/AU</returns>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.KEPLER.IEphemeris">
	<summary>
 Kepler Ephemeris Interface
 </summary>
	<remarks>
 The Ephemeris object contains an orbit engine which takes the orbital parameters of a solar system 
 body, plus a a terrestrial date/time, and produces the heliocentric equatorial position and 
 velocity vectors of the body in Cartesian coordinates. Orbital parameters are not required for 
 the major planets, Kepler contains an ephemeris generator for these bodies that is within 0.05 
 arc seconds of the JPL DE404 over a wide range of times, Perturbations from major planets are applied 
 to ephemerides for minor planets. 
 <para>The results are passed back as an array containing the two vectors. 
 Note that this is the format expected for the ephemeris generator used by the NOVAS-COM vector 
 astrometry engine. For more information see the description of Ephemeris.GetPositionAndVelocity().</para>
		<para>
			<b>Ephemeris Calculations</b><br/>
 The ephemeris calculations in Kepler draw heavily from the work of 
 Stephen Moshier moshier@world.std.com. kepler is released as a free software package, further 
 extending the work of Mr. Moshier.</para>
		<para>Kepler does not integrate orbits to the current epoch. If you want the accuracy resulting from 
 an integrated orbit, you must integrate separately and supply Kepler with elements of the current 
 epoch. Orbit integration is on the list of things for the next major version.</para>
		<para>Kepler uses polynomial approximations for the major planet ephemerides. The tables 
 of coefficients were derived by a least squares fit of periodic terms to JPL's DE404 ephemerides. 
 The periodic frequencies used were determined by spectral analysis and comparison with VSOP87 and 
 other analytical planetary theories. The least squares fit to DE404 covers the interval from -3000 
 to +3000 for the outer planets, and -1350 to +3000 for the inner planets. For details on the 
 accuracy of the major planet ephemerides, see the Accuracy Tables page. </para>
		<para>
			<b>Date and Time Systems</b><br/><br/>
 For a detailed explanation of astronomical timekeeping systems, see A Time Tutorial on the NASA 
 Goddard Spaceflight Center site, and the USNO Systems of Time site. 
 <br/><br/><i>ActiveX Date values </i><br/>
 These are the Windows standard "date serial" numbers, and are expressed in local time or 
 UTC (see below). The fractional part of these numbers represents time within a day. 
 They are used throughout applications such as Excel, Visual Basic, VBScript, and other 
 ActiveX capable environments. 
 <br/><br/><i>Julian dates </i><br/>
 These are standard Julian "date serial" numbers, and are expressed in UTC time or Terrestrial 
 time. The fractional part of these numbers represents time within a day. The standard ActiveX 
 "Double" precision of 15 digits gives a resolution of about one millisecond in a full Julian date. 
 This is sufficient for the purposes of this program. 
 <br/><br/><i>Hourly Time Values </i><br/>
 These are typically used to represent sidereal time and right ascension. They are simple real 
 numbers in units of hours. 
 <br/><br/><i>UTC Time Scale </i><br/>
 Most of the ASCOM methods and properties that accept date/time values (either Date or Julian) 
 assume that the date/time is in Coordinated Universal Time (UTC). Where necessary, this time 
 is converted internally to other scales. Note that UTC seconds are based on the Cesium atom, 
 not planetary motions. In order to keep UTC in sync with planetary motion, leap seconds are 
 inserted periodically. The error is at most 900 milliseconds.
 <br/><br/><i>UT1 Time Scale </i><br/>
 The UT1 time scale is the planetary equivalent of UTC. It it runs smoothly and varies a bit 
 with time, but it is never more than 900 milliseconds different from UTC. 
 <br/><br/><i>TT Time Scale </i><br/>
 The Terrestrial Dynamical Time (TT) scale is used in solar system orbital calculations. 
 It is based completely on planetary motions; you can think of the solar system as a giant 
 TT clock. It differs from UT1 by an amount called "delta-t", which slowly increases with time, 
 and is about 60 seconds right now (2001). </para>
	</remarks>
</member><member name="M:ASCOM.HelperNET.Transform.Dispose">
	<summary>
 Cleans up resources used by the Transform component
 </summary>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.SiteLatitude">
	<summary>
 Gets or sets the site latitude
 </summary>
	<value>Site latitude</value>
	<returns>Latitude in degrees</returns>
	<remarks>Positive numbers north of the equator, negative numbers south.</remarks>
</member><member name="P:ASCOM.HelperNET.Transform.SiteLongitude">
	<summary>
 Gets or sets the site longitude
 </summary>
	<value>Site longitude</value>
	<returns>Longitude in degrees</returns>
	<remarks>Positive numbers east of the Greenwich meridian, negative numbes west of the Greenwich meridian.</remarks>
</member><member name="P:ASCOM.HelperNET.Transform.SiteElevation">
	<summary>
 Gets or sets the site elevation above sea level
 </summary>
	<value>Site elevation</value>
	<returns>Elevation in metres</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.SiteTemperature">
	<summary>
 Gets or sets the site ambient temperature
 </summary>
	<value>Site ambient temperature</value>
	<returns>Temperature in degrees Celsius</returns>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.Refraction">
	<summary>
 Gets or sets a flag indicating whether refraction is calculated for topocentric co-ordinates
 </summary>
	<value>True / false flag indicating refaction is included / omitted from topocentric co-ordinates</value>
	<returns>Boolean flag</returns>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Transform.Refresh">
	<summary>
 Causes the transform component to recalculate values derrived from the last Set command
 </summary>
	<remarks>Use this when you have set J2000 co-ordinates and wish to ensure that the mount points to the same 
 co-ordinates allowing for local effects that change with time such as refraction.</remarks>
</member><member name="M:ASCOM.HelperNET.Transform.SetJ2000(System.Double,System.Double)">
	<summary>
 Sets the known J2000 Right Ascension and Declination coordinates that are to be transformed
 </summary>
	<param name="RA">RA in J2000 co-ordinates</param>
	<param name="DEC">DEC in J2000 co-ordinates</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Transform.SetApparent(System.Double,System.Double)">
	<summary>
 Sets the known apparent Right Ascension and Declination coordinates that are to be transformed
 </summary>
	<param name="RA">RA in apparent co-ordinates</param>
	<param name="DEC">DEC in apparent co-ordinates</param>
	<remarks></remarks>
</member><member name="M:ASCOM.HelperNET.Transform.SetTopocentric(System.Double,System.Double)">
	<summary>
 Sets the known local topocentric Right Ascension and Declination coordinates that are to be transformed
 </summary>
	<param name="RA">RA in local topocentric co-ordinates</param>
	<param name="DEC">DEC in local topocentric co-ordinates</param>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.RAJ2000">
	<summary>
 Returns the Right Ascension in J2000 co-ordinates
 </summary>
	<value>J2000 Right Ascension</value>
	<returns>Right Ascension in hours</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.DecJ2000">
	<summary>
 Returns the Declination in J2000 co-ordinates
 </summary>
	<value>J2000 Declination</value>
	<returns>Declination in degrees</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.RATopocentric">
	<summary>
 Returns the Right Ascension in local topocentric co-ordinates
 </summary>
	<value>Local topocentric Right Ascension</value>
	<returns>Right Ascension in hours</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.DECJTopocentric">
	<summary>
 Returns the Declination in local topocentric co-ordinates
 </summary>
	<value>Local topocentric Declination</value>
	<returns>Declination in degrees</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.RAApparent">
	<summary>
 Returns the Right Ascension in apparent co-ordinates
 </summary>
	<value>Apparent Right Ascension</value>
	<returns>Right Ascension in hours</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.DECApparent">
	<summary>
 Returns the Declination in apparent co-ordinates
 </summary>
	<value>Apparent Declination</value>
	<returns>Declination in degrees</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.AzimuthTopocentric">
	<summary>
 Returns the topocentric azimth angle of the target
 </summary>
	<value>Topocentric azimuth angle</value>
	<returns>Azimuth angle in degrees</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="P:ASCOM.HelperNET.Transform.ElevationTopocentric">
	<summary>
 Returns the topocentric elevation of the target
 </summary>
	<value>Topocentric elevation angle</value>
	<returns>Elevation angle in degrees</returns>
	<exception cref="T:ASCOM.HelperNET.Exceptions.TransformUninitialisedException">Exception thrown if an attempt is made
 to read a value before any of the Set methods has been used or if the value can not be derived from the
 information in the last Set method used. E.g. topocentric values will be unavailable if the last Set was
 a SetApparent and one of the Site properties has not been set.</exception>
	<remarks></remarks>
</member><member name="T:ASCOM.HelperNET.Transform">
	<summary>
 Coordinate transform component; J2000 - apparent - local topocentric
 </summary>
	<remarks>Use this component to transform between J2000, apparent and local topocentric (JNow) coordinates or 
 vice versa. To use the component, instantiate it, then use one of SetJ2000 or SetJNow or SetApparent to 
 initialise with known values. Now use the RAJ2000, DECJ200, RAJNow, DECJNow, RAApparent and DECApparent 
 properties to read off the required transformed values.
<para>The component can be reused simply by setting new co-ordinates with a Set command, there
 is no need to create a new component each time a transform is required.</para>
		<para>Transforms are effected through the ASCOM NOVAS.Net engine that encapsulates the USNO NOVAS2 library. 
 The USNO NOVAS reference web page is: 
 http://www.usno.navy.mil/USNO/astronomical-applications/software-products/novas/novas-fortran/novas-fortran 
 </para>
	</remarks>
</member>
</members>
</doc>