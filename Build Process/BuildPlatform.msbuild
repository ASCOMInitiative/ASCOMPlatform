<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Required Import to use MSBuild Community Tasks -->
	<Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>

	<!--  Specify Release or Release Candidate builds (possible values: Release and ReleaseCandidate) -->
	<PropertyGroup>
		<BuildType>ReleaseCandidate</BuildType>
	</PropertyGroup>

	<!--  Set values according to type of build -->
	<Choose>
		<When Condition=" '$(BuildType)'=='Release' ">
			<PropertyGroup>
				<!-- GIT Branch to Check Out -->
				<GitCheckoutBranch>master</GitCheckoutBranch>

				<!--  Specify Release or Debug builds (Debug not working at 25/10/21) -->
				<Configuration>Release</Configuration>

				<!-- Annotation to add to the installer name to identify this build type -->
				<BuildTypeAnnotation></BuildTypeAnnotation>
			</PropertyGroup>
		</When>
		<When Condition=" '$(BuildType)'=='ReleaseCandidate' ">
			<PropertyGroup>
				<!-- GIT Branch to Check Out -->
				<GitCheckoutBranch>develop</GitCheckoutBranch>

				<!--  Specify Release or Debug builds (Debug not working at 25/10/21) -->
				<Configuration>Release</Configuration>

				<!-- Annotation to add to the installer name to identify this build type -->
				<BuildTypeAnnotation>beta</BuildTypeAnnotation>
			</PropertyGroup>
		</When>
	</Choose>

	<PropertyGroup>

		<!-- Directory in which to export the latest ASCOM code base from GitHub-->
		<CheckoutDirectoryRelative>Export</CheckoutDirectoryRelative>
		<CheckoutDirectory>$(MSBuildProjectDirectory)\$(CheckoutDirectoryRelative)</CheckoutDirectory>

		<!-- Name and full path to a file that will hold the build number associated with this build -->
		<BuildNumberFileName>LastBuildNumber.txt</BuildNumberFileName>
		<BuildNumberFile>$(CheckoutDirectory)\$(BuildNumberFileName)</BuildNumberFile>

		<!-- GitHub URL from which to make the clone -->
		<GitRepositoryPath>https://github.com/ASCOMInitiative/ASCOMPlatform.git</GitRepositoryPath>

		<!-- Base date from which the number of days is calculated to give the build version number (should stay at Jan 1 2011 - it's good till at least 2019) -->
		<BuildBaseDate>January 1,2011</BuildBaseDate>

		<!-- Location of the InstallAware build executable -->
		<MIABuild>miabuild.exe</MIABuild>

		<!-- Location of the InstallAware shared strings folder on the build machine -->
		<MIALanguageFolder>C:\Program Files (x86)\InstallAware X15 Creators Update\trans</MIALanguageFolder>
		<ASCOMSharedStringsDirectory>Releases\ASCOM 6\Translated InstallAware Shared Strings</ASCOMSharedStringsDirectory>

		<!-- Names and locations of solution and project files used by this build script-->
		<PlatformVSSolution>ASCOM Platform.sln</PlatformVSSolution>
		<PlatformHelpProject>Help\ASCOMPlatform.shfbproj</PlatformHelpProject>
		<DeveloperHelpProject>Help\ASCOMDeveloper.shfbproj</DeveloperHelpProject>
		<PlatformHelpDirectory>Help\Output\Platform</PlatformHelpDirectory>
		<DeveloperHelpDirectory>Help\Output\Developer</DeveloperHelpDirectory>
		<PlatformInstallerDirectory>Releases\ASCOM 6\Platform\Installer Project</PlatformInstallerDirectory>
		<DeveloperInstallerDirectory>Releases\ASCOM 6\Developer\Installer Project</DeveloperInstallerDirectory>
		<PlatformInstallerProject>$(PlatformInstallerDirectory)\ASCOM Platform 6.mpr</PlatformInstallerProject>
		<DeveloperInstallerProject>$(DeveloperInstallerDirectory)\ASCOM Platform 6 Developer.mpr</DeveloperInstallerProject>
		<FindGUIDsDirectory>Remove ASCOM\Find GUIDs\bin\$(Configuration)</FindGUIDsDirectory>
		<RemoveASCOMDirectory>Remove ASCOM\Remove ASCOM\bin\$(Configuration)</RemoveASCOMDirectory>
		<RemoveASCOMExe>$(RemoveASCOMDirectory)\RemoveASCOM.exe</RemoveASCOMExe>
		<RemoveASCOMPdb>$(RemoveASCOMDirectory)\RemoveASCOM.pdb</RemoveASCOMPdb>
		<RemoveASCOMTxt>$(RemoveASCOMDirectory)\GUIDList.txt</RemoveASCOMTxt>
		<VersionFile>$(CheckoutDirectory)\$(PlatformInstallerDirectory)\MasterPlatformVersion.txt</VersionFile>
		<VSIXInstallerFileName>ASCOMVsixTemplateInstaller</VSIXInstallerFileName>
		<VSIXInstallerFileType>vsix</VSIXInstallerFileType>
		<VSIXInstallerFile2019>DriverTemplates\VSIXInstaller\ASCOMVsixTemplateInstaller2019\bin\$(Configuration)\$(VSIXInstallerFileName).$(VSIXInstallerFileType)</VSIXInstallerFile2019>
		<VSIXManifestFile2019>DriverTemplates\VSIXInstaller\ASCOMVsixTemplateInstaller2019\source.extension.vsixmanifest</VSIXManifestFile2019>
		<VSIXInstallerFile2022>DriverTemplates\VSIXInstaller\ASCOMVsixTemplateInstaller2022\bin\$(Configuration)\$(VSIXInstallerFileName).$(VSIXInstallerFileType)</VSIXInstallerFile2022>
		<VSIXManifestFile2022>DriverTemplates\VSIXInstaller\ASCOMVsixTemplateInstaller2022\source.extension.vsixmanifest</VSIXManifestFile2022>
		<PackageVersionFile>Directory.Build.props</PackageVersionFile>
		<ASCOMExceptionsPackageFolder>Interfaces\ASCOMExceptions\bin\Release</ASCOMExceptionsPackageFolder>
		<BuildEnvironmentPackageFolder>BuildEnvironment\bin\Release</BuildEnvironmentPackageFolder>
		
		<!-- NuGet location and command to restore Platform NuGet dependencies -->
		<NuGetCommand>..\nuget restore</NuGetCommand>

		<!-- Code signing tool command line bases for SHA1 and SHA256 signing -->
		<SignToolBase256>signtool sign /a /fd SHA256 /tr http://rfc3161timestamp.globalsign.com/advanced /td SHA256</SignToolBase256>

	</PropertyGroup>

	<!-- Main build target for this build -->
	<Target Name="Build">

		<!-- Item group for the installers that are created by the build process -->
		<ItemGroup>
			<OldPlatformInstallers Include="$(MSBuildProjectDirectory)\ASCOM*.exe;$(MSBuildProjectDirectory)\RemoveASCOM*.*;$(MSBuildProjectDirectory)\*.vsix;$(MSBuildProjectDirectory)\*.nupkg" />
		</ItemGroup>

		<!-- Remove the checkout directory to ensure a clean build, wait until the directory actually goes, -->
		<!-- the command can complete before the contents are actually gone! -->
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'"  />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />

		<!-- Stop the build with an error if we can't clear the directory by this point -->
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="false" />

		<!-- Clean up any previous installer versions  -->
		<Delete Files="@(OldPlatformInstallers)" />

		<!-- Create the export directory ready for cloning  -->
		<MakeDir Directories="$(CheckoutDirectory)"/>

		<!-- Clone a fresh copy of the ASCOM Platform Git repository  -->
		<GitClient Command="clone" LocalPath="$(MSBuildProjectDirectory)" Arguments="-b $(GitCheckoutBranch) $(GitRepositoryPath) $(CheckoutDirectoryRelative)"/>

		<!-- Get the latest commit number into the Revision Property to use in the the Platform version number  Now uses 'all' instead of 'HEAD' to get the latest commit accross all branches. -->
		<Exec Command="git.exe rev-list --all --count" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)">
			<Output TaskParameter="ConsoleOutput" PropertyName="Revision" />
		</Exec>
		<Message Text="Revision Level: $(Revision)"/>

		<!-- Get the SHA1 of the latest commit into the CommitSHA1 property -->
		<Exec Command="git.exe rev-parse HEAD" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)">
			<Output TaskParameter="ConsoleOutput" PropertyName="CommitSHA1" />
		</Exec>
		<Message Text="HEAD SHA1: $(CommitSHA1)"/>

		<!-- Restore NuGet packages -->
		<Exec Command="$(NuGetCommand)" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)" />

		<!-- Copy the InstallAware shared text strings to the InstallAware program directory. This is the only way that IA will actually use the modified strings! Ugh - but there it is. -->
		<!-- File now stored permanently on the build machine because this approach requires the command prompt to be run with Admin privilege -->
		<!-- <ItemGroup> -->
		<!-- 	<MIASharedStrings Include="$(CheckoutDirectory)\$(ASCOMSharedStringsDirectory)\*.*" /> -->
		<!-- </ItemGroup> -->
		<!-- <Copy SourceFiles="@(MIASharedStrings)" DestinationFolder="$(MIALanguageFolder)" /> -->

		<!-- Get the Platform version numbers from the MasterPlatformVersion file in the Export -->
		<ReadLinesFromFile File="$(VersionFile)" >
			<Output TaskParameter="Lines"
			ItemName="VersionNumberList" />
		</ReadLinesFromFile>

		<!-- Create version numbers from the semicolon delimited list that ReadLinesFromFile delivers -->
		<PropertyGroup>
			<PlatformNumber>@(VersionNumberList)</PlatformNumber>
			<PlatformMajor>$(PlatformNumber.Split(';')[0])</PlatformMajor>
			<PlatformMinor>$(PlatformNumber.Split(';')[1])</PlatformMinor>
			<PlatformServicePack>$(PlatformNumber.Split(';')[2])</PlatformServicePack>
			<!-- Current Platform version Major.Minor-->
			<PlatformVersion>$(PlatformMajor).$(PlatformMinor)</PlatformVersion>
		</PropertyGroup>
		<Message Text="Version numbers - Major: $(PlatformMajor), Minor: $(PlatformMinor), ServicePack: $(PlatformServicePack), MasterPlatformLevel: $(PlatformVersion)" />

		<!-- Define the VSIX package XML schema name. -->
		<PropertyGroup>
			<Namespace>
				<Namespace Prefix="vsx" Uri="http://schemas.microsoft.com/developer/vsx-schema/2011" />
			</Namespace>
		</PropertyGroup>

		<!-- Update the developer project templates VS2019 VSIX installer version number with the current build number. -->
		<XmlPoke
		  XmlInputPath="$(CheckoutDirectory)\$(VSIXManifestFile2019)"
		  Value="$(PlatformMajor).$(PlatformMinor).$(Revision)"
		  Query="/vsx:PackageManifest/vsx:Metadata/vsx:Identity/@Version"
		  Namespaces="$(Namespace)"/>
		  <Message Text="VSIX Manifest file: $(CheckoutDirectory)\$(VSIXManifestFile2019) version number updated to: $(PlatformMajor).$(PlatformMinor).$(PlatformServicePack).$(Revision)"/>

		<!-- Update the developer project templates VS2022 VSIX installer version number with the current build number. -->
		<XmlPoke
		  XmlInputPath="$(CheckoutDirectory)\$(VSIXManifestFile2022)"
		  Value="$(PlatformMajor).$(PlatformMinor).$(Revision)"
		  Query="/vsx:PackageManifest/vsx:Metadata/vsx:Identity/@Version"
		  Namespaces="$(Namespace)"/>
		  <Message Text="VSIX Manifest file: $(CheckoutDirectory)\$(VSIXManifestFile2022) version number updated to: $(PlatformMajor).$(PlatformMinor).$(PlatformServicePack).$(Revision)"/>

		<!-- Update the master package version number to the current Platform level if this is a release. -->
		<XmlPoke Condition=" '$(BuildType)'=='Release' "
		  XmlInputPath="$(CheckoutDirectory)\$(PackageVersionFile)"
		  Value="$(PlatformMajor).$(PlatformMinor).$(PlatformServicePack)$(PackageSuffix)"
		  Query="//Version" />

		<!-- Update the master package version number to the current Platform and revision if this is a release. -->
		<XmlPoke Condition=" '$(BuildType)'=='ReleaseCandidate' "
		  XmlInputPath="$(CheckoutDirectory)\$(PackageVersionFile)"
		  Value="$(PlatformMajor).$(PlatformMinor).$(PlatformServicePack)$(PackageSuffix)-rc.$(Revision)"
		  Query="//Version" />

		<Message Text="Package version file: $(CheckoutDirectory)\$(PackageVersionFile) version number updated to: $(PlatformMajor).$(PlatformMinor).$(PlatformServicePack)"/>

		<!-- Create global AssemblyVersion attributes from the Platform version, service pack and revision numbers. -->
		<AssemblyInfo
			CodeLanguage="CS"
			OutputFile="$(CheckoutDirectory)\AssemblyVersionInfo.cs"
			AssemblyFileVersion="$(PlatformVersion).$(PlatformServicePack).$(Revision)"
			AssemblyInformationalVersion="$(CommitSHA1)"/>
		<AssemblyInfo
			CodeLanguage="VB"
			OutputFile="$(CheckoutDirectory)\AssemblyVersionInfo.vb"
			AssemblyFileVersion="$(PlatformVersion).$(PlatformServicePack).$(Revision)"
			AssemblyInformationalVersion="$(CommitSHA1)"/>

		<!-- Build FindGUIDs after cleaning the solution (just in case executables get committed to SVN) -->
		<!-- This builds the GUIDList.vb file ready to be incorporated into RemoveASCOM when it is built as part of the Platform -->
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Clean" Properties="Configuration=MakeDynamicLists;Platform=Mixed Platforms" />
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Build" Properties="Configuration=MakeDynamicLists;Platform=Mixed Platforms" />

		<!-- Run FindGUIDs to create the updated class in the RemoveASCOM project that contains the list of GUIDs used by the project -->
		<Exec Command='"$(CheckoutDirectory)\$(FindGUIDsDirectory)\MakeDynamicLists.exe" "$(CheckoutDirectory)" ' />

		<!-- Build the main Platform after cleaning the solution (just in case executables get committed to SVN) -->
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Clean" Properties="Configuration=$(Configuration);Platform=Mixed Platforms" />
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Build" Properties="Configuration=$(Configuration);Platform=Mixed Platforms" />

		<!-- Sign and copy the RemoveASCOM executables, that have just been built, to the installer main directory so that the latest versions are included in the installer -->
		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(RemoveASCOMExe)&quot;" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)" />
		<ItemGroup>
			<RemoveASCOMExecutables Include="$(CheckoutDirectory)\$(RemoveASCOMExe);$(CheckoutDirectory)\$(RemoveASCOMPdb)" />
		</ItemGroup>
		<Copy SourceFiles="@(RemoveASCOMExecutables)" DestinationFolder="$(CheckoutDirectory)\$(PlatformInstallerDirectory)" />

		<!-- Build the 64bit executables after cleaning the solution (just in case executables get committed to SVN) -->
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Clean" Properties="Configuration=$(Configuration);Platform=x64" />
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Build" Properties="Configuration=$(Configuration);Platform=x64" />

		<!-- Sign the executables that support the installation process, these are not automatically signed by the InstallAware build process -->
		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(PlatformInstallerDirectory)\*.exe&quot;" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)" />
		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(PlatformInstallerDirectory)\*.dll&quot;" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)" />

		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(DeveloperInstallerDirectory)\*.exe&quot;" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)" />
		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(DeveloperInstallerDirectory)\*.dll&quot;" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)" />

		<!-- Build the help files for Platform and Developer.-->
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformHelpProject)" Properties="Configuration=$(Configuration);Platform=AnyCPU" />
		<MSBuild Projects="$(CheckoutDirectory)\$(DeveloperHelpProject)" Properties="Configuration=$(Configuration);Platform=AnyCPU" />

		<!-- Update the file version numbers in the InstallAware project files -->
		<ItemGroup>
			<IAProjectFiles Include="$(CheckoutDirectory)\$(PlatformInstallerDirectory)\*.mpr;$(CheckoutDirectory)\$(DeveloperInstallerDirectory)\*.mpr" />
		</ItemGroup>
		<FileUpdate Files="@(IAProjectFiles)"
			Encoding="ASCII"
			Regex="$(PlatformVersion).9999.9999"
			ReplacementText="$(PlatformVersion).$(PlatformServicePack).$(Revision)">
		</FileUpdate>

		<!-- Add browser compatibility line to all the html help files so that all browsers can read them on the ASCOM Standards web site -->
		<ItemGroup>
			<HTMLHelpFiles Include="$(CheckoutDirectory)\$(PlatformHelpDirectory)\*.html;$(CheckoutDirectory)\$(PlatformHelpDirectory)\html\*.htm;$(CheckoutDirectory)\$(DeveloperHelpDirectory)\*.html;$(CheckoutDirectory)\$(DeveloperHelpDirectory)\html\*.htm" />
		</ItemGroup>
		<FileUpdate Files="@(HTMLHelpFiles)"
			Regex="&lt;head&gt;"
			ReplacementText="&lt;head&gt;&lt;meta&#32;http-equiv&#61;&quot;X-UA-Compatible&quot;&#32;content&#61;&quot;IE&#61;5&quot;&#32;&#47;&gt;">
		</FileUpdate>

		<!-- Rename index.html files so that they work on the ASCOM Standards web site -->
		<Exec Command='Rename "$(CheckoutDirectory)\$(PlatformHelpDirectory)\index.html" "Index.html" ' />
		<Exec Command='Rename "$(CheckoutDirectory)\$(DeveloperHelpDirectory)\index.html" "Index.html" ' />

		<!-- Build the InstallAware installers -->
		<Exec Command='"$(MIABuild)" "$(CheckoutDirectory)\$(PlatformInstallerProject)" /r' />
		<Exec Command='"$(MIABuild)" "$(CheckoutDirectory)\$(DeveloperInstallerProject)" /r' />

		<!-- Copy the installers back to the build root directory -->
		<Sleep Milliseconds="1000" />
		<ItemGroup>
			<PlatformInstallers
			Include="$(CheckoutDirectory)\$(PlatformInstallerDirectory)\Release\Single\AscomPlatform$(PlatformMajor)$(PlatformMinor)$(PlatformServicePack).exe;
			$(CheckoutDirectory)\$(DeveloperInstallerDirectory)\Release\Single\AscomDeveloper$(PlatformMajor)$(PlatformMinor)$(PlatformServicePack).exe" />
		</ItemGroup>
		<ItemGroup>
			<PlatformInstallersRenamed
			Include="$(MSBuildProjectDirectory)\AscomPlatform$(PlatformMajor)$(PlatformMinor)$(PlatformServicePack)$(BuildTypeAnnotation).$(Revision).exe;
			$(MSBuildProjectDirectory)\AscomDeveloper$(PlatformMajor)$(PlatformMinor)$(PlatformServicePack)$(BuildTypeAnnotation).$(Revision).exe" />
		</ItemGroup>
		<Copy SourceFiles="@(PlatformInstallers)" DestinationFiles="@(PlatformInstallersRenamed)" />

		<!-- Zip up the RemoveASCOM files and store the zip file in the build root directory ;$(CheckoutDirectory)\$(RemoveASCOMPdb) -->
		<ItemGroup>
			<ZipFiles Include="$(CheckoutDirectory)\$(RemoveASCOMExe);$(CheckoutDirectory)\$(RemoveASCOMPdb);$(CheckoutDirectory)\$(RemoveASCOMTxt)" />
		</ItemGroup>
		<Zip Files="@(ZipFiles)" ZipFileName="$(MSBuildProjectDirectory)\RemoveASCOM$(BuildTypeAnnotation).$(Revision).zip" WorkingDirectory="$(CheckoutDirectory)\$(RemoveASCOMDirectory)"/>

		<!-- Copy the VS2019 VSIX installer to the root folder without the beta status -->
		<ItemGroup>
			<VSIXInstallerSourceFile2019 Include="$(CheckoutDirectory)\$(VSIXInstallerFile2019)"/>
		</ItemGroup>
		<ItemGroup>
			<VSIXInstallerDestinationFile2019 Include="$(MSBuildProjectDirectory)\$(VSIXInstallerFileName)2019.$(Revision).$(VSIXInstallerFileType)"/>
		</ItemGroup>
		<Copy SourceFiles="@(VSIXInstallerSourceFile2019)" DestinationFiles="@(VSIXInstallerDestinationFile2019)" SkipUnchangedFiles="false" />

		<!-- Copy the VS2022 VSIX installer to the root folder without the beta status -->
		<ItemGroup>
			<VSIXInstallerSourceFile2022 Include="$(CheckoutDirectory)\$(VSIXInstallerFile2022)"/>
		</ItemGroup>
		<ItemGroup>
			<VSIXInstallerDestinationFile2022 Include="$(MSBuildProjectDirectory)\$(VSIXInstallerFileName)2022.$(Revision).$(VSIXInstallerFileType)"/>
		</ItemGroup>
		<Copy SourceFiles="@(VSIXInstallerSourceFile2022)" DestinationFiles="@(VSIXInstallerDestinationFile2022)" SkipUnchangedFiles="false" />

		<!-- Copy the ASCOM Exceptions package to the root folder -->
		<ItemGroup>
			<ExceptionPackage Include="$(CheckoutDirectory)\$(ASCOMExceptionsPackageFolder)\*.nupkg"/>
		</ItemGroup>
		<Copy SourceFiles="@(ExceptionPackage)" DestinationFolder="$(MSBuildProjectDirectory)" SkipUnchangedFiles="false" />

		<!-- Copy the ASCOM Build Environment package to the root folder -->
		<ItemGroup>
			<BuildEnvironmentPackage Include="$(CheckoutDirectory)\$(BuildEnvironmentPackageFolder)\*.nupkg"/>
		</ItemGroup>
		<Copy SourceFiles="@(BuildEnvironmentPackage)" DestinationFolder="$(MSBuildProjectDirectory)" SkipUnchangedFiles="false" />

		<!-- Create a formatted version of the current date and time -->
		<PropertyGroup>
			<CurrentDate>$([System.DateTime]::Now.ToString(dd MMMM yyyy hh:mm:ss))</CurrentDate>
		</PropertyGroup>

		<!-- Update the recorded build number -->
		<ItemGroup>
			<CmdLine Include = "Build version: $(PlatformVersion).$(PlatformServicePack).$(Revision)"/>
			<CmdLine Include = "Built on: $(CurrentDate)"/>
		</ItemGroup>
		<WriteLinesToFile File="$(BuildNumberFile)" Lines="@(CmdLine)" Overwrite="true"/>

	</Target>

</Project>