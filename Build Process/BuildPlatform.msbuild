<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Required Import to use MSBuild Community Tasks -->
	<Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>

	<!--  Specify Release or Release Candidate builds (possible values: Release and ReleaseCandidate) -->
	<PropertyGroup>
		<BuildType>ReleaseCandidate</BuildType>
	</PropertyGroup>

	<!-- Determine when or not to sign code True to sign, anything elser not to sign. -->
	<PropertyGroup>
		<SignCode>True</SignCode>
	</PropertyGroup>

	<!--  Set values according to type of build -->
	<Choose>
		<!--  RELEASE CANDIDATE build -->
		<When Condition=" '$(BuildType)'=='ReleaseCandidate' ">
			<PropertyGroup>
				<!-- Platform release candidate configuration -->
				<GitCheckoutBranch>develop</GitCheckoutBranch>
				<PlatformConfiguration>release</PlatformConfiguration>

				<!--  OmniSim release candidate configuration main Net8COMProxy1 -->
				<OmniSimCheckoutBranch>warningfix</OmniSimCheckoutBranch>
				<OmniSimConfiguration>release</OmniSimConfiguration>

				<!--  Library release configuration -->
				<LibraryCheckoutBranch>main</LibraryCheckoutBranch>
				<LibraryBuildConfiguration>debug</LibraryBuildConfiguration>

				<!--  ASCOM Remote release configuration -->
				<AscomRemoteRepositorytBranch>main</AscomRemoteRepositorytBranch>
				<AscomRemoteBuildConfiguration>release</AscomRemoteBuildConfiguration>

				<!-- Annotation to add to the installer name to identify this build type r.g. .rc8 -->
				<BuildTypeAnnotation>rc</BuildTypeAnnotation>
			</PropertyGroup>
		</When>
		<!--  RELEASE build -->
		<When Condition=" '$(BuildType)'=='Release' ">
			<PropertyGroup>
				<!-- Platform release configuration -->
				<GitCheckoutBranch>main</GitCheckoutBranch>
				<PlatformConfiguration>release</PlatformConfiguration>

				<!--  OmniSim release configuration -->
				<OmniSimCheckoutBranch>main</OmniSimCheckoutBranch>
				<OmniSimConfiguration>release</OmniSimConfiguration>

				<!--  Library release configuration -->
				<LibraryCheckoutBranch>main</LibraryCheckoutBranch>
				<LibraryBuildConfiguration>debug</LibraryBuildConfiguration>

				<!--  ASCOM Remote release configuration -->
				<AscomRemoteRepositorytBranch>main</AscomRemoteRepositorytBranch>
				<AscomRemoteBuildConfiguration>release</AscomRemoteBuildConfiguration>
								
				<!-- Annotation to add to the installer name to identify this build type -->
				<BuildTypeAnnotation></BuildTypeAnnotation>
			</PropertyGroup>
		</When>
	</Choose>

	<!--  Set values according to whether or not we are signing executables -->
	<Choose>
		<When Condition="'$(SignCode)'=='True'">
			<PropertyGroup>
				<!-- Set InstallAware options -->
				<MIAOptions>/r</MIAOptions>
			</PropertyGroup>
		</When>
		<Otherwise>
			<PropertyGroup>
				<!-- Set InstallAware options -->
				<MIAOptions>/nosign /r</MIAOptions>
			</PropertyGroup>
		</Otherwise>
	</Choose>

	<!-- Set properties Platform properties -->
	<PropertyGroup>

		<!-- GitHub URL from which to make the Platform clone -->
		<GitRepositoryPath>https://github.com/ASCOMInitiative/ASCOMPlatform.git</GitRepositoryPath>

		<!-- Directory in which to export the latest ASCOM code base from GitHub-->
		<CheckoutDirectoryRelative>Export</CheckoutDirectoryRelative>
		<CheckoutDirectory>$(MSBuildProjectDirectory)\$(CheckoutDirectoryRelative)</CheckoutDirectory>

		<!-- Name and full path to a file that will hold the build number associated with this build -->
		<BuildNumberFileName>LastBuildNumber.txt</BuildNumberFileName>
		<BuildNumberFile>$(CheckoutDirectory)\$(BuildNumberFileName)</BuildNumberFile>

		<!-- Base date from which the number of days is calculated to give the build version number (should stay at Jan 1 2011 - it's good till at least 2019) -->
		<BuildBaseDate>January 1,2011</BuildBaseDate>

		<!-- Location of the InstallAware build executable -->
		<MIABuild>miabuild.exe</MIABuild>

		<!-- Location of the InstallAware shared strings folder on the build machine -->
		<MIALanguageFolder>C:\Program Files (x86)\InstallAware X15 Creators Update\trans</MIALanguageFolder>
		<ASCOMSharedStringsDirectory>Releases\ASCOM 6\Translated InstallAware Shared Strings</ASCOMSharedStringsDirectory>

		<!-- Names and locations of solution and project files used for building the Platform -->
		<PlatformVSSolution>ASCOM Platform.sln</PlatformVSSolution>
		<PlatformHelpProject>Help\ASCOMPlatform.shfbproj</PlatformHelpProject>
		<DeveloperHelpProject>Help\ASCOMDeveloper.shfbproj</DeveloperHelpProject>
		<PlatformHelpDirectory>Help\Output\Platform</PlatformHelpDirectory>
		<DeveloperHelpDirectory>Help\Output\Developer</DeveloperHelpDirectory>
		<PlatformInstallerDirectory>Installer</PlatformInstallerDirectory>
		<DeveloperInstallerDirectory>InstallerDeveloper</DeveloperInstallerDirectory>
		<PlatformInstallerProject>$(PlatformInstallerDirectory)\PlatformInstaller.mpr</PlatformInstallerProject>
		<DeveloperInstallerProject>$(DeveloperInstallerDirectory)\DeveloperInstaller.mpr</DeveloperInstallerProject>
		<FindGUIDsDirectory>InstallerSupport\Find GUIDs\bin\$(PlatformConfiguration)</FindGUIDsDirectory>
		<RemoveASCOMDirectory>InstallerSupport\Remove ASCOM\bin\$(PlatformConfiguration)</RemoveASCOMDirectory>
		<RemoveASCOMExe>$(RemoveASCOMDirectory)\RemoveASCOM.exe</RemoveASCOMExe>
		<RemoveASCOMPdb>$(RemoveASCOMDirectory)\RemoveASCOM.pdb</RemoveASCOMPdb>
		<RemoveASCOMTxt>$(RemoveASCOMDirectory)\GUIDList.txt</RemoveASCOMTxt>
		<VersionFile>$(CheckoutDirectory)\$(PlatformInstallerDirectory)\MasterPlatformVersion.txt</VersionFile>
		<VSIXInstallerFileName>ASCOMVsixTemplateInstaller</VSIXInstallerFileName>
		<VSIXInstallerFileType>vsix</VSIXInstallerFileType>
		<VSIXInstallerFile2019>DriverTemplates\VSIXInstaller\ASCOMVsixTemplateInstaller2019\bin\$(PlatformConfiguration)\$(VSIXInstallerFileName).$(VSIXInstallerFileType)</VSIXInstallerFile2019>
		<VSIXManifestFile2019>DriverTemplates\VSIXInstaller\ASCOMVsixTemplateInstaller2019\source.extension.vsixmanifest</VSIXManifestFile2019>
		<VSIXInstallerFile2022>DriverTemplates\VSIXInstaller\ASCOMVsixTemplateInstaller2022\bin\$(PlatformConfiguration)\$(VSIXInstallerFileName).$(VSIXInstallerFileType)</VSIXInstallerFile2022>
		<VSIXManifestFile2022>DriverTemplates\VSIXInstaller\ASCOMVsixTemplateInstaller2022\source.extension.vsixmanifest</VSIXManifestFile2022>
		<PackageVersionFile>Directory.Build.props</PackageVersionFile>
		<ASCOMExceptionsPackageFolder>ASCOM.Exceptions\bin\Release</ASCOMExceptionsPackageFolder>
		<BuildEnvironmentPackageFolder>BuildEnvironment\bin\Release</BuildEnvironmentPackageFolder>
		<DeviceInterfacesPackageFolder>\ASCOM.DeviceInterface\bin\Release</DeviceInterfacesPackageFolder>
		<GacInstallFile>$(CheckoutDirectory)\InstallerSupport\GACInstall\bin\$(PlatformConfiguration)\GacInstall.exe</GacInstallFile>
		<SOFAProjectDirectory>SOFA\Sofa Library</SOFAProjectDirectory>
		<SOFAProjectFile>Sofa.vcxproj</SOFAProjectFile>
		<NOVASProjectDirectory>NOVAS\NOVAS-31\NOVAS3</NOVASProjectDirectory>
		<NOVASProjectFile>NOVAS3.vcxproj</NOVASProjectFile>

		<!-- NuGet location and command to restore Platform NuGet dependencies -->
		<NuGetCommand>..\nuget restore</NuGetCommand>

		<!-- Code signing tool command line bases for SHA1 and SHA256 signing -->
		<SignToolBase256>signtool sign /v /tr http://timestamp.sectigo.com /td sha256 /fd sha256 /n "Peter Simpson"</SignToolBase256>		
		<VSIXSignCommand>sign code certificate-store -cf &quot;C:\CodeSigningCertificate\peter2023.cer&quot; -cfp A7C84B6BB991B7D63120C240D9D01572F0CB54E434827810283FBBF2423E76F0 -csp &quot;eToken Base Cryptographic Provider&quot; -k &quot;Sectigo_20231013130838&quot; -d &quot;VSIX Signature&quot; -t &quot;http://timestamp.acs.microsoft.com/&quot;</VSIXSignCommand>
	</PropertyGroup>

	<!-- Set OmniSim, ASCOM Remote and Library Properties -->
	<PropertyGroup>
		<!-- Set OmniSim properties -->
		<OmniSimGitRepositoryURL>https://github.com/ASCOMInitiative/ASCOM.Alpaca.Simulators.git</OmniSimGitRepositoryURL>
		<OmniSimDirectory>$(CheckoutDirectory)\OmniSimulators</OmniSimDirectory>
		<OmniSimVSProject>$(OmniSimDirectory)\ASCOM.Alpaca.Simulators\ASCOM.Alpaca.Simulators.csproj</OmniSimVSProject>
		<OmniSimCheckoutTag></OmniSimCheckoutTag>
		<OmniSimVSSolution>$(OmniSimDirectory)\ASCOM.Alpaca.Simulators.sln</OmniSimVSSolution>
		
		<!-- Set ASCOM Remote properties -->
		<AscomRemoteGitRepositoryURL>https://github.com/ASCOMInitiative/ASCOMRemote.git</AscomRemoteGitRepositoryURL>
		<AscomRemoteDirectory>$(CheckoutDirectory)\AscomRemote</AscomRemoteDirectory>
		<AscomRemoteVSProject>$(AscomRemoteDirectory)\Remote Server\Remote Server.csproj</AscomRemoteVSProject>
		<SetNetworkPermissionsVSProject>$(AscomRemoteDirectory)\SetNetworkPermissions\SetNetworkPermissions.csproj</SetNetworkPermissionsVSProject>
		
		<!-- ASCOM Library GitHub URL from which to clone -->
		<LibraryGitRepositoryURL>https://github.com/ASCOMInitiative/ASCOMLibrary.git</LibraryGitRepositoryURL>
		<LibraryDirectory>$(CheckoutDirectory)\ASCOMLibrary</LibraryDirectory>
		<LibraryVSSolution>ASCOMLibrary.sln</LibraryVSSolution>
		<LibraryHelpDirectory>$(LibraryDirectory)\Help</LibraryHelpDirectory>
		<LibraryHelpVSSolution>ASCOMLibraryHelp.sln</LibraryHelpVSSolution>
	</PropertyGroup>

	<!-- Main build target for this build -->
	<Target Name="Build">
		<Message Text="Installer project file: $(PlatformInstallerProject)" />

		<!-- Item group for the installers that are created by the build process -->
		<ItemGroup>
			<OldPlatformInstallers Include="$(MSBuildProjectDirectory)\ASCOM*.exe;$(MSBuildProjectDirectory)\RemoveASCOM*.*;$(MSBuildProjectDirectory)\*.vsix;$(MSBuildProjectDirectory)\*.nupkg;$(MSBuildProjectDirectory)\*.zip" />
		</ItemGroup>

		<!-- Remove the checkout directory to ensure a clean build, wait until the directory actually goes because the command can complete before the contents are actually gone! -->
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'"  />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="true" />
		<Sleep Milliseconds="1000" Condition="'$(MSBuildLastTaskResult)' == 'False'" />

		<!-- Stop the build with an error if we can't clear the directory by this point -->
		<RemoveDir Directories="$(CheckoutDirectory)" ContinueOnError="false" />

		<!-- Clean up any previous installer versions  -->
		<Delete Files="@(OldPlatformInstallers)" />

		<!-- Create the export directory ready for cloning  -->
		<MakeDir Directories="$(CheckoutDirectory)"/>

		<!-- Clone a fresh copy of the ASCOM Platform Git repository  -->
		<GitClient Command="clone" LocalPath="$(MSBuildProjectDirectory)" Arguments="--branch $(GitCheckoutBranch) $(GitRepositoryPath) $(CheckoutDirectoryRelative)"/>

			<!-- Create the Library directory ready for cloning  -->
		<MakeDir Directories="$(LibraryDirectory)"/>

		<!-- Clone a fresh copy of the Library Git repository  -->
		<GitClient Command="clone" LocalPath="$(LibraryDirectory)" Arguments='--depth 1 --branch $(LibraryCheckoutBranch) $(LibraryGitRepositoryURL) "$(LibraryDirectory)"'/>
 
		<!-- Clean the Library folders  -->
		<MSBuild Projects="$(LibraryDirectory)\$(LibraryVSSolution)" Targets="Clean" Properties="Configuration=$(LibraryBuildConfiguration)" />

		<!-- Build the Library -->
		<Exec Command="dotnet build" ConsoleToMSBuild="true" WorkingDirectory="$(LibraryDirectory)" />

		<!-- Restore packages and build the Library Help  -->
		<MSBuild Projects="$(LibraryHelpDirectory)\$(LibraryHelpVSSolution)" Targets="Restore;Build" Properties="Platform=Any CPU;Configuration=$(LibraryBuildConfiguration)" />

		<!-- Create the OmniSim directory ready for cloning  -->
		<MakeDir Directories="$(OmniSimDirectory)"/>

		<!-- Clone a fresh copy of the OmniSim Git repository  -->
		<GitClient Command="clone" LocalPath="$(OmniSimDirectory)" Arguments='--depth 1 --branch $(OmniSimCheckoutBranch) $(OmniSimGitRepositoryURL) "$(OmniSimDirectory)"'/>

		<!-- Build the OmniSims -->
		<MSBuild Projects="$(OmniSimVSSolution)" Targets="Clean" Properties="Configuration=$(OmniSimConfiguration);Platform=Any CPU" />
		<MSBuild Projects="$(OmniSimVSSolution)" Targets="Restore" Properties="Configuration=$(OmniSimConfiguration);Platform=Any CPU;DefineConstants=ASCOM_COM;" />
		<MSBuild Projects="$(OmniSimVSSolution)" Targets="Build" Properties="Configuration=$(OmniSimConfiguration);Platform=Any CPU;DefineConstants=ASCOM_COM;" />

		<!-- Publish a 32bit OmniSim executable -->
		<Exec Command="dotnet publish -c Release -r win-x86 --self-contained true -p DefineConstants=ASCOM_COM -o ..\publish\x86" 
			ConsoleToMSBuild="true" 
			WorkingDirectory="$(OmniSimDirectory)\ASCOM.Alpaca.Simulators" />

		<!-- Publish a 64bit OmniSim executable -->
		<Exec Command="dotnet publish -c Release -r win-x64 --self-contained true -p DefineConstants=ASCOM_COM -o ..\publish\x64" 
			ConsoleToMSBuild="true" 
			WorkingDirectory="$(OmniSimDirectory)\ASCOM.Alpaca.Simulators" />

		<Message Text="Completed building the Omni-Simulators." />
		
		<!-- Publish ASCOM Remote -->
		<!-- Create the export directory ready for cloning  -->
		<MakeDir Directories="$(AscomRemoteDirectory)"/>

		<!-- Clone a fresh copy of the ASCOM Remote Git repository  -->
		<GitClient Command="clone" LocalPath="$(AscomRemoteDirectory)" Arguments='--depth 1 --branch $(AscomRemoteRepositorytBranch) $(AscomRemoteGitRepositoryURL) "$(AscomRemoteDirectory)"'/>

		<!-- Publish 32bit ASCOM Remote -->
		<MSBuild Projects="$(AscomRemoteVSProject)"
			Targets="restore;rebuild;publish" 
			Properties="Configuration=$(AscomRemoteBuildConfiguration);
			DefineConstants=PLATFORM_BUILD;
			Platform=AnyCPU;
			OutputDir=builds\Ascomremote\x86\;
			RuntimeIdentifier=win-x86;
			SelfContained=true;
			PublishDir=..\publish\AscomRemote\x86\;
			DebugType=embedded" />
		<Message Text="Completed building ASCOM Remote x86." />

		<!-- Remove obj and bin folders from previous build to get a new clean compile -->
		<RemoveDir Directories="$(AscomRemoteDirectory)\Remote Server\obj" ContinueOnError="False" />
		<RemoveDir Directories="$(AscomRemoteDirectory)\Remote Server\bin" ContinueOnError="False" />

		<!-- Publish 64bit ASCOM Remote -->
		<MSBuild Projects="$(AscomRemoteVSProject)"
			Targets="clean;restore;rebuild;publish" 
			Properties="Configuration=$(AscomRemoteBuildConfiguration);
			DefineConstants=PLATFORM_BUILD;
			Platform=Any CPU;
			OutputDir=builds\AscomRemote\x64\;
			RuntimeIdentifier=win-x64;
			SelfContained=true;
			PublishDir=..\publish\AscomRemote\x64\;
			DebugType=embedded" />
		<Message Text="Completed building ASCOM Remote x64." />

		<!-- Publish SetNetworkPermissions x86 -->
		<MSBuild Projects="$(SetNetworkPermissionsVSProject)"
			Targets="restore;rebuild;publish" 
			Properties="Configuration=$(AscomRemoteBuildConfiguration);
			Platform=AnyCPU;
			OutputDir=builds\x86\;
			RuntimeIdentifier=win-x86;
			SelfContained=true;
			PublishDir=..\publish\SetNetworkPermissions\x86\;
			DebugType=embedded" />

		<Message Text="Completed building SetNetworkPermissions 32bit." />

		<!-- Get the latest commit number into the Revision Property to use in the the Platform version number  Now uses 'all' instead of 'HEAD' to get latest commit accross all branches. -->
		<Exec Command="git.exe rev-list --all --count" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)">
			<Output TaskParameter="ConsoleOutput" PropertyName="Revision" />
		</Exec>
		<Message Text="Revision Level: $(Revision)"/>

		<!-- Get the SHA1 of the latest commit into the CommitSHA1 property -->
		<Exec Command="git.exe rev-parse --short HEAD" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)">
			<Output TaskParameter="ConsoleOutput" PropertyName="CommitSHA1" />
		</Exec>
		<Message Text="HEAD SHA1: $(CommitSHA1)"/>

		<!-- Restore NuGet packages -->
		<Exec Command="$(NuGetCommand)" ConsoleToMSBuild="true" WorkingDirectory="$(CheckoutDirectory)" />

		<!-- Copy the InstallAware shared text strings to the InstallAware program directory. This is the only way that IA will actually use the modified strings! Ugh - but there it is. -->
		<!-- File now stored permanently on the build machine because this approach requires the command prompt to be run with Admin privilege -->
		<!-- <ItemGroup> -->
		<!-- 	<MIASharedStrings Include="$(CheckoutDirectory)\$(ASCOMSharedStringsDirectory)\*.*" /> -->
		<!-- </ItemGroup> -->
		<!-- <Copy SourceFiles="@(MIASharedStrings)" DestinationFolder="$(MIALanguageFolder)" /> -->

		<!-- Get the Platform version numbers from the MasterPlatformVersion file in the Export -->
		<ReadLinesFromFile File="$(VersionFile)" >
			<Output TaskParameter="Lines"
			ItemName="VersionNumberList" />
		</ReadLinesFromFile>

		<!-- Create version numbers from the semicolon delimited list that ReadLinesFromFile delivers -->
		<PropertyGroup>
			<PlatformNumber>@(VersionNumberList)</PlatformNumber>
			<PlatformMajor>$(PlatformNumber.Split(';')[0])</PlatformMajor>
			<PlatformMinor>$(PlatformNumber.Split(';')[1])</PlatformMinor>
			<PlatformServicePack>$(PlatformNumber.Split(';')[2])</PlatformServicePack>
			<PlatformSemverRC>$(PlatformNumber.Split(';')[3])</PlatformSemverRC>
		</PropertyGroup>
		
		<!-- Set the RC string to an empty string for release builds. NOTE: The value in the text file cannot be an empty string, it must have something in it in order for the split above to work. -->
		<PropertyGroup Condition=" '$(PlatformSemverRC)'=='Release' ">
			<PlatformSemverRC></PlatformSemverRC>
		</PropertyGroup>

		<!-- Set the Platform title for initial release with minor version 0 e.g. 7.0, release version -->
		<PropertyGroup Condition="'$(PlatformMinor)'=='0' And '$(PlatformServicePack)'=='0' And '$(PlatformSemverRC)'==''">
			<PlatformName>ASCOM Platform $(PlatformMajor)</PlatformName>
		</PropertyGroup>
	
		<!-- Set the Platform title for initial release with minor version 0 e.g. 7.0, pre- version -->
		<PropertyGroup Condition="'$(PlatformMinor)'=='0' And '$(PlatformServicePack)'=='0' And '$(PlatformSemverRC)'!=''">
			<PlatformName>ASCOM Platform $(PlatformMajor) RC ($PlatformSemverRC)</PlatformName>
		</PropertyGroup>
	
		<!-- Set the Platform title for Updates with minor version 0 e.g. 7.0 Update 1,  version -->
		<PropertyGroup Condition="'$(PlatformMinor)'=='0' And '$(PlatformServicePack)'!='0' And '$(PlatformSemverRC)'==''">
			<PlatformName>ASCOM Platform $(PlatformMajor) Update $(PlatformServicePack)</PlatformName>
		</PropertyGroup>
	
		<!-- Set the Platform title forUpdates with minor version 0 e.g. 7.0, pre- version -->
		<PropertyGroup Condition="'$(PlatformMinor)'=='0' And '$(PlatformServicePack)'!='0' And '$(PlatformSemverRC)'!=''">
			<PlatformName>ASCOM Platform $(PlatformMajor) Update $(PlatformServicePack) RC $(PlatformSemverRC)</PlatformName>
		</PropertyGroup>
	
		<!-- Set the Platform title for initial  with minor version >=1 e.g. 7.0,  version -->
		<PropertyGroup Condition="'$(PlatformMinor)'!='0' And '$(PlatformServicePack)'=='0' And '$(PlatformSemverRC)'==''">
			<PlatformName>ASCOM Platform $(PlatformMajor).$(PlatformMinor)</PlatformName>
		</PropertyGroup>
	
		<!-- Set the Platform title for initial  with minor version >=1 e.g. 7.0, pre- version -->
		<PropertyGroup Condition="'$(PlatformMinor)'!='0' And '$(PlatformServicePack)'=='0' And '$(PlatformSemverRC)'!=''">
			<PlatformName>ASCOM Platform $(PlatformMajor).$(PlatformMinor) RC ($PlatformSemverRC)</PlatformName>
		</PropertyGroup>
	
		<!-- Set the Platform title for Updates with minor version 0 e.g. 7.>=1 Update 1,  version -->
		<PropertyGroup Condition="'$(PlatformMinor)'!='0' And '$(PlatformServicePack)'!='0' And '$(PlatformSemverRC)'==''">
			<PlatformName>ASCOM Platform $(PlatformMajor).$(PlatformMinor) Update $(PlatformServicePack)</PlatformName>
		</PropertyGroup>
	
		<!-- Set the Platform title forUpdates with minor version >=1 e.g. 7.0, pre- version -->
		<PropertyGroup Condition="'($(PlatformMinor)'!='0' And '$(PlatformServicePack)'!='0' And '$(PlatformSemverRC)'!=''">
			<PlatformName>ASCOM Platform $(PlatformMajor).$(PlatformMinor) Update $(PlatformServicePack) RC $(PlatformSemverRC)</PlatformName>
		</PropertyGroup>
	
		<!-- Set the Platform title forUpdates with minor version >=1 e.g. 7.0, pre- version -->
		<PropertyGroup Condition="'$(PlatformSemverRC)'!=''">
			<PlatformSemverRC>-rc.$(PlatformSemverRC)</PlatformSemverRC>
		</PropertyGroup>

		<PropertyGroup>
			<!-- Current Platform version Major.Minor -->
			<PlatformVersion>$(PlatformMajor).$(PlatformMinor)</PlatformVersion>
			<PlatformSemver>$(PlatformMajor).$(PlatformMinor).$(PlatformServicePack)$(PlatformSemverRC)+$(Revision)</PlatformSemver>
		</PropertyGroup>
		<Message Text="Version numbers - Major: $(PlatformMajor), Minor: $(PlatformMinor), ServicePack: $(PlatformServicePack), MasterPlatformLevel: $(PlatformVersion), Semver: $(PlatformSemver), PlatformSemverRC: $(PlatformSemverRC), Platform name: $(PlatformName)" />

		<!-- Define the Platform exe name. -->
		<PropertyGroup>
			<PlatformExeName>ASCOMPlatform$(PlatformMajor)$(PlatformMinor)$(PlatformServicePack)$(PlatformSemverRC).$(Revision)</PlatformExeName>
		</PropertyGroup>
		
		<!-- Update the Platform name in the InstallAware project files -->
		<FileUpdate Files="$(CheckoutDirectory)\$(PlatformInstallerProject)"
			Encoding="ASCII"
			Regex="ASCOMPlatformName"
			ReplacementText="$(PlatformName)">
		</FileUpdate>

		<!-- Update the file version numbers in the InstallAware project files -->
		<FileUpdate Files="$(CheckoutDirectory)\$(PlatformInstallerProject)"
			Encoding="ASCII"
			Regex="$(PlatformVersion).9999.9999"
			ReplacementText="$(PlatformVersion).$(PlatformServicePack).$(Revision)">
		</FileUpdate>

		<!-- Update the Platform installer name in the InstallAware project files -->
		<FileUpdate Files="$(CheckoutDirectory)\$(PlatformInstallerProject)"
			Encoding="ASCII"
			Regex="AscomPlatformInstaller"
			ReplacementText="$(PlatformExeName)">
		</FileUpdate>

		<!-- Define the VSIX package XML schema name. -->
		<PropertyGroup>
			<Namespace>
				<Namespace Prefix="vsx" Uri="http://schemas.microsoft.com/developer/vsx-schema/2011" />
			</Namespace>
		</PropertyGroup>

		<!-- Update the developer project templates VS2019 VSIX installer version number with the current build number. -->
		<XmlPoke
		  XmlInputPath="$(CheckoutDirectory)\$(VSIXManifestFile2019)"
		  Value="$(PlatformMajor).$(PlatformMinor).$(Revision)"
		  Query="/vsx:PackageManifest/vsx:Metadata/vsx:Identity/@Version"
		  Namespaces="$(Namespace)"/>
		  <Message Text="VSIX Manifest file: $(CheckoutDirectory)\$(VSIXManifestFile2019) version number updated to: $(PlatformMajor).$(PlatformMinor).$(PlatformServicePack).$(Revision)"/>

		<!-- Update the developer project templates VS2022 VSIX installer version number with the current build number. -->
		<XmlPoke
		  XmlInputPath="$(CheckoutDirectory)\$(VSIXManifestFile2022)"
		  Value="$(PlatformMajor).$(PlatformMinor).$(Revision)"
		  Query="/vsx:PackageManifest/vsx:Metadata/vsx:Identity/@Version"
		  Namespaces="$(Namespace)"/>
		  <Message Text="VSIX Manifest file: $(CheckoutDirectory)\$(VSIXManifestFile2022) version number updated to: $(PlatformMajor).$(PlatformMinor).$(PlatformServicePack).$(Revision)"/>

		<!-- Update the master package version number to the current Platform level if this is a release. -->
		<XmlPoke Condition=" '$(BuildType)'=='Release' "
		  XmlInputPath="$(CheckoutDirectory)\$(PackageVersionFile)"
		  Value="$(PlatformMajor).$(PlatformMinor).$(PlatformServicePack)$(PackageSuffix)"
		  Query="//Version" />

		<!-- Update the master package version number to the current Platform and revision if this is a release. -->
		<XmlPoke Condition=" '$(BuildType)'=='ReleaseCandidate' "
		  XmlInputPath="$(CheckoutDirectory)\$(PackageVersionFile)"
		  Value="$(PlatformMajor).$(PlatformMinor).$(PlatformServicePack)$(PackageSuffix)-rc.$(Revision)"
		  Query="//Version" />

		<Message Text="Package version file: $(CheckoutDirectory)\$(PackageVersionFile) version number updated to: $(PlatformMajor).$(PlatformMinor).$(PlatformServicePack)"/>

		<!-- Create global AssemblyVersion attributes from the Platform version, service pack and revision numbers. -->
		<AssemblyInfo
			CodeLanguage="CS"
			OutputFile="$(CheckoutDirectory)\AssemblyVersionInfo.cs"
			AssemblyFileVersion="$(PlatformVersion).$(PlatformServicePack).$(Revision)"
			AssemblyInformationalVersion="$(PlatformSemver).$(CommitSHA1)"/>
		<AssemblyInfo
			CodeLanguage="VB"
			OutputFile="$(CheckoutDirectory)\AssemblyVersionInfo.vb"
			AssemblyFileVersion="$(PlatformVersion).$(PlatformServicePack).$(Revision)"
			AssemblyInformationalVersion="$(PlatformSemver).$(CommitSHA1)"/>

		<!-- Build FindGUIDs after cleaning the solution (just in case executables get committed to SVN) -->
		<!-- This builds the GUIDList.vb file ready to be incorporated into RemoveASCOM when it is built as part of the Platform -->
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Clean" Properties="Configuration=MakeDynamicLists;Platform=Mixed Platforms" />
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Build" Properties="Configuration=MakeDynamicLists;Platform=Mixed Platforms" />

		<!-- Run FindGUIDs to create the updated class in the RemoveASCOM project that contains the list of GUIDs used by the project -->
		<Exec Command='"$(CheckoutDirectory)\$(FindGUIDsDirectory)\MakeDynamicLists.exe" "$(CheckoutDirectory)" ' ContinueOnError="WarnAndContinue" />

		<!-- Build the main Platform after cleaning the solution (just in case executables get committed to SVN) -->
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Clean" Properties="Configuration=$(PlatformConfiguration);Platform=Mixed Platforms" />
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Build" Properties="Configuration=$(PlatformConfiguration);Platform=Mixed Platforms" />

		<Message Text="Signing VS2019 VSIX installer: $(CheckoutDirectory)\$(VSIXInstallerFile2019)" Importance = "High"/>
		
		<!-- Sign the VSIX installers -->
		<Exec Command='$(VSIXSignCommand) &quot;$(CheckoutDirectory)\$(VSIXInstallerFile2019)&quot;' 
		WorkingDirectory="$(CheckoutDirectory)"
		ConsoleToMSBuild="true" />
		
		<Message Text="Finished signing VS2019 VSIX installer: $(CheckoutDirectory)\$(VSIXInstallerFile2019)" Importance = "High"/>
		
		<Exec Command='$(VSIXSignCommand) &quot;$(CheckoutDirectory)\$(VSIXInstallerFile2022)&quot;'
		WorkingDirectory="$(CheckoutDirectory)"
		ConsoleToMSBuild="true"
		ContinueOnError="WarnAndContinue" />
		
		<Message Text="Finished signing VS2022 VSIX installer: $(CheckoutDirectory)\$(VSIXInstallerFile2022)" Importance = "High"/>
		
		<!-- Copy the VS2019 VSIX installer to the root folder without the beta status -->
		<!-- Define the VSIX installer source files -->
		<ItemGroup>
			<VSIXInstallerSourceFile2019 Include="$(CheckoutDirectory)\$(VSIXInstallerFile2019)"/>
		</ItemGroup>
		
		<ItemGroup>
			<VSIXInstallerSourceFile2022 Include="$(CheckoutDirectory)\$(VSIXInstallerFile2022)"/>
		</ItemGroup>
		<ItemGroup>
			<VSIXInstallerDestinationFile2019 Include="$(MSBuildProjectDirectory)\$(VSIXInstallerFileName)2019.$(Revision).$(VSIXInstallerFileType)"/>
		</ItemGroup>
		<Copy SourceFiles="@(VSIXInstallerSourceFile2019)" DestinationFiles="@(VSIXInstallerDestinationFile2019)" SkipUnchangedFiles="false" />

		<!-- Copy the VS2022 VSIX installer to the root folder without the beta status -->
		<ItemGroup>
			<VSIXInstallerDestinationFile2022 Include="$(MSBuildProjectDirectory)\$(VSIXInstallerFileName)2022.$(Revision).$(VSIXInstallerFileType)"/>
		</ItemGroup>
		<Copy SourceFiles="@(VSIXInstallerSourceFile2022)" DestinationFiles="@(VSIXInstallerDestinationFile2022)" SkipUnchangedFiles="false" />

		<!-- Build the 64bit executables after cleaning the solution (just in case executables get committed to SVN) -->
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Clean" Properties="Configuration=$(PlatformConfiguration);Platform=x64" />
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformVSSolution)" Targets="Build" Properties="Configuration=$(PlatformConfiguration);Platform=x64" />

		<!-- Build the SOFA and NOVAS ARM64 DLLs -->
		<MSBuild Projects="$(CheckoutDirectory)\$(SOFAProjectDirectory)\$(SOFAProjectFile);$(CheckoutDirectory)\$(NOVASProjectDirectory)\$(NOVASProjectFile)" Targets="Clean" Properties="Configuration=$(PlatformConfiguration);Platform=ARM64" />
		<MSBuild Projects="$(CheckoutDirectory)\$(SOFAProjectDirectory)\$(SOFAProjectFile);$(CheckoutDirectory)\$(NOVASProjectDirectory)\$(NOVASProjectFile)" Targets="Build" Properties="Configuration=$(PlatformConfiguration);Platform=ARM64" />

		<!-- Create a list of the compiled SOFA and NOVAS DLLs -->
		<ItemGroup>
			<AstrometryFileDLLs Include="$(CheckoutDirectory)\$(SOFAProjectDirectory)\ARM64\$(PlatformConfiguration)\*.DLL;$(CheckoutDirectory)\$(SOFAProjectDirectory)\Win32\$(PlatformConfiguration)\*.DLL;$(CheckoutDirectory)\$(SOFAProjectDirectory)\x64\$(PlatformConfiguration)\*.DLL" />
			<AstrometryFileDLLs Include="$(CheckoutDirectory)\$(NOVASProjectDirectory)\ARM64\$(PlatformConfiguration)\*.DLL;$(CheckoutDirectory)\$(NOVASProjectDirectory)\Win32\$(PlatformConfiguration)\*.DLL;$(CheckoutDirectory)\$(NOVASProjectDirectory)\x64\$(PlatformConfiguration)\*.DLL" />
		</ItemGroup>
		
		<!-- Sign  the astrometry DLLs -->
		<Message Text="Signing astrometry DLLs..."/>
		<Exec Command="$(SignToolBase256) &quot;%(AstrometryFileDLLs.Identity)&quot;" 
			ConsoleToMSBuild="true" 
			WorkingDirectory="$(CheckoutDirectory)" />
		<Message Text="Signed astrometry DLLs."/>
	
		<!-- Zip up the signed NOVAS and SOFA DLLs and store the zip file in the build root directory -->		
		<Zip Files="@(AstrometryFileDLLs)" ZipFileName="$(MSBuildProjectDirectory)\AstrometryDlls.$(Revision).zip" WorkingDirectory="$(CheckoutDirectory)" />
		
		<!-- Sign and copy the RemoveASCOM executables, that have just been built, to the installer main directory so that the latest versions are included in the installer -->
		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(RemoveASCOMExe)&quot;" 
			ConsoleToMSBuild="true" 
			Condition="'$(SignCode)'=='True'"
			WorkingDirectory="$(CheckoutDirectory)" />
		<ItemGroup>
			<RemoveASCOMExecutables Include="$(CheckoutDirectory)\$(RemoveASCOMExe);$(CheckoutDirectory)\$(RemoveASCOMPdb)" />
		</ItemGroup>
		<Copy SourceFiles="@(RemoveASCOMExecutables)" DestinationFolder="$(CheckoutDirectory)\$(PlatformInstallerDirectory)" />

		<!-- Zip up the RemoveASCOM files and store the zip file in the build root directory ;$(CheckoutDirectory)\$(RemoveASCOMPdb) -->
		<ItemGroup>
			<ZipFiles Include="$(CheckoutDirectory)\$(RemoveASCOMExe);$(CheckoutDirectory)\$(RemoveASCOMPdb);$(CheckoutDirectory)\$(RemoveASCOMTxt)" />
		</ItemGroup>
		<Zip Files="@(ZipFiles)" ZipFileName="$(MSBuildProjectDirectory)\RemoveASCOM.$(Revision).zip" WorkingDirectory="$(CheckoutDirectory)\$(RemoveASCOMDirectory)"/>

		<!-- Sign the executables that support the Platform installation process, these are not automatically signed by the InstallAware build process -->
			<!-- Condition="'$(SignCode)'=='True'" -->
		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(PlatformInstallerDirectory)\*.exe&quot;" 
			ConsoleToMSBuild="true" 
			WorkingDirectory="$(CheckoutDirectory)" />
		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(PlatformInstallerDirectory)\*.dll&quot;" 
			ConsoleToMSBuild="true" 
			WorkingDirectory="$(CheckoutDirectory)" />

		<!-- Sign the GACInstall executable that supports the Platform installation process because it  must be signed always to avoid anti-virus alerts. -->
		<Exec Command="$(SignToolBase256) &quot;$(GacInstallFile)&quot;" 
			ConsoleToMSBuild="true" 
			WorkingDirectory="$(CheckoutDirectory)" />
		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(PlatformInstallerDirectory)\*.dll&quot;" 
			ConsoleToMSBuild="true" 
			WorkingDirectory="$(CheckoutDirectory)" />

		<!-- Build the help files for Platform and Developer.-->
		<MSBuild Projects="$(CheckoutDirectory)\$(PlatformHelpProject)" Properties="Configuration=$(PlatformConfiguration);Platform=AnyCPU" />
		<MSBuild Projects="$(CheckoutDirectory)\$(DeveloperHelpProject)" Properties="Configuration=$(PlatformConfiguration);Platform=AnyCPU" />

		<!-- Build the InstallAware installers -->
		<Exec Command='"$(MIABuild)" "$(CheckoutDirectory)\$(PlatformInstallerProject)" $(MIAOptions)' />

		<Message Text="Completed installer build." />
		
		<!-- Sign the Platform installer executables. -->
		<Exec Command="$(SignToolBase256) &quot;$(CheckoutDirectory)\$(PlatformInstallerDirectory)\Release\single\*.exe&quot;" 
			ConsoleToMSBuild="true" 
			WorkingDirectory="$(CheckoutDirectory)" />

		<Message Text="Completed signing the installer." />
		
		<!-- Copy the installers back to the build root directory -->
		<Sleep Milliseconds="1000" />
		<ItemGroup>
			<PlatformInstallers
			Include="$(CheckoutDirectory)\$(PlatformInstallerDirectory)\Release\Single\$(PlatformExeName).exe" />
		</ItemGroup>
		<ItemGroup>
			<PlatformInstallersRenamed
			Include="$(MSBuildProjectDirectory)\$(PlatformExeName).exe" />
		</ItemGroup>
		<Copy SourceFiles="@(PlatformInstallers)" DestinationFiles="@(PlatformInstallersRenamed)" />

		<!-- Copy the ASCOM device interfaces package to the root folder -->
		<ItemGroup>
			<DeviceInterfacePackage Include="$(CheckoutDirectory)\$(DeviceInterfacesPackageFolder)\*.nupkg"/>
		</ItemGroup>
		<Copy SourceFiles="@(DeviceInterfacePackage)" DestinationFolder="$(MSBuildProjectDirectory)" SkipUnchangedFiles="false" />

		<!-- Copy the ASCOM Exceptions package to the root folder -->
		<ItemGroup>
			<ExceptionPackage Include="$(CheckoutDirectory)\$(ASCOMExceptionsPackageFolder)\*.nupkg"/>
		</ItemGroup>
		<Copy SourceFiles="@(ExceptionPackage)" DestinationFolder="$(MSBuildProjectDirectory)" SkipUnchangedFiles="false" />

		<!-- Copy the ASCOM Build Environment package to the root folder -->
		<ItemGroup>
			<BuildEnvironmentPackage Include="$(CheckoutDirectory)\$(BuildEnvironmentPackageFolder)\*.nupkg"/>
		</ItemGroup>
		<Copy SourceFiles="@(BuildEnvironmentPackage)" DestinationFolder="$(MSBuildProjectDirectory)" SkipUnchangedFiles="false" />

		<!-- Create a formatted version of the current date and time -->
		<PropertyGroup>
			<CurrentDate>$([System.DateTime]::Now.ToString(dd MMMM yyyy hh:mm:ss))</CurrentDate>
		</PropertyGroup>

		<!-- Update the recorded build number -->
		<ItemGroup>
			<CmdLine Include = "Build version: $(PlatformVersion).$(PlatformServicePack).$(Revision)"/>
			<CmdLine Include = "Built on: $(CurrentDate)"/>
		</ItemGroup>
		<WriteLinesToFile File="$(BuildNumberFile)" Lines="@(CmdLine)" Overwrite="true"/>

		<Message Text="Completed copying files to Export folder." />
		
	</Target>

</Project>